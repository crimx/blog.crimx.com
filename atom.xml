<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CRIMX</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.crimx.com/"/>
  <updated>2017-04-06T09:55:32.889Z</updated>
  <id>https://blog.crimx.com/</id>
  
  <author>
    <name>StrayBugs</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Position and Drag Iframe</title>
    <link href="https://blog.crimx.com/2017/04/06/position-and-drag-iframe-en/"/>
    <id>https://blog.crimx.com/2017/04/06/position-and-drag-iframe-en/</id>
    <published>2017-04-05T16:00:00.000Z</published>
    <updated>2017-04-06T09:55:32.889Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Position-in-iframes">
<a href="#Position-in-iframes" class="headerlink" title="Position in iframes"></a>Position in iframes</h1>
<p>I wrote a Chrome extension <a href="http://www.crimx.com/crx-saladict/" target="_blank">Saladict</a>, an inline translator, which involved such requirement: When user makes a text selection, something will pop up nearby the cursor.</p>
<p>It looks simple at first view. Just listen to a <code>mouseup</code> event and get <code>clientX</code> and <code>clientY</code> from it.</p>
<p>But there is a flaw in it - <code>mouseup</code> events inside iframes won&#39;t bubble up to the top frame.</p>
<p>The solution is actually quite simple. If you know how to connect the dots.</p>
<h2 id="iframe-script-injection">
<a href="#iframe-script-injection" class="headerlink" title="iframe script injection"></a>iframe script injection</h2>
<p>Using the <code>all_frames</code> property in <code>manifest.json</code>, a content script can run in all frames.</p>
<p></p>
<figure class="highlight json">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre>
</td>
<td class="code">
<pre><div class="line">&#123;</div><div class="line">  <span class="attr">"content_scripts"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"js"</span>: [<span class="string">"selection.js"</span>],</div><div class="line">      <span class="attr">"matches"</span>: [<span class="string">"&lt;all_urls&gt;"</span>],</div><div class="line">      <span class="attr">"all_frames"</span>: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="Mouse-Event-Detection">
<a href="#Mouse-Event-Detection" class="headerlink" title="Mouse Event Detection"></a>Mouse Event Detection</h2>
<p>Now you can listen to <code>mouseup</code> event in all iframes.</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="comment">// selection.js</span></div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'mouseup'</span>, handleMouseUp)</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="Upload-Cursor-Coordinates">
<a href="#Upload-Cursor-Coordinates" class="headerlink" title="Upload Cursor Coordinates"></a>Upload Cursor Coordinates</h2>
<p><code>clientX</code> and <code>clientY</code> of the mouse events that are triggered in iframes are coordinates within iframe windows. Upload these coordinates as offsets to the upper frame, then plus the iframe position you will get the cursor position
within the upper frame window.</p>
<p>On Chrome you can boldly use <code>postMessage</code>.</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="comment">// selection.js</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleMouseUp</span> (<span class="params">evt</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.parent === <span class="built_in">window</span>) &#123;</div><div class="line">    <span class="comment">// Top frame</span></div><div class="line">    doAwesomeThings(evt.clientX，evt.clientY)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// Pass the coordinates to upper frame</span></div><div class="line">    <span class="built_in">window</span>.parent.postMessage(&#123;</div><div class="line">      <span class="attr">msg</span>: <span class="string">'SALADICT_CLICK'</span>,</div><div class="line">      <span class="attr">mouseX</span>: evt.clientX,</div><div class="line">      <span class="attr">mouseY</span>: evt.clientY</div><div class="line">    &#125;, <span class="string">'*'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="Add-offsets">
<a href="#Add-offsets" class="headerlink" title="Add offsets"></a>Add offsets</h2>
<p>How does the upper frame know which iframe is sending coordinates? Well, the <code>message</code> event contains the content window of the iframe. Use it to match the iframe element.</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="comment">// selection.js</span></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, evt =&gt; &#123;</div><div class="line">  <span class="keyword">if</span> (evt.data.msg !== <span class="string">'SALADICT_CLICK'</span>) &#123; <span class="keyword">return</span> &#125;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> iframe = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">'iframe'</span>))</div><div class="line">    .filter(<span class="function"><span class="params">f</span> =&gt;</span> f.contentWindow === evt.source)</div><div class="line">    [<span class="number">0</span>]</div><div class="line">  <span class="keyword">if</span> (!iframe) &#123; <span class="keyword">return</span> &#125;</div><div class="line"></div><div class="line">  <span class="comment">// calculate coordinates within current window</span></div><div class="line">  <span class="keyword">let</span> pos = iframe.getBoundingClientRect()</div><div class="line">  <span class="keyword">let</span> mouseX = evt.data.mouseX + pos.left</div><div class="line">  <span class="keyword">let</span> mouseY = evt.data.mouseY + pos.top</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.parent === <span class="built_in">window</span>) &#123;</div><div class="line">    <span class="comment">// Top frame</span></div><div class="line">    doAwesomeThings(mouseX, mouseY)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// Keep uploading</span></div><div class="line">    <span class="built_in">window</span>.parent.postMessage(&#123;</div><div class="line">      <span class="attr">msg</span>: <span class="string">'SALADICT_CLICK'</span>,</div><div class="line">      mouseX,</div><div class="line">      mouseY</div><div class="line">    &#125;, <span class="string">'*'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h1 id="iframe-Dragging">
<a href="#iframe-Dragging" class="headerlink" title="iframe Dragging"></a>iframe Dragging</h1>
<p>Another requirement for Saladict is to drag an iframe panel.</p>
<h2 id="Dragging-101">
<a href="#Dragging-101" class="headerlink" title="Dragging 101"></a>Dragging 101</h2>
<p>Before getting into iframe dragging. There are few basic ideas of implementing a draggable element.</p>
<p>One of the most common approaches is to listen to <code>mousedown</code>, <code>mousemove</code> and <code>mouseup</code> events, which handle drag start, dragging and drag end. And apply the offsets to the element&#39;s <code>left</code> and <code>top</code>style properties.</p>
<p>If this is your first time implementing this feature, you are likely to listen to <code>mousemove</code> events of the element itself.</p>
<p>You can indeed get the correct result in the way. The problem is, if the curser moves a bit too fast and leaves the element, the dragging will stop. That&#39;s why you should listen to global <code>mousemove</code> event instead.</p>
<h2 id="Dragging-with-iframe">
<a href="#Dragging-with-iframe" class="headerlink" title="Dragging with iframe"></a>Dragging with iframe</h2>
<p>The theory behind iframe dragging is the same. Only the mouse events triggered in iframes will not bubble up to the upper frame. You need to wrap it up yourselves.</p>
<h2 id="iframe-Part">
<a href="#iframe-Part" class="headerlink" title="iframe Part"></a>iframe Part</h2>
<p>Drag start is triggered by a draggable element inside iframe. For better performance, dragging and drag end event listeners are attached in drag start and are detached in drag end.</p>
<p>Dragging event listener is required here because the <code>mousemove</code> event of the upper frame breaks inside the iframe. We need to let upper frame know what is happening inside iframe.</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="comment">// iframe.js</span></div><div class="line"><span class="keyword">var</span> baseMouseX, baseMouseY</div><div class="line"></div><div class="line">$dragArea.addEventListener(<span class="string">'mousedown'</span>, handleDragStart)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleDragStart</span> (<span class="params">evt</span>) </span>&#123;</div><div class="line">  baseMouseX = evt.clientX</div><div class="line">  baseMouseY = evt.clientY</div><div class="line"></div><div class="line">  <span class="built_in">window</span>.parent.postMessage(&#123;</div><div class="line">    <span class="attr">msg</span>: <span class="string">'SALADICT_DRAG_START'</span>,</div><div class="line">    <span class="attr">mouseX</span>: baseMouseX,</div><div class="line">    <span class="attr">mouseY</span>: baseMouseY</div><div class="line">  &#125;, <span class="string">'*'</span>)</div><div class="line"></div><div class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'mouseup'</span>, handleDragEnd)</div><div class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'mousemove'</span>, handleMousemove)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleMousemove</span> (<span class="params">evt</span>) </span>&#123;</div><div class="line">  <span class="built_in">window</span>.parent.postMessage(&#123;</div><div class="line">    <span class="attr">msg</span>: <span class="string">'SALADICT_DRAG_MOUSEMOVE'</span>,</div><div class="line">    <span class="attr">offsetX</span>: evt.clientX - baseMouseX,</div><div class="line">    <span class="attr">offsetY</span>: evt.clientY - baseMouseY</div><div class="line">  &#125;, <span class="string">'*'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleDragEnd</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">window</span>.parent.postMessage(&#123;</div><div class="line">    <span class="attr">msg</span>: <span class="string">'SALADICT_DRAG_END'</span></div><div class="line">  &#125;, <span class="string">'*'</span>)</div><div class="line"></div><div class="line">  <span class="built_in">document</span>.removeEventListener(<span class="string">'mouseup'</span>, handleDragEnd)</div><div class="line">  <span class="built_in">document</span>.removeEventListener(<span class="string">'mousemove'</span>, handleMousemove)</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="Upper-Frame-Part">
<a href="#Upper-Frame-Part" class="headerlink" title="Upper Frame Part"></a>Upper Frame Part</h2>
<p>Use <code>handleFrameMousemove</code> to handle the offsets from iframe.</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="comment">// parent.js</span></div><div class="line"><span class="keyword">var</span> pageMouseX, pageMouseY</div><div class="line"></div><div class="line"><span class="keyword">var</span> frameTop = <span class="number">0</span></div><div class="line"><span class="keyword">var</span> frameLeft = <span class="number">0</span></div><div class="line">$iframe.style.top = frameTop + <span class="string">'px'</span></div><div class="line">$iframe.style.left = frameLeft + <span class="string">'px'</span></div><div class="line"></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, evt =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> data = evt.data</div><div class="line"></div><div class="line">  <span class="keyword">switch</span> (data.msg) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'SALADICT_DRAG_START'</span>:</div><div class="line">      handleDragStart(data.mouseX, data.mouseY)</div><div class="line">      <span class="keyword">break</span></div><div class="line">    <span class="keyword">case</span> <span class="string">'SALADICT_DRAG_MOUSEMOVE'</span>:</div><div class="line">      handleFrameMousemove(data.offsetX, data.offsetY)</div><div class="line">      <span class="keyword">break</span></div><div class="line">    <span class="keyword">case</span> <span class="string">'SALADICT_DRAG_END'</span>:</div><div class="line">      handleDragEnd()</div><div class="line">      <span class="keyword">break</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleDragStart</span> (<span class="params">mouseX, mouseY</span>) </span>&#123;</div><div class="line">  <span class="comment">// get the coordinates within the upper frame</span></div><div class="line">  pageMouseX = frameLeft + mouseX</div><div class="line">  pageMouseY = frameTop + mouseY</div><div class="line"></div><div class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'mouseup'</span>, handleDragEnd)</div><div class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'mousemove'</span>, handlePageMousemove)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleDragEnd</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">document</span>.removeEventListener(<span class="string">'mouseup'</span>, handleDragEnd)</div><div class="line">  <span class="built_in">document</span>.removeEventListener(<span class="string">'mousemove'</span>, handlePageMousemove)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleFrameMousemove</span> (<span class="params">offsetX, offsetY</span>) </span>&#123;</div><div class="line">  frameTop += offsetY</div><div class="line">  frameLeft += offsetX</div><div class="line">  $iframe.style.top = frameTop + <span class="string">'px'</span></div><div class="line">  $iframe.style.left = frameLeft + <span class="string">'px'</span></div><div class="line"></div><div class="line">  <span class="comment">// Add the missing coordinates</span></div><div class="line">  pageMouseX += offsetX</div><div class="line">  pageMouseY += offsetY</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlePageMousemove</span> (<span class="params">evt</span>) </span>&#123;</div><div class="line">  frameTop += evt.clientX - pageMouseX</div><div class="line">  frameLeft += evt.clientY - pageMouseY</div><div class="line">  $iframe.style.top = frameTop + <span class="string">'px'</span></div><div class="line">  $iframe.style.left = frameLeft + <span class="string">'px'</span></div><div class="line"></div><div class="line">  pageMouseX = evt.clientX</div><div class="line">  pageMouseY = evt.clientY</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="Demo">
<a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2>
<p>You can drag the iframe square below:</p>
<p></p>
<div class="drag-container">
<style type="text/css">
.drag-container {
    position: relative;
    height: 200px;
}

.drag-iframe {
    position: absolute;
    width: 200px;
    height: 200px;
}
</style><iframe class="drag-iframe" src="/images/post/drag-iframe.html" frameborder="0"></iframe>
<script type="text/javascript">
;
(function() {
    var pageMouseX, pageMouseY

    var $iframe = document.querySelector('.drag-iframe')
    var frameTop = 0
    var frameLeft = 0
    $iframe.style.top = frameTop + 'px'
    $iframe.style.left = frameLeft + 'px'

    window.addEventListener('message', evt => {
        const data = evt.data

        switch (data.msg) {
            case 'SALADICT_DRAG_START':
                handleDragStart(data.mouseX, data.mouseY)
                break
            case 'SALADICT_DRAG_MOUSEMOVE':
                handleFrameMousemove(data.offsetX, data.offsetY)
                break
            case 'SALADICT_DRAG_END':
                handleDragEnd()
                break
        }
    })

    function handleDragStart(mouseX, mouseY) {
        pageMouseX = frameLeft + mouseX
        pageMouseY = frameTop + mouseY

        document.addEventListener('mouseup', handleDragEnd)
        document.addEventListener('mousemove', handlePageMousemove)
    }

    function handleDragEnd() {
        document.removeEventListener('mouseup', handleDragEnd)
        document.removeEventListener('mousemove', handlePageMousemove)
    }

    function handleFrameMousemove(offsetX, offsetY) {
        frameTop += offsetY
        frameLeft += offsetX
        $iframe.style.top = frameTop + 'px'
        $iframe.style.left = frameLeft + 'px'

        pageMouseX += offsetX
        pageMouseY += offsetY
    }

    function handlePageMousemove(evt) {
        frameTop += evt.clientX - pageMouseX
        frameLeft += evt.clientY - pageMouseY
        $iframe.style.top = frameTop + 'px'
        $iframe.style.left = frameLeft + 'px'

        pageMouseX = evt.clientX
        pageMouseY = evt.clientY
    }
})()
</script>
</div>
<p></p>
<h2 id="Browser-Compatibility">
<a href="#Browser-Compatibility" class="headerlink" title="Browser Compatibility"></a>Browser Compatibility</h2>
<p>As you can see, nothing fancy here, just passing coordinates around. So for older browsers, just use the old ways to communicate. You can also manipulate the values directly if they are same-origin.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Position-in-iframes&quot;&gt;
&lt;a href=&quot;#Position-in-iframes&quot; class=&quot;headerlink&quot; title=&quot;Position in iframes&quot;&gt;&lt;/a&gt;Position in iframes&lt;/h1&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.crimx.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.crimx.com/tags/JavaScript/"/>
    
      <category term="iframe" scheme="https://blog.crimx.com/tags/iframe/"/>
    
      <category term="postMessage" scheme="https://blog.crimx.com/tags/postMessage/"/>
    
      <category term="Drag" scheme="https://blog.crimx.com/tags/Drag/"/>
    
      <category term="Extension" scheme="https://blog.crimx.com/tags/Extension/"/>
    
  </entry>
  
  <entry>
    <title>定位与拖动 Iframe</title>
    <link href="https://blog.crimx.com/2017/04/06/position-and-drag-iframe/"/>
    <id>https://blog.crimx.com/2017/04/06/position-and-drag-iframe/</id>
    <published>2017-04-05T16:00:00.000Z</published>
    <updated>2017-04-06T09:55:52.633Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定位-iframe">
<a href="#定位-iframe" class="headerlink" title="定位 iframe"></a>定位 iframe</h1>
<p>在写一个划词翻译扩展 <a href="http://www.crimx.com/crx-saladict/" target="_blank">Saladict</a> 时，有一个需求：用户选择一段文本之后，会在鼠标附近显示一些元素。</p>
<p>这个初看很简单，监听一个 <code>mouseup</code> 事件，获取 <code>clientX</code> 和 <code>clientY</code> 就行。这也是 Saladict 前几版用的方法。</p>
<p>但这个方法有个缺陷：iframe 里的鼠标事件不会传到父窗口上。</p>
<p>解决方法也很简单，就难在把它们都联系起来。</p>
<h2 id="iframe-里插入脚本">
<a href="#iframe-里插入脚本" class="headerlink" title="iframe 里插入脚本"></a>iframe 里插入脚本</h2>
<p>在 <code>manifest.json</code> 里，<code>content_scripts</code> 有个选项 <code>all_frames</code>，可以让脚本插入到所有的 frame 里。</p>
<p></p>
<figure class="highlight json">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre>
</td>
<td class="code">
<pre><div class="line">&#123;</div><div class="line">  <span class="attr">"content_scripts"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"js"</span>: [<span class="string">"selection.js"</span>],</div><div class="line">      <span class="attr">"matches"</span>: [<span class="string">"&lt;all_urls&gt;"</span>],</div><div class="line">      <span class="attr">"all_frames"</span>: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="检测点击">
<a href="#检测点击" class="headerlink" title="检测点击"></a>检测点击</h2>
<p>现在可以检测 iframe 里的点击事件</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="comment">// selection.js</span></div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'mouseup'</span>, handleMouseUp)</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="上传坐标">
<a href="#上传坐标" class="headerlink" title="上传坐标"></a>上传坐标</h2>
<p>当点击发生在 iframe 里时，获取的坐标是相对于 iframe 窗口的，所以把这个坐标交给上层，再加上 iframe 本身的坐标，就可以算出点击相对上层的坐标。</p>
<p>Chrome 里可以放心使用 <code>postMessage</code></p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="comment">// selection.js</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleMouseUp</span> (<span class="params">evt</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.parent === <span class="built_in">window</span>) &#123;</div><div class="line">    <span class="comment">// 到了顶层</span></div><div class="line">    doAwesomeThings(evt.clientX，evt.clientY)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// 把坐标传上去</span></div><div class="line">    <span class="built_in">window</span>.parent.postMessage(&#123;</div><div class="line">      <span class="attr">msg</span>: <span class="string">'SALADICT_CLICK'</span>,</div><div class="line">      <span class="attr">mouseX</span>: evt.clientX,</div><div class="line">      <span class="attr">mouseY</span>: evt.clientY</div><div class="line">    &#125;, <span class="string">'*'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="计算偏移">
<a href="#计算偏移" class="headerlink" title="计算偏移"></a>计算偏移</h2>
<p>上层怎么知道是哪个 iframe 传来坐标？很简单，<code>message</code> 事件里携带了 iframe 的 <code>window</code>，对比一下就可以。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="comment">// selection.js</span></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, evt =&gt; &#123;</div><div class="line">  <span class="keyword">if</span> (evt.data.msg !== <span class="string">'SALADICT_CLICK'</span>) &#123; <span class="keyword">return</span> &#125;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> iframe = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">'iframe'</span>))</div><div class="line">    .filter(<span class="function"><span class="params">f</span> =&gt;</span> f.contentWindow === evt.source)</div><div class="line">    [<span class="number">0</span>]</div><div class="line">  <span class="keyword">if</span> (!iframe) &#123; <span class="keyword">return</span> &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 计算偏移</span></div><div class="line">  <span class="keyword">let</span> pos = iframe.getBoundingClientRect()</div><div class="line">  <span class="keyword">let</span> mouseX = evt.data.mouseX + pos.left</div><div class="line">  <span class="keyword">let</span> mouseY = evt.data.mouseY + pos.top</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.parent === <span class="built_in">window</span>) &#123;</div><div class="line">    <span class="comment">// 顶层</span></div><div class="line">    doAwesomeThings(mouseX, mouseY)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// 继续上传</span></div><div class="line">    <span class="built_in">window</span>.parent.postMessage(&#123;</div><div class="line">      <span class="attr">msg</span>: <span class="string">'SALADICT_CLICK'</span>,</div><div class="line">      mouseX,</div><div class="line">      mouseY</div><div class="line">    &#125;, <span class="string">'*'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h1 id="拖动-iframe">
<a href="#拖动-iframe" class="headerlink" title="拖动 iframe"></a>拖动 iframe</h1>
<p>Saladict 另外一个需求就是拖动一个 iframe 查词面板。</p>
<h2 id="实现拖动的常识">
<a href="#实现拖动的常识" class="headerlink" title="实现拖动的常识"></a>实现拖动的常识</h2>
<p>实现拖动的一种常用方式就是检测 <code>mousedown</code>, <code>mousemove</code> 和 <code>mouseup</code>。分别对应开始、拖动、结束。然后计算偏移值应用到 <code>left</code> 和 <code>top</code> 上。</p>
<p>第一次实现很容易犯的一个错误就是监听元素本身的 <code>mousemove</code>。当然这个也可以正确计算出偏移，问题在于如果鼠标移动稍快超出了元素，拖动就卡掉了。所以应该监听全局的 <code>mousemove</code> 获取偏移值。</p>
<h2 id="iframe-特色的拖动">
<a href="#iframe-特色的拖动" class="headerlink" title="iframe 特色的拖动"></a>iframe 特色的拖动</h2>
<p>iframe 的拖动同理，只是因为发生在 iframe 里的事件不能传到上层，需要手动打包一下。</p>
<h2 id="iframe-部分">
<a href="#iframe-部分" class="headerlink" title="iframe 部分"></a>iframe 部分</h2>
<p>拖动由 iframe 里的某个元素触发，为了节省资源，在触发的时候才监听拖动和结束，并在结束的时候解绑。</p>
<p>在 iframe 里监听 <code>mousemove</code> 就是为了把偏移值传回上层，因为上层的 <code>mousemove</code> 事件到这里中断了。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="comment">// iframe.js</span></div><div class="line"><span class="keyword">var</span> baseMouseX, baseMouseY</div><div class="line"></div><div class="line">$dragArea.addEventListener(<span class="string">'mousedown'</span>, handleDragStart)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleDragStart</span> (<span class="params">evt</span>) </span>&#123;</div><div class="line">  baseMouseX = evt.clientX</div><div class="line">  baseMouseY = evt.clientY</div><div class="line"></div><div class="line">  <span class="built_in">window</span>.parent.postMessage(&#123;</div><div class="line">    <span class="attr">msg</span>: <span class="string">'SALADICT_DRAG_START'</span>,</div><div class="line">    <span class="attr">mouseX</span>: baseMouseX,</div><div class="line">    <span class="attr">mouseY</span>: baseMouseY</div><div class="line">  &#125;, <span class="string">'*'</span>)</div><div class="line"></div><div class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'mouseup'</span>, handleDragEnd)</div><div class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'mousemove'</span>, handleMousemove)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleMousemove</span> (<span class="params">evt</span>) </span>&#123;</div><div class="line">  <span class="built_in">window</span>.parent.postMessage(&#123;</div><div class="line">    <span class="attr">msg</span>: <span class="string">'SALADICT_DRAG_MOUSEMOVE'</span>,</div><div class="line">    <span class="attr">offsetX</span>: evt.clientX - baseMouseX,</div><div class="line">    <span class="attr">offsetY</span>: evt.clientY - baseMouseY</div><div class="line">  &#125;, <span class="string">'*'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleDragEnd</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">window</span>.parent.postMessage(&#123;</div><div class="line">    <span class="attr">msg</span>: <span class="string">'SALADICT_DRAG_END'</span></div><div class="line">  &#125;, <span class="string">'*'</span>)</div><div class="line"></div><div class="line">  <span class="built_in">document</span>.removeEventListener(<span class="string">'mouseup'</span>, handleDragEnd)</div><div class="line">  <span class="built_in">document</span>.removeEventListener(<span class="string">'mousemove'</span>, handleMousemove)</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="上层部分">
<a href="#上层部分" class="headerlink" title="上层部分"></a>上层部分</h2>
<p>主要增加了<code>handleFrameMousemove</code> 补上中断的偏移。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="comment">// parent.js</span></div><div class="line"><span class="keyword">var</span> pageMouseX, pageMouseY</div><div class="line"></div><div class="line"><span class="keyword">var</span> frameTop = <span class="number">0</span></div><div class="line"><span class="keyword">var</span> frameLeft = <span class="number">0</span></div><div class="line">$iframe.style.top = frameTop + <span class="string">'px'</span></div><div class="line">$iframe.style.left = frameLeft + <span class="string">'px'</span></div><div class="line"></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, evt =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> data = evt.data</div><div class="line"></div><div class="line">  <span class="keyword">switch</span> (data.msg) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'SALADICT_DRAG_START'</span>:</div><div class="line">      handleDragStart(data.mouseX, data.mouseY)</div><div class="line">      <span class="keyword">break</span></div><div class="line">    <span class="keyword">case</span> <span class="string">'SALADICT_DRAG_MOUSEMOVE'</span>:</div><div class="line">      handleFrameMousemove(data.offsetX, data.offsetY)</div><div class="line">      <span class="keyword">break</span></div><div class="line">    <span class="keyword">case</span> <span class="string">'SALADICT_DRAG_END'</span>:</div><div class="line">      handleDragEnd()</div><div class="line">      <span class="keyword">break</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleDragStart</span> (<span class="params">mouseX, mouseY</span>) </span>&#123;</div><div class="line">  <span class="comment">// 得出鼠标在上层的位置</span></div><div class="line">  pageMouseX = frameLeft + mouseX</div><div class="line">  pageMouseY = frameTop + mouseY</div><div class="line"></div><div class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'mouseup'</span>, handleDragEnd)</div><div class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'mousemove'</span>, handlePageMousemove)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleDragEnd</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">document</span>.removeEventListener(<span class="string">'mouseup'</span>, handleDragEnd)</div><div class="line">  <span class="built_in">document</span>.removeEventListener(<span class="string">'mousemove'</span>, handlePageMousemove)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleFrameMousemove</span> (<span class="params">offsetX, offsetY</span>) </span>&#123;</div><div class="line">  frameTop += offsetY</div><div class="line">  frameLeft += offsetX</div><div class="line">  $iframe.style.top = frameTop + <span class="string">'px'</span></div><div class="line">  $iframe.style.left = frameLeft + <span class="string">'px'</span></div><div class="line"></div><div class="line">  <span class="comment">// 更新鼠标在上层的位置，补上偏移</span></div><div class="line">  pageMouseX += offsetX</div><div class="line">  pageMouseY += offsetY</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlePageMousemove</span> (<span class="params">evt</span>) </span>&#123;</div><div class="line">  frameTop += evt.clientX - pageMouseX</div><div class="line">  frameLeft += evt.clientY - pageMouseY</div><div class="line">  $iframe.style.top = frameTop + <span class="string">'px'</span></div><div class="line">  $iframe.style.left = frameLeft + <span class="string">'px'</span></div><div class="line"></div><div class="line">  <span class="comment">// 新位置直接可以更新</span></div><div class="line">  pageMouseX = evt.clientX</div><div class="line">  pageMouseY = evt.clientY</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="例子">
<a href="#例子" class="headerlink" title="例子"></a>例子</h2>
<p>这里实现了一个例子，下面的正方形 iframe 是可以拖动的：</p>
<p></p>
<div class="drag-container">
<style type="text/css">
.drag-container {
    position: relative;
    height: 200px;
}

.drag-iframe {
    position: absolute;
    width: 200px;
    height: 200px;
}
</style><iframe class="drag-iframe" src="/images/post/drag-iframe.html" frameborder="0"></iframe>
<script type="text/javascript">
;
(function() {
    var pageMouseX, pageMouseY

    var $iframe = document.querySelector('.drag-iframe')
    var frameTop = 0
    var frameLeft = 0
    $iframe.style.top = frameTop + 'px'
    $iframe.style.left = frameLeft + 'px'

    window.addEventListener('message', evt => {
        const data = evt.data

        switch (data.msg) {
            case 'SALADICT_DRAG_START':
                handleDragStart(data.mouseX, data.mouseY)
                break
            case 'SALADICT_DRAG_MOUSEMOVE':
                handleFrameMousemove(data.offsetX, data.offsetY)
                break
            case 'SALADICT_DRAG_END':
                handleDragEnd()
                break
        }
    })

    function handleDragStart(mouseX, mouseY) {
        // 得出鼠标在上层的位置
        pageMouseX = frameLeft + mouseX
        pageMouseY = frameTop + mouseY

        document.addEventListener('mouseup', handleDragEnd)
        document.addEventListener('mousemove', handlePageMousemove)
    }

    function handleDragEnd() {
        document.removeEventListener('mouseup', handleDragEnd)
        document.removeEventListener('mousemove', handlePageMousemove)
    }

    function handleFrameMousemove(offsetX, offsetY) {
        frameTop += offsetY
        frameLeft += offsetX
        $iframe.style.top = frameTop + 'px'
        $iframe.style.left = frameLeft + 'px'

        // 更新鼠标在上层的位置，补上偏移
        pageMouseX += offsetX
        pageMouseY += offsetY
    }

    function handlePageMousemove(evt) {
        frameTop += evt.clientX - pageMouseX
        frameLeft += evt.clientY - pageMouseY
        $iframe.style.top = frameTop + 'px'
        $iframe.style.left = frameLeft + 'px'

        // 新位置直接可以更新
        pageMouseX = evt.clientX
        pageMouseY = evt.clientY
    }
})()
</script>
</div>
<p></p>
<h2 id="兼容性">
<a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2>
<p>可以看到，这里主要就是传鼠标的坐标偏移值。所以需要兼容老浏览器的话，用繁琐的旧方式与 iframe 交流就行。如果是同域的话也可以直接从 iframe 里获取偏移。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;定位-iframe&quot;&gt;
&lt;a href=&quot;#定位-iframe&quot; class=&quot;headerlink&quot; title=&quot;定位 iframe&quot;&gt;&lt;/a&gt;定位 iframe&lt;/h1&gt;
&lt;p&gt;在写一个划词翻译扩展 &lt;a href=&quot;http://www.crimx.com
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.crimx.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.crimx.com/tags/JavaScript/"/>
    
      <category term="iframe" scheme="https://blog.crimx.com/tags/iframe/"/>
    
      <category term="postMessage" scheme="https://blog.crimx.com/tags/postMessage/"/>
    
      <category term="Drag" scheme="https://blog.crimx.com/tags/Drag/"/>
    
      <category term="Extension" scheme="https://blog.crimx.com/tags/Extension/"/>
    
  </entry>
  
  <entry>
    <title>获取 DOM 里所有图片（包括背景和Iframe）</title>
    <link href="https://blog.crimx.com/2017/03/09/get-all-images-in-dom-including-background/"/>
    <id>https://blog.crimx.com/2017/03/09/get-all-images-in-dom-including-background/</id>
    <published>2017-03-08T16:00:00.000Z</published>
    <updated>2017-03-15T16:05:43.352Z</updated>
    
    <content type="html"><![CDATA[<p>在写浏览器扩展什么的时候可能会用上。</p>
<p>获取 DOM 里的图片主要是在这几个地方里面找: <code>&lt;img&gt;</code> 元素, <code>background-image</code> CSS 属性和 <code>&lt;iframe&gt;</code>。</p>
<h1 id="img">
<a href="#img" class="headerlink" title="img"></a>img</h1>
<p>如果只想获取 <code>&lt;img&gt;</code> 的图片，有两种方式:</p>
<p>直接获取所有 <code>img</code> 标签:</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getImgs</span> (<span class="params">doc</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(doc.getElementsByTagName(<span class="string">'img'</span>))</div><div class="line">    .map(<span class="function"><span class="params">img</span> =&gt;</span> (&#123;</div><div class="line">      <span class="attr">src</span>: img.currentSrc, <span class="comment">// 用 img.src 如果要本来的 src</span></div><div class="line">      width: img.naturalWidth,</div><div class="line">      <span class="attr">height</span>: img.naturalHeight</div><div class="line">    &#125;))</div><div class="line">&#125;</div><div class="line"></div><div class="line">getImgs(<span class="built_in">document</span>)</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>还可以用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/images" target="_blank">document.images</a>:</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getImgs</span> (<span class="params">doc</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(doc.images)</div><div class="line">    .map(<span class="function"><span class="params">img</span> =&gt;</span> (&#123;</div><div class="line">      <span class="attr">src</span>: img.currentSrc, <span class="comment">// img.src if you want the origin</span></div><div class="line">      width: img.naturalWidth,</div><div class="line">      <span class="attr">height</span>: img.naturalHeight</div><div class="line">    &#125;))</div><div class="line">&#125;</div><div class="line"></div><div class="line">getImgs(<span class="built_in">document</span>)</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h1 id="background-image">
<a href="#background-image" class="headerlink" title="background-image"></a>background-image</h1>
<p>获得背景图片需要查看所有 DOM 节点的 <code>background-image</code> 属性:</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBgImgs</span> (<span class="params">doc</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> srcChecker = <span class="regexp">/url\(\s*?['"]?\s*?(\S+?)\s*?["']?\s*?\)/i</span></div><div class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(</div><div class="line">    <span class="built_in">Array</span>.from(doc.querySelectorAll(<span class="string">'*'</span>))</div><div class="line">      .reduce(<span class="function">(<span class="params">collection, node</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">let</span> prop = <span class="built_in">window</span>.getComputedStyle(node, <span class="literal">null</span>)</div><div class="line">          .getPropertyValue(<span class="string">'background-image'</span>)</div><div class="line">        <span class="comment">// match `url(...)`</span></div><div class="line">        <span class="keyword">let</span> match = srcChecker.exec(prop)</div><div class="line">        <span class="keyword">if</span> (match) &#123;</div><div class="line">          collection.add(match[<span class="number">1</span>])</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> collection</div><div class="line">      &#125;, <span class="keyword">new</span> <span class="built_in">Set</span>())</div><div class="line">  )</div><div class="line">&#125;</div><div class="line"></div><div class="line">getBgImgs(<span class="built_in">document</span>)</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>背景图片不能直接得到尺寸信息，如果需要的话要加载一遍。因为搜集的图片很有可能已经在浏览器缓存里，所以加载过程应该很快。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span> (<span class="params">src, timeout = <span class="number">500</span></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> imgPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> img = <span class="keyword">new</span> Image()</div><div class="line">    img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      resolve(&#123;</div><div class="line">        <span class="attr">src</span>: src,</div><div class="line">        <span class="attr">width</span>: img.naturalWidth,</div><div class="line">        <span class="attr">height</span>: img.naturalHeight</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">    img.onerror = reject</div><div class="line">    img.src = src</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">var</span> timer = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    setTimeout(reject, timeout)</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.race([imgPromise, timer])</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImgAll</span> (<span class="params">imgList, timeout = <span class="number">500</span></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">Promise</span>.all(</div><div class="line">      imgList</div><div class="line">        .map(<span class="function"><span class="params">src</span> =&gt;</span> loadImg(src, timeout))</div><div class="line">        .map(<span class="function"><span class="params">p</span> =&gt;</span> p.catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="literal">false</span>))</div><div class="line">    ).then(<span class="function"><span class="params">results</span> =&gt;</span> resolve(results.filter(<span class="function"><span class="params">r</span> =&gt;</span> r)))</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">loadImgAll(getBgImgs(<span class="built_in">document</span>)).then(<span class="function"><span class="params">imgs</span> =&gt;</span> <span class="built_in">console</span>.log(imgs))</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h1 id="iframe">
<a href="#iframe" class="headerlink" title="iframe"></a>iframe</h1>
<p>只需要递归遍历 iframe 的 document</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">searchIframes</span> (<span class="params">doc</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> imgList = []</div><div class="line">  doc.querySelectorAll(<span class="string">'iframe'</span>)</div><div class="line">    .forEach(<span class="function"><span class="params">iframe</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        iframeDoc = iframe.contentDocument || iframe.contentWindow.document</div><div class="line">        imgList = imgList.concat(getImgs(iframeDoc) || []) <span class="comment">// or getBgImgs(iframeDoc)</span></div><div class="line">        imgList = imgList.concat(searchIframes(iframeDoc) || [])</div><div class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">        <span class="comment">// 直接忽略错误的 iframe (e.g. cross-origin)</span></div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  <span class="keyword">return</span> imgList</div><div class="line">&#125;</div><div class="line"></div><div class="line">searchIframes(<span class="built_in">document</span>)</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h1 id="整合一起">
<a href="#整合一起" class="headerlink" title="整合一起"></a>整合一起</h1>
<p>直接使用就行。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getImgAll</span> (<span class="params">doc</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    loadImgAll(<span class="built_in">Array</span>.from(searchDOM(doc)))</div><div class="line">      .then(resolve, reject)</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">searchDOM</span> (<span class="params">doc</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> srcChecker = <span class="regexp">/url\(\s*?['"]?\s*?(\S+?)\s*?["']?\s*?\)/i</span></div><div class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(doc.querySelectorAll(<span class="string">'*'</span>))</div><div class="line">      .reduce(<span class="function">(<span class="params">collection, node</span>) =&gt;</span> &#123;</div><div class="line">        <span class="comment">// bg src</span></div><div class="line">        <span class="keyword">let</span> prop = <span class="built_in">window</span>.getComputedStyle(node, <span class="literal">null</span>)</div><div class="line">          .getPropertyValue(<span class="string">'background-image'</span>)</div><div class="line">        <span class="comment">// match `url(...)`</span></div><div class="line">        <span class="keyword">let</span> match = srcChecker.exec(prop)</div><div class="line">        <span class="keyword">if</span> (match) &#123;</div><div class="line">          collection.add(match[<span class="number">1</span>])</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="regexp">/^img$/i</span>.test(node.tagName)) &#123;</div><div class="line">          <span class="comment">// src from img tag</span></div><div class="line">          collection.add(node.src)</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/^frame$/i</span>.test(node.tagName)) &#123;</div><div class="line">          <span class="comment">// iframe</span></div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">            searchDOM(node.contentDocument || node.contentWindow.document)</div><div class="line">              .forEach(<span class="function"><span class="params">img</span> =&gt;</span> &#123;</div><div class="line">                <span class="keyword">if</span> (img) &#123; collection.add(img) &#125;</div><div class="line">              &#125;)</div><div class="line">          &#125; <span class="keyword">catch</span> (e) &#123;&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> collection</div><div class="line">      &#125;, <span class="keyword">new</span> <span class="built_in">Set</span>())</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">loadImg</span> (<span class="params">src, timeout = <span class="number">500</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> imgPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">let</span> img = <span class="keyword">new</span> Image()</div><div class="line">      img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        resolve(&#123;</div><div class="line">          <span class="attr">src</span>: src,</div><div class="line">          <span class="attr">width</span>: img.naturalWidth,</div><div class="line">          <span class="attr">height</span>: img.naturalHeight</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">      img.onerror = reject</div><div class="line">      img.src = src</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">var</span> timer = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">      setTimeout(reject, timeout)</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.race([imgPromise, timer])</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">loadImgAll</span> (<span class="params">imgList, timeout = <span class="number">500</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">      <span class="built_in">Promise</span>.all(</div><div class="line">        imgList</div><div class="line">          .map(<span class="function"><span class="params">src</span> =&gt;</span> loadImg(src, timeout))</div><div class="line">          .map(<span class="function"><span class="params">p</span> =&gt;</span> p.catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="literal">false</span>))</div><div class="line">      ).then(<span class="function"><span class="params">results</span> =&gt;</span> resolve(results.filter(<span class="function"><span class="params">r</span> =&gt;</span> r)))</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">getImgAll(<span class="built_in">document</span>).then(<span class="function"><span class="params">list</span> =&gt;</span> <span class="built_in">console</span>.log(list))</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>如果是开发 Chrome 插件则不受跨域影响，可以直接使用 <a href="https://github.com/nodeca/probe-image-size" target="_blank">probe-image-size</a>，它支持 timeout 参数，就不需要自己写 timer 了。我在写一个 <a href="https://github.com/crimx/crx-weitweet" target="_blank">Chrome 扩展</a>时用上了，很方便。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在写浏览器扩展什么的时候可能会用上。&lt;/p&gt;
&lt;p&gt;获取 DOM 里的图片主要是在这几个地方里面找: &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 元素, &lt;code&gt;background-image&lt;/code&gt; CSS 属性和 &lt;code&gt;&amp;lt;iframe&amp;gt
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.crimx.com/categories/JavaScript/"/>
    
    
      <category term="Recommended" scheme="https://blog.crimx.com/tags/Recommended/"/>
    
      <category term="JavaScript" scheme="https://blog.crimx.com/tags/JavaScript/"/>
    
      <category term="Image" scheme="https://blog.crimx.com/tags/Image/"/>
    
      <category term="DOM" scheme="https://blog.crimx.com/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>Get All Images in DOM (Including Background)</title>
    <link href="https://blog.crimx.com/2017/03/09/get-all-images-in-dom-including-background-en/"/>
    <id>https://blog.crimx.com/2017/03/09/get-all-images-in-dom-including-background-en/</id>
    <published>2017-03-08T16:00:00.000Z</published>
    <updated>2017-03-15T16:05:31.891Z</updated>
    
    <content type="html"><![CDATA[<p>Quite useful if you are writing an browser extension or something.</p>
<p>To get all the images in DOM there are actually three places we are going to look at: <code>&lt;img&gt;</code> element, <code>background-image</code> CSS property and, <code>&lt;iframe&gt;</code>. Yes, every iframe hides a magical kingdom.</p>
<h1 id="img">
<a href="#img" class="headerlink" title="img"></a>img</h1>
<p>If you only want to get images in <code>&lt;img&gt;</code>, two options for you to choose:</p>
<p>You can either search the DOM for <code>img</code> tag:</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getImgs</span> (<span class="params">doc</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(doc.getElementsByTagName(<span class="string">'img'</span>))</div><div class="line">    .map(<span class="function"><span class="params">img</span> =&gt;</span> (&#123;</div><div class="line">      <span class="attr">src</span>: img.currentSrc, <span class="comment">// img.src if you want the origin</span></div><div class="line">      width: img.naturalWidth,</div><div class="line">      <span class="attr">height</span>: img.naturalHeight</div><div class="line">    &#125;))</div><div class="line">&#125;</div><div class="line"></div><div class="line">getImgs(<span class="built_in">document</span>)</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>Or just use <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/images" target="_blank">document.images</a>:</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getImgs</span> (<span class="params">doc</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(doc.images)</div><div class="line">    .map(<span class="function"><span class="params">img</span> =&gt;</span> (&#123;</div><div class="line">      <span class="attr">src</span>: img.currentSrc, <span class="comment">// img.src if you want the origin</span></div><div class="line">      width: img.naturalWidth,</div><div class="line">      <span class="attr">height</span>: img.naturalHeight</div><div class="line">    &#125;))</div><div class="line">&#125;</div><div class="line"></div><div class="line">getImgs(<span class="built_in">document</span>)</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h1 id="background-image">
<a href="#background-image" class="headerlink" title="background-image"></a>background-image</h1>
<p>For <code>background-image</code>, we need to check every node in DOM:</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBgImgs</span> (<span class="params">doc</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> srcChecker = <span class="regexp">/url\(\s*?['"]?\s*?(\S+?)\s*?["']?\s*?\)/i</span></div><div class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(</div><div class="line">    <span class="built_in">Array</span>.from(doc.querySelectorAll(<span class="string">'*'</span>))</div><div class="line">      .reduce(<span class="function">(<span class="params">collection, node</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">let</span> prop = <span class="built_in">window</span>.getComputedStyle(node, <span class="literal">null</span>)</div><div class="line">          .getPropertyValue(<span class="string">'background-image'</span>)</div><div class="line">        <span class="comment">// match `url(...)`</span></div><div class="line">        <span class="keyword">let</span> match = srcChecker.exec(prop)</div><div class="line">        <span class="keyword">if</span> (match) &#123;</div><div class="line">          collection.add(match[<span class="number">1</span>])</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> collection</div><div class="line">      &#125;, <span class="keyword">new</span> <span class="built_in">Set</span>())</div><div class="line">  )</div><div class="line">&#125;</div><div class="line"></div><div class="line">getBgImgs(<span class="built_in">document</span>)</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>We can&#39;t simply get the width and height of a background image. If you need them, you have to load it.</p>
<p>Since the images you get in DOM are most likely already in the browser cache, the loading process should be fairly quick.</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span> (<span class="params">src, timeout = <span class="number">500</span></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> imgPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> img = <span class="keyword">new</span> Image()</div><div class="line">    img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      resolve(&#123;</div><div class="line">        <span class="attr">src</span>: src,</div><div class="line">        <span class="attr">width</span>: img.naturalWidth,</div><div class="line">        <span class="attr">height</span>: img.naturalHeight</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">    img.onerror = reject</div><div class="line">    img.src = src</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">var</span> timer = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    setTimeout(reject, timeout)</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.race([imgPromise, timer])</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImgAll</span> (<span class="params">imgList, timeout = <span class="number">500</span></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">Promise</span>.all(</div><div class="line">      imgList</div><div class="line">        .map(<span class="function"><span class="params">src</span> =&gt;</span> loadImg(src, timeout))</div><div class="line">        .map(<span class="function"><span class="params">p</span> =&gt;</span> p.catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="literal">false</span>))</div><div class="line">    ).then(<span class="function"><span class="params">results</span> =&gt;</span> resolve(results.filter(<span class="function"><span class="params">r</span> =&gt;</span> r)))</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">loadImgAll(getBgImgs(<span class="built_in">document</span>)).then(<span class="function"><span class="params">imgs</span> =&gt;</span> <span class="built_in">console</span>.log(imgs))</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h1 id="iframe">
<a href="#iframe" class="headerlink" title="iframe"></a>iframe</h1>
<p>Just recursively search in all iframes</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">searchIframes</span> (<span class="params">doc</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> imgList = []</div><div class="line">  doc.querySelectorAll(<span class="string">'iframe'</span>)</div><div class="line">    .forEach(<span class="function"><span class="params">iframe</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        iframeDoc = iframe.contentDocument || iframe.contentWindow.document</div><div class="line">        imgList = imgList.concat(getImgs(iframeDoc) || []) <span class="comment">// or getBgImgs(iframeDoc)</span></div><div class="line">        imgList = imgList.concat(searchIframes(iframeDoc) || [])</div><div class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">        <span class="comment">// simply ignore errors (e.g. cross-origin)</span></div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  <span class="keyword">return</span> imgList</div><div class="line">&#125;</div><div class="line"></div><div class="line">searchIframes(<span class="built_in">document</span>)</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h1 id="Together">
<a href="#Together" class="headerlink" title="Together"></a>Together</h1>
<p>Can be used out of the box. It was made when I was writing a <a href="https://github.com/crimx/crx-weitweet" target="_blank">Chrome Extension</a>.</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getImgAll</span> (<span class="params">doc</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    loadImgAll(<span class="built_in">Array</span>.from(searchDOM(doc)))</div><div class="line">      .then(resolve, reject)</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">searchDOM</span> (<span class="params">doc</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> srcChecker = <span class="regexp">/url\(\s*?['"]?\s*?(\S+?)\s*?["']?\s*?\)/i</span></div><div class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(doc.querySelectorAll(<span class="string">'*'</span>))</div><div class="line">      .reduce(<span class="function">(<span class="params">collection, node</span>) =&gt;</span> &#123;</div><div class="line">        <span class="comment">// bg src</span></div><div class="line">        <span class="keyword">let</span> prop = <span class="built_in">window</span>.getComputedStyle(node, <span class="literal">null</span>)</div><div class="line">          .getPropertyValue(<span class="string">'background-image'</span>)</div><div class="line">        <span class="comment">// match `url(...)`</span></div><div class="line">        <span class="keyword">let</span> match = srcChecker.exec(prop)</div><div class="line">        <span class="keyword">if</span> (match) &#123;</div><div class="line">          collection.add(match[<span class="number">1</span>])</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="regexp">/^img$/i</span>.test(node.tagName)) &#123;</div><div class="line">          <span class="comment">// src from img tag</span></div><div class="line">          collection.add(node.src)</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/^frame$/i</span>.test(node.tagName)) &#123;</div><div class="line">          <span class="comment">// iframe</span></div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">            searchDOM(node.contentDocument || node.contentWindow.document)</div><div class="line">              .forEach(<span class="function"><span class="params">img</span> =&gt;</span> &#123;</div><div class="line">                <span class="keyword">if</span> (img) &#123; collection.add(img) &#125;</div><div class="line">              &#125;)</div><div class="line">          &#125; <span class="keyword">catch</span> (e) &#123;&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> collection</div><div class="line">      &#125;, <span class="keyword">new</span> <span class="built_in">Set</span>())</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">loadImg</span> (<span class="params">src, timeout = <span class="number">500</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> imgPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">let</span> img = <span class="keyword">new</span> Image()</div><div class="line">      img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        resolve(&#123;</div><div class="line">          <span class="attr">src</span>: src,</div><div class="line">          <span class="attr">width</span>: img.naturalWidth,</div><div class="line">          <span class="attr">height</span>: img.naturalHeight</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">      img.onerror = reject</div><div class="line">      img.src = src</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">var</span> timer = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">      setTimeout(reject, timeout)</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.race([imgPromise, timer])</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">loadImgAll</span> (<span class="params">imgList, timeout = <span class="number">500</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">      <span class="built_in">Promise</span>.all(</div><div class="line">        imgList</div><div class="line">          .map(<span class="function"><span class="params">src</span> =&gt;</span> loadImg(src, timeout))</div><div class="line">          .map(<span class="function"><span class="params">p</span> =&gt;</span> p.catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="literal">false</span>))</div><div class="line">      ).then(<span class="function"><span class="params">results</span> =&gt;</span> resolve(results.filter(<span class="function"><span class="params">r</span> =&gt;</span> r)))</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">getImgAll(<span class="built_in">document</span>).then(<span class="function"><span class="params">list</span> =&gt;</span> <span class="built_in">console</span>.log(list))</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>[EOF]</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Quite useful if you are writing an browser extension or something.&lt;/p&gt;
&lt;p&gt;To get all the images in DOM there are actually three places we
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.crimx.com/categories/JavaScript/"/>
    
    
      <category term="Recommended" scheme="https://blog.crimx.com/tags/Recommended/"/>
    
      <category term="JavaScript" scheme="https://blog.crimx.com/tags/JavaScript/"/>
    
      <category term="Image" scheme="https://blog.crimx.com/tags/Image/"/>
    
      <category term="DOM" scheme="https://blog.crimx.com/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>倒腾 Vue Webpack2 单元测试</title>
    <link href="https://blog.crimx.com/2017/02/19/vue-webpack2-unit-testing/"/>
    <id>https://blog.crimx.com/2017/02/19/vue-webpack2-unit-testing/</id>
    <published>2017-02-18T16:00:00.000Z</published>
    <updated>2017-02-19T12:50:52.100Z</updated>
    
    <content type="html"><![CDATA[<p><code>vue-cli</code> 提供的官方模板确实好用。但一直用下来手贱毛病又犯了，像穿了别人的内衣，总感觉不舒服。</p>
<p>所以有机会就瞎倒腾了一遍，总算把各个流程摸了一把。这里分享一下配置带覆盖率的单元测试。</p>
<h2 id="文件结构">
<a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2>
<p>基本的文件结构。</p>
<p></p>
<figure class="highlight plain">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre>
</td>
<td class="code">
<pre><div class="line">├─src</div><div class="line">│  ├─assets</div><div class="line">│  ├─components</div><div class="line">│  ├─app.vue</div><div class="line">│  └─main.js</div><div class="line">├─test</div><div class="line">│   └─unit</div><div class="line">│       ├─coverage</div><div class="line">│       ├─specs</div><div class="line">│       ├─index.js</div><div class="line">│       └─karma.conf.js</div><div class="line">├─.babelirc</div><div class="line">├─webpack.conf.js</div><div class="line">└─package.json</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="依赖">
<a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2>
<p>根据需要增删</p>
<p></p>
<figure class="highlight bash">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre>
</td>
<td class="code">
<pre><div class="line">yarn add -D \</div><div class="line">cross-env \</div><div class="line"><span class="comment"># webpack</span></div><div class="line">webpack \</div><div class="line">webpack-merge \</div><div class="line">vue-loader \</div><div class="line"><span class="comment"># babel</span></div><div class="line">babel-core \</div><div class="line">babel-loader \</div><div class="line">babel-plugin-transform-runtime \</div><div class="line">babel-preset-es2015 \</div><div class="line">babel-register \</div><div class="line">babel-plugin-istanbul \</div><div class="line"><span class="comment"># karma</span></div><div class="line">karma \</div><div class="line">karma-coverage \</div><div class="line">karma-phantomjs-launcher \</div><div class="line">karma-sourcemap-loader \</div><div class="line">karma-spec-reporter \</div><div class="line">karma-webpack \</div><div class="line">mocha \</div><div class="line">karma-mocha \</div><div class="line">sinon-chai \</div><div class="line">karma-sinon-chai \</div><div class="line">chai \</div><div class="line">sinon \</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="入口">
<a href="#入口" class="headerlink" title="入口"></a>入口</h2>
<p>先从 <code>package.json</code> 开始。跟官方的一致。设置 <code>BABEL_ENV</code> 可以在测试的时候才让 Babel 引入 <code>istanbul</code> 计算覆盖率。</p>
<p></p>
<figure class="highlight json">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre>
</td>
<td class="code">
<pre><div class="line">&#123;</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"unit"</span>: <span class="string">"cross-env BABEL_ENV=test karma start test/unit/karma.conf.js --single-run"</span>,</div><div class="line">    <span class="attr">"test"</span>: <span class="string">"npm run unit"</span>,</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="配置-Babel">
<a href="#配置-Babel" class="headerlink" title="配置 Babel"></a>配置 Babel</h2>
<p>在 <code>.babelirc</code> 中：</p>
<p></p>
<figure class="highlight json">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre>
</td>
<td class="code">
<pre><div class="line">&#123;</div><div class="line">  <span class="attr">"presets"</span>: [<span class="string">"es2015"</span>],</div><div class="line">  <span class="attr">"plugins"</span>: [<span class="string">"transform-runtime"</span>],</div><div class="line">  <span class="attr">"comments"</span>: <span class="literal">false</span>,</div><div class="line">  <span class="attr">"env"</span>: &#123;</div><div class="line">    <span class="attr">"test"</span>: &#123;</div><div class="line">      <span class="attr">"plugins"</span>: [ <span class="string">"istanbul"</span> ]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>按需设置，写 Chrome Extension 的话用 <code>es2016</code> 就行。</p>
<p>Babel 的 istanbul 插件是个很聪明的做法。</p>
<h2 id="Loader-配置">
<a href="#Loader-配置" class="headerlink" title="Loader 配置"></a>Loader 配置</h2>
<p>从 Vue Loader 的文档可以看到，不需要额外配置，它非常贴心自动识别 Babel Loader。</p>
<p>如果还测试 js 文件那么给源文件夹下的 js 文件配置 Babel Loader 就行。以 <code>src</code> 为例：</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre>
</td>
<td class="code">
<pre><div class="line">&#123;</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">rules</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</div><div class="line">        <span class="attr">loader</span>: <span class="string">'vue-loader'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">        <span class="attr">loader</span>: <span class="string">'babel-loader'</span>,</div><div class="line">        <span class="attr">include</span>: [</div><div class="line">          path.resolve(__dirname, <span class="string">'../src'</span>)</div><div class="line">        ],</div><div class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="Karma-配置">
<a href="#Karma-配置" class="headerlink" title="Karma 配置"></a>Karma 配置</h2>
<p>为 webpack 设置环境</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="comment">// karma.conf.js</span></div><div class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</div><div class="line"><span class="keyword">let</span> webpackConfig = merge(<span class="built_in">require</span>(<span class="string">'../../webpack.conf'</span>), &#123;</div><div class="line">  <span class="attr">devtool</span>: <span class="string">'#inline-source-map'</span>,</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</div><div class="line">      <span class="string">'process.env'</span>: <span class="string">'"testing"'</span></div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// no need for app entry during tests</span></div><div class="line"><span class="keyword">delete</span> webpackConfig.entry</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>接着输出 karma 配置，基本沿用官方的配置。注意不同的浏览器需要安装不同的 karma 插件。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="comment">// karma.conf.js</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</div><div class="line">  config.set(&#123;</div><div class="line">    <span class="comment">// to run in additional browsers:</span></div><div class="line">    <span class="comment">// 1. install corresponding karma launcher</span></div><div class="line">    <span class="comment">//    http://karma-runner.github.io/0.13/config/browsers.html</span></div><div class="line">    <span class="comment">// 2. add it to the `browsers` array below.</span></div><div class="line">    browsers: [<span class="string">'Chrome'</span>],</div><div class="line">    <span class="attr">frameworks</span>: [<span class="string">'mocha'</span>, <span class="string">'sinon-chai'</span>],</div><div class="line">    <span class="attr">reporters</span>: [<span class="string">'spec'</span>, <span class="string">'coverage'</span>],</div><div class="line">    <span class="attr">files</span>: [<span class="string">'./index.js'</span>],</div><div class="line">    <span class="attr">preprocessors</span>: &#123;</div><div class="line">      <span class="string">'./index.js'</span>: [<span class="string">'webpack'</span>, <span class="string">'sourcemap'</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">webpack</span>: webpackConfig,</div><div class="line">    <span class="attr">webpackMiddleware</span>: &#123;</div><div class="line">      <span class="attr">noInfo</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">coverageReporter</span>: &#123;</div><div class="line">      <span class="attr">dir</span>: <span class="string">'./coverage'</span>,</div><div class="line">      <span class="attr">reporters</span>: [</div><div class="line">        &#123; <span class="attr">type</span>: <span class="string">'lcov'</span>, <span class="attr">subdir</span>: <span class="string">'.'</span> &#125;,</div><div class="line">        &#123; <span class="attr">type</span>: <span class="string">'text-summary'</span> &#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="引入所有组件">
<a href="#引入所有组件" class="headerlink" title="引入所有组件"></a>引入所有组件</h2>
<p>在 <code>test/unit/index.js</code> 里，这是官方的配置：</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="comment">// require all test files (files that ends with .spec.js)</span></div><div class="line"><span class="keyword">const</span> testsContext = <span class="built_in">require</span>.context(<span class="string">'./specs'</span>, <span class="literal">true</span>, /\.spec$/)</div><div class="line">testsContext.keys().forEach(testsContext)</div><div class="line"></div><div class="line"><span class="comment">// require all src files except main.js for coverage.</span></div><div class="line"><span class="comment">// you can also change this to match only the subset of files that</span></div><div class="line"><span class="comment">// you want coverage for.</span></div><div class="line"><span class="keyword">const</span> srcContext = <span class="built_in">require</span>.context(<span class="string">'src'</span>, <span class="literal">true</span>, /^\.\/(?!main(\.js)?$)/)</div><div class="line">srcContext.keys().forEach(srcContext)</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>因为之前配置 loader 时 <code>src</code> 文件夹下的 js 才会被收集计算覆盖率，所以可以放心 require 。</p>
<p>第二段 require 是为了所有源码一起算覆盖率。可以看到官方配置只排除了 <code>src</code> 目录里的 <code>main.js</code>，如果是多入口可以用 <code>/^(?!.*\/main(\.js)?$)/i</code> 排除所有的 <code>main.js</code> 文件。</p>
<h2 id="开始测试">
<a href="#开始测试" class="headerlink" title="开始测试"></a>开始测试</h2>
<p>这基本上就是所有的配置了。其它的设置应该都是围绕插件本身，就不赘述。</p>
<h2 id="Babeless-配置">
<a href="#Babeless-配置" class="headerlink" title="Babeless 配置"></a>Babeless 配置</h2>
<p>如果不需要 Babel 可以用 <code>istanbul-instrumenter-loader</code> 收集覆盖率。</p>
<p>js 文件的配置同 Babel。 Vue 文件需要在 <code>options.loaders</code> 选项里为 <code>js</code> 补上：</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre>
</td>
<td class="code">
<pre><div class="line">&#123;</div><div class="line">  <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</div><div class="line">  <span class="attr">loader</span>: <span class="string">'vue-loader'</span>,</div><div class="line">  <span class="attr">options</span>: &#123;</div><div class="line">    <span class="attr">loaders</span>: &#123;</div><div class="line">      <span class="string">'js'</span>: <span class="string">'istanbul-instrumenter-loader'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>【完】</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;vue-cli&lt;/code&gt; 提供的官方模板确实好用。但一直用下来手贱毛病又犯了，像穿了别人的内衣，总感觉不舒服。&lt;/p&gt;
&lt;p&gt;所以有机会就瞎倒腾了一遍，总算把各个流程摸了一把。这里分享一下配置带覆盖率的单元测试。&lt;/p&gt;
&lt;h2 id=&quot;文件结构&quot;&gt;
&lt;a 
    
    </summary>
    
      <category term="Tools" scheme="https://blog.crimx.com/categories/Tools/"/>
    
    
      <category term="JavaScript" scheme="https://blog.crimx.com/tags/JavaScript/"/>
    
      <category term="Vue" scheme="https://blog.crimx.com/tags/Vue/"/>
    
      <category term="Webpack" scheme="https://blog.crimx.com/tags/Webpack/"/>
    
      <category term="Testing" scheme="https://blog.crimx.com/tags/Testing/"/>
    
  </entry>
  
  <entry>
    <title>深入 ES2015 默认参数</title>
    <link href="https://blog.crimx.com/2017/01/22/es2015-default-parameters/"/>
    <id>https://blog.crimx.com/2017/01/22/es2015-default-parameters/</id>
    <published>2017-01-21T16:00:00.000Z</published>
    <updated>2017-01-22T13:32:35.639Z</updated>
    
    <content type="html"><![CDATA[<p>ES2015 为函数加入了方便的默认参数语法。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">x = <span class="number">1</span></span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>很方便是吧，但每件新东西总有坑。</p>
<h2 id="TDZ">
<a href="#TDZ" class="headerlink" title="TDZ"></a>TDZ</h2>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">var</span> x = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">x = x</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">foo() <span class="comment">// ReferenceError: x is not defined</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>这个是最早见的坑，已经有不少文章指出了是个 TDZ (Temporal Dead Zone) 的问题。我找了大量资料，大部分文章基本是参考自<a href="http://dmitrysoshnikov.com/ecmascript/es6-notes-default-values-of-parameters/comment-page-1/#tdz-temporal-dead-zone-for-parameters" target="_blank">这篇</a>，它指出了 TDZ 但没有说明为什么。唯有<a href="http://code.wileam.com/default-value-n-params-env/" target="_blank">这篇文章</a>引用了规范，但论据和结论牛头对了马嘴。</p>
<p>本着强迫症的精神，亲自去啃了一遍规范，现在把思路整理出来。其它关于 JavaScript 的文章可以看这里<a href="https://blog.crimx.com/tags/Understanding-JavaScript/" target="_blank">https://blog.crimx.com/tags/Understanding-JavaScript/</a>。</p>
<h3 id="TDZ-基本">
<a href="#TDZ-基本" class="headerlink" title="TDZ 基本"></a>TDZ 基本</h3>
<p>先简单说一下什么是 TDZ。一般最开始见到这个词都是跟 <code>let</code> 和 <code>const</code> 挂钩。</p>
<p>两者不会像 <code>var</code> 一样抬升，但它们又会占领了所在的作用域的<em>整个部分</em>，于是这个作用域在 <code>let</code> 和 <code>const</code> 声明之前的部分就会有一个<em>死区</em>，AKA 占着茅坑不拉屎。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">var</span> x = <span class="number">1</span></div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> x = <span class="number">2</span> <span class="comment">// 这是 OK 的，这个作用域只有一个 x</span></div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">var</span> x = <span class="number">1</span></div><div class="line"></div><div class="line">&#123;</div><div class="line">  x = <span class="number">4</span> <span class="comment">// ReferenceError 茅坑已被占</span></div><div class="line">  <span class="keyword">let</span> x = <span class="number">2</span></div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">var</span> x = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> x = <span class="number">3</span> <span class="comment">// SyntaxError 不能重复声明</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>对作用域不太熟悉的可以参考一下我以前的一些<a href="https://blog.crimx.com/tags/Scope/" target="_blank"><strong>笔记</strong></a>。</p>
<h3 id="默认参数-TDZ">
<a href="#默认参数-TDZ" class="headerlink" title="默认参数 TDZ"></a>默认参数 TDZ</h3>
<p>在规范 <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-functiondeclarationinstantiation" target="_blank">9.2.12 FunctionDeclarationInstantiation(func, argumentsList)</a> 的步骤 27.c.i.2 可以看到：</p>
<blockquote>
<p>Let status be envRec.CreateMutableBinding(n).</p>
</blockquote>
<p>这是没有默认参数的情况，也就是 ES5 的做法。这个 mutable binding 顾名思义，就是 <code>var</code> 对应的绑定。</p>
<p>在步骤 28.f.i.5.a 就说明了有默认参数怎么算：</p>
<blockquote>
<p>Let initialValue be envRec.GetBindingValue(n, false).</p>
</blockquote>
<p>这个 <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-module-environment-records-getbindingvalue-n-s" target="_blank">GetBindingValue</a> 就是占茅坑的怂恿者：</p>
<blockquote>
<p>The concrete Environment Record method GetBindingValue for module Environment Records returns the value of its bound identifier whose name is the value of the argument N. However, if the binding is an indirect binding the value of the target binding is
returned. <em>If the binding exists but is uninitialized a ReferenceError is thrown</em>, regardless of the value of S.</p>
</blockquote>
<p>所以带默认参数的时候才会有 TDZ 。</p>
<h3 id="x-x">
<a href="#x-x" class="headerlink" title="x = x"></a>x = x</h3>
<p>最后参数里的 <code>x = x</code> 就跟 <code>let x = x</code> 一样处理。</p>
<p>先遇到左边的 <code>x</code> ，开始占茅坑。然后遇到等号，因为等号是右往左运算的，所以就继续看右边，发现了 <code>x</code> 。这是一个读取的行为，但这个作用域的 <code>x</code> 茅坑已经被左边的 <code>x</code> 占了，而且伦家还没完事呢。所以右边的 <code>x</code> 就踩了死区，引发 Reference Error 。</p>
<h2 id="中间作用域">
<a href="#中间作用域" class="headerlink" title="中间作用域"></a>中间作用域</h2>
<p>眼光锐利的朋友很可能发现了，我在前一步提到了作用域被占了，那么这个作用域是什么作用域？</p>
<p>这是一个中间作用域，介于函数所在的作用域和函数内部的作用域。</p>
<p><a href="http://www.ecma-international.org/ecma-262/6.0/#sec-functiondeclarationinstantiation" target="_blank">9.2.12 FunctionDeclarationInstantiation(func, argumentsList)</a></p>
<blockquote>
<p><strong>NOTE 1</strong> When an execution context is established for evaluating an ECMAScript function a new function Environment Record is created and bindings for each formal parameter are instantiated in that Environment Record. Each declaration in
the function body is also instantiated. If the function’s formal parameters do not include any default value initializers then the body declarations are instantiated in the same Environment Record as the parameters. <em>If default value parameter initializers exist, a second Environment Record is created for the body declarations.</em>Formal parameters and functions are initialized as part of FunctionDeclarationInstantiation. All other bindings are initialized during evaluation of the function body.</p>
</blockquote>
<h3 id="为什么">
<a href="#为什么" class="headerlink" title="为什么"></a>为什么</h3>
<p>为什么需要夹个新作用域？这主要是为了防止默认参数里面的表达式会被函数内部的变量污染。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">var</span> x = <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">y = (</span>) =&gt; <span class="title">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> x = <span class="literal">false</span></div><div class="line">  <span class="keyword">return</span> y()</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo() <span class="comment">// true</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>如果默认参数没有中间作用域，函数 <code>() =&gt; x</code> 就会跟 <code>var x = false</code> 共用一个作用域，<code>x</code> 就会被 shadow 掉，<code>foo()</code> 就会返回 <code>false</code> ，函数里面的变量泄露了，明显违背默认参数的本意。</p>
<p>这个 bug 可以在 Firefox 51 之前的版本观察到（目前稳定版是 50.1.0）。</p>
<h2 id="解构参数">
<a href="#解构参数" class="headerlink" title="解构参数"></a>解构参数</h2>
<p>解构 Destructured 也是相当好用的新家庭成员，还可以跟默认参数结合使用。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">&#123;x = <span class="number">1</span>, y&#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> [x, y]</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(&#123; <span class="attr">y</span>: <span class="number">5</span> &#125;) <span class="comment">// [1, 5]</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">let</span> [x = <span class="number">1</span>, y] = []   <span class="comment">// x = 1, y = undefined</span></div><div class="line">;[x = <span class="number">1</span>, y] = [<span class="number">3</span>, <span class="number">5</span>]  <span class="comment">// x = 3, y = 5</span></div><div class="line">;(&#123;<span class="attr">text</span>: x = <span class="number">1</span>&#125; = &#123;&#125;) <span class="comment">// x = 1</span></div><div class="line">;(&#123;<span class="attr">text</span>: x = <span class="number">1</span>&#125; = &#123; <span class="attr">text</span>: <span class="number">2</span> &#125;) <span class="comment">// x = 2</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>这里的 <code>{}</code> 必须用括号括起来让它解释为表达式，不然会成为块声明。</p>
<h2 id="最后">
<a href="#最后" class="headerlink" title="最后"></a>最后</h2>
<p>这是我第一次真正在规范里挖东西，一般都是 MDN 就足够了，潜意识里认为规范不是给人看的。但强迫症发作一次又一次让我对潜意识打脸，像之前跑去<a href="https://blog.crimx.com/2015/03/29/javascript-hoist-under-the-hood/" target="_blank">研究 V8 源码</a>，都让我越来越体会到一个道理，也就是文章前面的 tagline ：</p>
<blockquote>
<p>“When you grow up you tend to get told that the world is the way it is and your life is just to live your life inside the world. Try not to bash into the walls too much. Try to have a nice family life, have fun, save a little money. That&#39;s a very
limited life. Life can be much broader once you discover one simple fact: Everything around you that you call life was made up by people that were no smarter than you. And you can change it, you can influence it… Once you learn that, you&#39;ll never
be the same again.”</p>
</blockquote>
<p></p>
<p><iframe width="560" height="315" style="width:100%" src="" data-type="youtube" data-src="//www.youtube.com/embed/UvEiSa6_EPA" frameborder="0" allowfullscreen></iframe></p>
<p></p>
<p>每一样人造的东西只要愿意花时间都是可理解的，根本没有什么可害怕的，心存敬仰就好。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ES2015 为函数加入了方便的默认参数语法。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;gutter&quot;&gt;
&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.crimx.com/categories/JavaScript/"/>
    
    
      <category term="Understanding JavaScript" scheme="https://blog.crimx.com/tags/Understanding-JavaScript/"/>
    
      <category term="Recommended" scheme="https://blog.crimx.com/tags/Recommended/"/>
    
      <category term="Function" scheme="https://blog.crimx.com/tags/Function/"/>
    
      <category term="TDZ" scheme="https://blog.crimx.com/tags/TDZ/"/>
    
      <category term="Parameters" scheme="https://blog.crimx.com/tags/Parameters/"/>
    
      <category term="Arguments" scheme="https://blog.crimx.com/tags/Arguments/"/>
    
  </entry>
  
  <entry>
    <title>新年新博客！</title>
    <link href="https://blog.crimx.com/2017/01/01/new-blog-released/"/>
    <id>https://blog.crimx.com/2017/01/01/new-blog-released/</id>
    <published>2016-12-31T16:00:00.000Z</published>
    <updated>2016-12-31T18:50:16.914Z</updated>
    
    <content type="html"><![CDATA[<p>新博客终于写完啦！给心血们搬了个漂漂亮亮的新家。</p>
<p><a href="/about">关于这个博客</a> <span class="github-emoji" title=":point_left:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f448.png?v7">&#x1f448;</span>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新博客终于写完啦！给心血们搬了个漂漂亮亮的新家。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/about&quot;&gt;关于这个博客&lt;/a&gt; &lt;span class=&quot;github-emoji&quot; title=&quot;:point_left:&quot; data-src=&quot;https://assets-cdn.
    
    </summary>
    
      <category term="News" scheme="https://blog.crimx.com/categories/News/"/>
    
    
  </entry>
  
  <entry>
    <title>Progressive Background-Image With Ease</title>
    <link href="https://blog.crimx.com/2016/12/26/progressive-background-image/"/>
    <id>https://blog.crimx.com/2016/12/26/progressive-background-image/</id>
    <published>2016-12-25T16:00:00.000Z</published>
    <updated>2017-01-02T05:52:02.046Z</updated>
    
    <content type="html"><![CDATA[<p>Everyone likes smooth loading. Lately I tried to make the <code>background-image</code> of the menu to load progressively(also to the cover if you view the blog on mobile).</p>
<p>If you take a look at how <a href="https://medium.com/" target="_blank">Medium</a> does progressive image loading(or check out <a href="https://jmperezperez.com/medium-image-progressive-loading-placeholder/" target="_blank">this article</a>), you&#39;ll
notice that they use JavaScript and canvas to blur and store thumbnails. It seems a bit overkill to me. And when you need to do it on a <code>background-image</code> with <code>background-position</code>, things become even more complicated.</p>
<p>So I needed to figure out a simpler solution. Here&#39;s what I came up with:</p>
<h2 id="Blur-by-default">
<a href="#Blur-by-default" class="headerlink" title="Blur by default"></a>Blur by default</h2>
<p>As the article above mentioned:</p>
<blockquote>
<p>By default, when a browser renders a small image scaled up, it applies a light blur effect to smooth the artefacts of the image. The effect can also be <a href="https://developers.google.com/web/updates/2015/01/pixelated" target="_blank">turned off</a>for images like QR codes.</p>
</blockquote>
<p>But the default blur effect still feels blocky.</p>
<p></p>
<p><img src="/images/post/pexels-photo-24343-blocky-thumbnail.jpg" alt="thumbnail" style="width: 100%"></p>
<p></p>
<p>To make it smoother, I applied blur effect to the thumbnails while generating them, using <a href="https://github.com/aheckmann/gm" target="_blank">GraphicsMagick for node</a>:</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">const</span> gm = <span class="built_in">require</span>(<span class="string">'gm'</span>)</div><div class="line"></div><div class="line">gm(coverPath)</div><div class="line">  .resize(<span class="number">30</span>) <span class="comment">// or .resize(null, 30) for portrait</span></div><div class="line">  .blur(<span class="number">5</span>)</div><div class="line">  .noProfile()</div><div class="line">  .write(thumbnailPath, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123; <span class="built_in">console</span>.warn(err) &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;)</div><div class="line"></div><div class="line"><span class="comment">// or to base64</span></div><div class="line">gm(coverPath)</div><div class="line">  .resize(<span class="number">30</span>) <span class="comment">// or .resize(null, 30) for portrait</span></div><div class="line">  .blur(<span class="number">5</span>)</div><div class="line">  .noProfile()</div><div class="line">  .toBuffer(<span class="function"><span class="keyword">function</span> (<span class="params">err, buffer</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123; <span class="built_in">console</span>.warn(err) &#125;</div><div class="line">    <span class="keyword">var</span> base64 = <span class="string">'data:image/'</span> + ext + <span class="string">';base64,'</span> + buffer.toString(<span class="string">'base64'</span>)</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;)</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p></p>
<p><img src="/images/cover/thumbnails/pexels-photo-24343.jpg" alt="thumbnail" style="width: 100%"></p>
<p></p>
<p>This looks acceptable to me. No need for a canvas or blur function. Already felt relieved! <span class="github-emoji" title=":smile:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png?v7">&#x1f604;</span></p>
<h2 id="Layers">
<a href="#Layers" class="headerlink" title="Layers"></a>Layers</h2>
<p>This method divides a component into four layers: container, thumbnail, mask and content.</p>
<ul>
<li>Container holds the full-size background image.</li>
<li>Thumbnail holds the blur thumbnail, as <code>background-image</code>.</li>
<li>Mask is a translucent black element, to darken the background.</li>
<li>Everything else lives in the content layer.</li>
</ul>
<p>Use <code>z-index</code> to separate the layers.</p>
<h2 id="Image-onload">
<a href="#Image-onload" class="headerlink" title="Image onload"></a>Image onload</h2>
<p>When full-size image is loaded, hide the thumbnail. You can use this technic(with jQuery/Zepto):</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">var</span> $container = $(<span class="string">'.container'</span>)</div><div class="line"><span class="comment">// Matchs the "url(...)"</span></div><div class="line"><span class="keyword">var</span> bigBgSrc = $container.css(<span class="string">'background-image'</span>).match(<span class="regexp">/url\((.+?)\)/i</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> (bigBgSrc) &#123;</div><div class="line">  <span class="comment">// Removes quotations</span></div><div class="line">  bigBgSrc = bigBgSrc[<span class="number">1</span>].replace(<span class="regexp">/'|"/g</span>, <span class="string">''</span>)</div><div class="line"></div><div class="line">  $(<span class="string">'&lt;img&gt;'</span>)</div><div class="line">    .on(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      $container.find(<span class="string">'.thumbnail'</span>)</div><div class="line">        .addClass(<span class="string">'thumbnail--hide'</span>) <span class="comment">// Hides thumbnail</span></div><div class="line">    &#125;)</div><div class="line">    .prop(<span class="string">'src'</span>, bigBgSrc)</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>A live example:</p>
<p></p>
<p>
<iframe class="iframe-defer" height="437" scrolling="no" title="Progressive background-image Loading" src="" data-src="//codepen.io/straybugs/embed/preview/gLJyXW/?height=437&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%">See the Pen <a href="http://codepen.io/straybugs/pen/gLJyXW/" target="_blank">Progressive background-image Loading</a> by CrimX (<a href="http://codepen.io/straybugs" target="_blank">@straybugs</a>) on <a href="http://codepen.io" target="_blank">CodePen</a>.</iframe>
</p>
<p></p>
<h2 id="No-js">
<a href="#No-js" class="headerlink" title="No-js"></a>No-js</h2>
<p>No-js support is extremely easy. Just hide the thumbnail.</p>
<p></p>
<figure class="highlight css">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="selector-tag">html</span><span class="selector-class">.no-js</span> <span class="selector-class">.thumbnail</span> &#123;</div><div class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>For my blog I also made a <a href="https://github.com/crimx/blog/blob/master/themes/crimx/source/_scss/libs/_progressive-background-image.scss" target="_blank">Sass Mixin/Extend</a> with this method.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Everyone likes smooth loading. Lately I tried to make the &lt;code&gt;background-image&lt;/code&gt; of the menu to load progressively(also to the cov
    
    </summary>
    
      <category term="CSS" scheme="https://blog.crimx.com/categories/CSS/"/>
    
    
      <category term="Recommended" scheme="https://blog.crimx.com/tags/Recommended/"/>
    
      <category term="CSS" scheme="https://blog.crimx.com/tags/CSS/"/>
    
      <category term="Image" scheme="https://blog.crimx.com/tags/Image/"/>
    
      <category term="Progressive Image" scheme="https://blog.crimx.com/tags/Progressive-Image/"/>
    
      <category term="GraphicsMagick" scheme="https://blog.crimx.com/tags/GraphicsMagick/"/>
    
  </entry>
  
  <entry>
    <title>在博客上使用 Emoji</title>
    <link href="https://blog.crimx.com/2016/12/23/emojis-for-blog/"/>
    <id>https://blog.crimx.com/2016/12/23/emojis-for-blog/</id>
    <published>2016-12-22T16:00:00.000Z</published>
    <updated>2016-12-30T12:14:00.057Z</updated>
    
    <content type="html"><![CDATA[<p>Emoji 都要出电影了，博客怎么能不用。奇怪的是 hexo 上只有一个插件，要在文中添加 tag，还不支持 hexo3 。我不太喜欢在 markdown 里加各种 tag，所以就打算自己再写个插件。</p>
<p>Github 对 emoji 的支持就很好，所以去观摩了一下。它在生成网页的时候将关键字替换成 emoji 的 unicode 字符，然后再利用 JavaScript 将字符替换成图片，这样即使图片加载失败还有字符 fallback。</p>
<p>于是就参考这种方式写了 <a href="https://github.com/crimx/hexo-filter-github-emojis" target="_blank">hexo-filter-github-emojis</a> <span class="github-emoji" title=":tada:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f389.png?v7">&#x1f389;</span>。</p>
<p>用法与 Github 一样，效果还不错吧 <span class="github-emoji" title=":smile:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png?v7">&#x1f604;</span>。</p>
<blockquote>
<p><span class="github-emoji" title=":speedboat:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f6a4.png?v7">&#x1f6a4;</span><br>&nbsp; <span class="github-emoji" title=":tropical_fish:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f420.png?v7">&#x1f420;</span></p>
<p><br><br><br><br><br></p>
<p>&emsp;&emsp;&emsp;&emsp; <span class="github-emoji" title=":octopus:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f419.png?v7">&#x1f419;</span><span class="github-emoji" title=":dolphin:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f42c.png?v7">&#x1f42c;</span><span class="github-emoji" title=":fish:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f41f.png?v7">&#x1f41f;</span><br>&emsp;&emsp;&emsp;&emsp; <i>&quot;He touched the butt!&quot;</i></p>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Emoji 都要出电影了，博客怎么能不用。奇怪的是 hexo 上只有一个插件，要在文中添加 tag，还不支持 hexo3 。我不太喜欢在 markdown 里加各种 tag，所以就打算自己再写个插件。&lt;/p&gt;
&lt;p&gt;Github 对 emoji 的支持就很好，所以去观摩了一
    
    </summary>
    
      <category term="Technics" scheme="https://blog.crimx.com/categories/Technics/"/>
    
    
      <category term="Recommended" scheme="https://blog.crimx.com/tags/Recommended/"/>
    
      <category term="Image" scheme="https://blog.crimx.com/tags/Image/"/>
    
      <category term="Emoji" scheme="https://blog.crimx.com/tags/Emoji/"/>
    
      <category term="Hexo" scheme="https://blog.crimx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>SVG Symbol 和 Sprite 的好处和坑</title>
    <link href="https://blog.crimx.com/2016/11/28/svg-sprite/"/>
    <id>https://blog.crimx.com/2016/11/28/svg-sprite/</id>
    <published>2016-11-27T16:00:00.000Z</published>
    <updated>2016-12-30T12:32:20.306Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SVG-Symbol">
<a href="#SVG-Symbol" class="headerlink" title="SVG Symbol"></a>SVG Symbol</h1>
<p>用 Symbol 来把 SVG 合并到一个文件几乎是现在最流行的用法。</p>
<h2 id="Symbol-好处">
<a href="#Symbol-好处" class="headerlink" title="Symbol 好处"></a>Symbol 好处</h2>
<h3 id="方便">
<a href="#方便" class="headerlink" title="方便"></a>方便</h3>
<p>利用 ID 来取图案，所以不用各种计算，可以随便放。</p>
<h3 id="反复利用">
<a href="#反复利用" class="headerlink" title="反复利用"></a>反复利用</h3>
<p>这应该是一个不太容易发现的好处，你可以在文件内部继续用<code>&lt;use&gt;</code>来做图案的各种版本。这样 SVG 的优势更加明显，节省了好多空间。</p>
<p>比如这个博客里用到的社交图案，原本的是只有图案本身。例如这是 Codepen 的图案：</p>
<p></p>
<figure class="highlight html">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">"icon-codepen"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 32 32"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>codepen<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">class</span>=<span class="string">"icon-path"</span> <span class="attr">d</span>=<span class="string">"M17.050 1.259c-0.882-0.546-2.016-0.546-2.855 0.042l-12.764 8.649c-0.672 0.462-1.092 1.218-1.092 2.016v9.321c0 0.84 0.42 1.596 1.134 2.057l12.974 8.355c0.84 0.546 1.931 0.546 2.813 0l13.226-8.482c0.714-0.462 1.134-1.218 1.134-2.057v-9.153c0-0.84-0.42-1.596-1.134-2.057l-13.436-8.691zM26.959 11.378l-4.87 3.191-4.576-3.233-0.042-6.382 9.489 6.424zM14.11 4.954v6.256l-4.702 3.191-4.702-3.065 9.405-6.382zM3.446 14.401l3.023 1.973-3.023 2.057v-4.031zM14.195 27.753l-9.447-6.172 4.744-3.233 4.744 3.107c-0.042 0-0.042 6.298-0.042 6.298zM12.389 16.332l3.065-2.099 3.569 2.267-3.149 2.099-3.485-2.267zM17.553 27.753v-6.298l4.535-2.939 4.87 3.107-9.405 6.13zM28.302 18.557l-3.233-2.057 3.233-2.099v4.157z"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>现在直接在文章里<code>&lt;use&gt;</code>：</p>
<p></p>
<figure class="highlight html">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">fill</span>=<span class="string">"#000"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">"/images/symbol-defs.svg#icon-codepen"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>就是这个效果:</p>
<p></p>
<p style="text-align: center; max-height: 150px"><svg fill="#000"><use xlink:href="/images/symbol-defs.svg#icon-codepen"/></svg></p>
<p></p>
<p>在<code>symbol-defs.svg</code>里还有它的另外一个版本，带圆圈的，只需要添加几行就可以：</p>
<p></p>
<figure class="highlight html">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">"icon-codepen-circle"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 32 32"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>codepen<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"50%"</span> <span class="attr">cy</span>=<span class="string">"50%"</span> <span class="attr">r</span>=<span class="string">"50%"</span> <span class="attr">fill</span>=<span class="string">"#000"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">"#icon-codepen"</span> <span class="attr">width</span>=<span class="string">"20"</span> <span class="attr">x</span>=<span class="string">"6"</span> <span class="attr">fill</span>=<span class="string">"#fff"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>同样的使用方式，既环保又方便：</p>
<p></p>
<p style="text-align: center; max-height: 150px"><svg fill="#000"><use xlink:href="/images/symbol-defs.svg#icon-codepen-circle"/></svg></p>
<p></p>
<h2 id="Symbol-坏处">
<a href="#Symbol-坏处" class="headerlink" title="Symbol 坏处"></a>Symbol 坏处</h2>
<h3 id="不完全支持">
<a href="#不完全支持" class="headerlink" title="不完全支持"></a>不完全支持</h3>
<p>这种方式并不完全支持 SVG 的各种特性。比如我开始就踩到了一个坑。我的 LOGO 里使用了<code>clippath</code>，使用这种方式就会失去效果。这个貌似是个<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=109212" target="_blank">陈年老 bug</a> 来的。</p>
<p>解决方式就是利用工具合并路径，最好还压缩成一条，方便管理。编辑工具推荐 <a href="https://boxy-svg.com/main.html#download" target="_blank">Boxy SVG</a>，生成的代码非常轻盈，而且尽可能保留原来的样子，不会像 Illustrator 一样源码面目全非。压缩工具推荐 <a href="https://jakearchibald.github.io/svgomg/" target="_blank">SVGOMG!</a>，号称
<a href="https://github.com/svg/svgo" target="_blank">SVGO</a>&#39;s Missing GUI。</p>
<h3 id="奇怪的宽高">
<a href="#奇怪的宽高" class="headerlink" title="奇怪的宽高"></a>奇怪的宽高</h3>
<p>在宽和高是百分比的情况下，会出现跟<code>&lt;img&gt;</code>或者普通<code>&lt;svg&gt;</code>不一样的计算。有时高空出一段，有时宽空出一段。</p>
<p>这个我纠结了很久，没有找到原因。我猜是受到原本整个 SVG 的影响。</p>
<p>解决方法是用相同宽高比的父<code>&lt;div&gt;</code>来限制；或者不用百分比。</p>
<h3 id="慢">
<a href="#慢" class="headerlink" title="慢"></a>慢</h3>
<p>因为零部件是可以<code>&lt;use&gt;</code>的，所以引擎不能像图片一样直接解析完就一整块到处扔。</p>
<p>虽然这个延时非常的小，一般几乎感觉不到，但是如果像这个博客左边的菜单栏一样（电脑上），在每个页面都是同样的元素，那么切换页面的时候就可以肉眼感受到图案的闪动。这种情况就只能放弃使用 Symbol。可以考虑单独一张 SVG 图片或者：<span class="github-emoji" title=":point_down:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f447.png?v7">&#x1f447;</span></p>
<h1 id="SVG-Sprite">
<a href="#SVG-Sprite" class="headerlink" title="SVG Sprite"></a>SVG Sprite</h1>
<p>SVG Sprite 与以前的 PNG Sprite 一样，把图案按一定方式平铺到一张大图片上。</p>
<h2 id="Sprite-好处">
<a href="#Sprite-好处" class="headerlink" title="Sprite 好处"></a>Sprite 好处</h2>
<h3 id="对齐">
<a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3>
<p>SVG 不受大小限制，所以 Sprite 可以按统一的规格排列。</p>
<p>取的时候也不受大小限制，利用百分比来取。</p>
<p>比如这个博客左边菜单的图案就是 SVG Sprite，<a href="https://github.com/crimx/blog/blob/master/themes/crimx/source/_scss/libs/_svg-icons.scss" target="_blank">利用 Sass 自动计算百分比</a>。</p>
<h3 id="快">
<a href="#快" class="headerlink" title="快"></a>快</h3>
<p>这种方式与普通图片一样肉眼看不到延时，而且还结合了 SVG 不受大小限制的优势。</p>
<h2 id="Sprite-坏处">
<a href="#Sprite-坏处" class="headerlink" title="Sprite 坏处"></a>Sprite 坏处</h2>
<h3 id="添加麻烦">
<a href="#添加麻烦" class="headerlink" title="添加麻烦"></a>添加麻烦</h3>
<p>图案受位置影响，当然没有 Symbol 方法来得方便。</p>
<p>因为需要快速显示的图案不多，我是利用 <a href="https://boxy-svg.com/main.html#download" target="_blank">Boxy SVG</a> 一个一个添加的。</p>
<p>不太用心的查过一下，没注意到有合适的自动化工具。</p>
<p>能用 Symbol 的当然优先使用 Symbol 方法，所以 Sprite 用的也不多，手动添加可以满足。</p>
<h3 id="有误差">
<a href="#有误差" class="headerlink" title="有误差"></a>有误差</h3>
<p>使用百分比因为受小数影响，图案会有<code>1px</code>浮动，当然这个<code>1px</code>是根据图案当前大小得出的，所以越小图案浮动的位置越大。</p>
<p>解决方法有两个，一是避免产生小数，按倍数来设置图案大小；二是按图案最小的情况计算出血，把图案缩小空出足够位置。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SVG-Symbol&quot;&gt;
&lt;a href=&quot;#SVG-Symbol&quot; class=&quot;headerlink&quot; title=&quot;SVG Symbol&quot;&gt;&lt;/a&gt;SVG Symbol&lt;/h1&gt;
&lt;p&gt;用 Symbol 来把 SVG 合并到一个文件几乎是现在最流行的用法。&lt;
    
    </summary>
    
      <category term="SVG" scheme="https://blog.crimx.com/categories/SVG/"/>
    
    
      <category term="Recommended" scheme="https://blog.crimx.com/tags/Recommended/"/>
    
      <category term="Image" scheme="https://blog.crimx.com/tags/Image/"/>
    
      <category term="SVG" scheme="https://blog.crimx.com/tags/SVG/"/>
    
      <category term="Sprite" scheme="https://blog.crimx.com/tags/Sprite/"/>
    
  </entry>
  
  <entry>
    <title>CSS 过渡未知高度</title>
    <link href="https://blog.crimx.com/2016/11/12/transition-display-none/"/>
    <id>https://blog.crimx.com/2016/11/12/transition-display-none/</id>
    <published>2016-11-11T16:00:00.000Z</published>
    <updated>2016-12-30T05:09:26.564Z</updated>
    
    <content type="html"><![CDATA[<p>有时候往 dom 里插入一些元素，会希望 dom 慢慢腾开空间，再把插入的元素呈现出来。</p>
<p>但对于过渡 <code>height</code> 未知的元素，暂时没有完美的方法，浏览器还不支持 <code>height</code> 过渡到 <code>auto</code>。而且这种方式也会造成这个元素后面的所有元素一并重绘，蛮耗资源的。</p>
<p>以下是利用 <code>max-height</code> 来过渡，适合已知元素高度的范围。但也不是完美方法，<code>max-height</code> 固定了，那么同样的时间，元素高度越小过渡就会显得越快。所以只好尽量选最接近的 <code>max-height</code>。</p>
<p></p>
<p><iframe height="300" scrolling="no" title="css transition max-height" src="//codepen.io/straybugs/embed/preview/ObqVBy/?height=300&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%">See the Pen <a href="http://codepen.io/straybugs/pen/ObqVBy/" target="_blank">css transition max-height</a> by CrimX (<a href="http://codepen.io/straybugs" target="_blank">@straybugs</a>) on <a href="http://codepen.io" target="_blank">CodePen</a>.</iframe></p>
<p></p>
<p>写的时候犯了一个小错误，折腾了一会才发现时间 0 忘了加单位。CSS 时间里<code>0</code><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/time" target="_blank">是非法的值</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候往 dom 里插入一些元素，会希望 dom 慢慢腾开空间，再把插入的元素呈现出来。&lt;/p&gt;
&lt;p&gt;但对于过渡 &lt;code&gt;height&lt;/code&gt; 未知的元素，暂时没有完美的方法，浏览器还不支持 &lt;code&gt;height&lt;/code&gt; 过渡到 &lt;code&gt;auto&lt;
    
    </summary>
    
      <category term="CSS" scheme="https://blog.crimx.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://blog.crimx.com/tags/CSS/"/>
    
      <category term="Transition" scheme="https://blog.crimx.com/tags/Transition/"/>
    
  </entry>
  
  <entry>
    <title>Photoshop Pen Tool</title>
    <link href="https://blog.crimx.com/2016/09/25/photoshop-pen-tool/"/>
    <id>https://blog.crimx.com/2016/09/25/photoshop-pen-tool/</id>
    <published>2016-09-24T16:00:00.000Z</published>
    <updated>2016-12-30T05:14:51.121Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://design.tutsplus.com/tutorials/photoshops-pen-tool-the-comprehensive-guide--psd-718" target="_blank">https://design.tutsplus.com/tutorials/photoshops-pen-tool-the-comprehensive-guide--psd-718</a></p>
<p>这篇文章非常好的总结了 PS 钢笔工具的用法，其中的练习 PSD 特别好用，照着画一遍基本就懂得怎么操作锚点。</p>
<p><img src="/images/post/photoshop/photoshop-pen-tool.jpg" alt="photoshop-pen-tool"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://design.tutsplus.com/tutorials/photoshops-pen-tool-the-comprehensive-guide--psd-718&quot; target=&quot;_blank&quot;&gt;https://design.tutsp
    
    </summary>
    
      <category term="Tools" scheme="https://blog.crimx.com/categories/Tools/"/>
    
    
      <category term="Photoshop" scheme="https://blog.crimx.com/tags/Photoshop/"/>
    
  </entry>
  
  <entry>
    <title>自适应背景图片</title>
    <link href="https://blog.crimx.com/2016/09/11/responsive-cover/"/>
    <id>https://blog.crimx.com/2016/09/11/responsive-cover/</id>
    <published>2016-09-10T16:00:00.000Z</published>
    <updated>2017-01-25T17:17:46.163Z</updated>
    
    <content type="html"><![CDATA[<p>很多时候我们希望背景图片能够在元素不同大小的情况下都能够显示出主体。</p>
<p>居中是最常见的方式，但如果主体不在中间这个效果就大打折扣了。</p>
<p>这个对我来说一开始仅仅是一个念头，也没太注意。直到一次在 podcast 上听到有位嘉宾做了一个 jQuery 插件 <a href="https://github.com/wentin/ResponsifyJS" target="_blank">https://github.com/wentin/ResponsifyJS</a>，主要就是为了实现这种效果。</p>
<p>感兴趣地去看了一下，感觉还是太重了。但我有个缺点就是一旦开始了就不容易停下来，就继续找了一下资料。发现其实浏览器本身就有很好的实现。</p>
<p></p>
<p style="text-align: center; font-size: 1.29rem"><span>Background Positon!</span></p>
<p></p>
<p><code>background-position</code> 支持百分比属性。当使用百分比属性的时候，就是将背景图片与元素在百分比指定的位置重合。比如说 <code>20% 40%</code>，在横向上背景图片的 20% 与元素的 20% 对齐，竖向上背景图片的 40% 与元素的 40% 对齐。</p>
<p>这就相当于指定了一个焦点。把焦点放到主体上，那么无论元素怎么变化，主体都会有较好的显示效果。而且这些计算都是浏览器来干的！</p>
<p>现在唯一麻烦的地方就是要指定焦点。我继续找了一些资料，JavaScript 上也有人实现一些 Content Aware 的算法，比如这个 <a href="https://github.com/jwagner/smartcrop.js/" target="_blank">Smartcrop.js</a>。但是由于我没有批量的图片需要调整，就没有折腾去研究这个，而是研究怎么方便手动选择。</p>
<p>后来就做了这个所见即所得工具，<a href="http://www.crimx.com/portrait-crop/" target="_blank">http://www.crimx.com/portrait-crop/</a>，除了标记焦点以外还可以进行竖向的裁剪，节省空间。</p>
<p>移动焦点的时候右边会实时计算 <code>background-position</code>，包括了横向和竖向的结果。不需要裁剪的话只用横向的就行。</p>
<p>右下还提供了 json 格式。我的博客就是为所有封面保存了一个 json 文件，在 hexo 中设钩子去读再作为 inline css 写入。每次添加的时候复制粘贴就可以。</p>
<p>裁剪框是基于 <a href="https://github.com/fengyuanchen/cropperjs" target="_blank">cropperjs</a> 实现的，添加了个焦点。实现的时候还顺便修了 bug 提交了个 pr 给原作者哈哈。</p>
<p><strong>2016年12月31日按</strong>：他今天才 merge …… <span class="github-emoji" title=":sweat_smile:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f605.png?v7">&#x1f605;</span> 都忘记有提过这个 pr 了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多时候我们希望背景图片能够在元素不同大小的情况下都能够显示出主体。&lt;/p&gt;
&lt;p&gt;居中是最常见的方式，但如果主体不在中间这个效果就大打折扣了。&lt;/p&gt;
&lt;p&gt;这个对我来说一开始仅仅是一个念头，也没太注意。直到一次在 podcast 上听到有位嘉宾做了一个 jQuery 插
    
    </summary>
    
      <category term="CSS" scheme="https://blog.crimx.com/categories/CSS/"/>
    
    
      <category term="Recommended" scheme="https://blog.crimx.com/tags/Recommended/"/>
    
      <category term="CSS" scheme="https://blog.crimx.com/tags/CSS/"/>
    
      <category term="Responsive" scheme="https://blog.crimx.com/tags/Responsive/"/>
    
      <category term="Background" scheme="https://blog.crimx.com/tags/Background/"/>
    
  </entry>
  
  <entry>
    <title>Gulp 使用命令行参数</title>
    <link href="https://blog.crimx.com/2016/08/07/gulp-console-arguments/"/>
    <id>https://blog.crimx.com/2016/08/07/gulp-console-arguments/</id>
    <published>2016-08-06T16:00:00.000Z</published>
    <updated>2017-01-22T07:47:12.427Z</updated>
    
    <content type="html"><![CDATA[<p>命令行参数的好处就是方便控制，引用 Stack Overflow 的一个<a href="http://stackoverflow.com/a/23088183" target="_blank">回答</a>：</p>
<blockquote>
<p>The environment setting is available during all subtasks. So I can use this flag on the watch task too.</p>
</blockquote>
<p>通过 <code>require(&#39;gulp-util&#39;).env</code> 获得参数：</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'gulp-util'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'styles'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src([<span class="string">'src/styles/'</span> + (util.env.theme ? util.env.theme : <span class="string">'main'</span>) + <span class="string">'.scss'</span>])</div><div class="line">    .pipe(compass(&#123;</div><div class="line">        <span class="attr">config_file</span>: <span class="string">'./config.rb'</span>,</div><div class="line">        <span class="attr">sass</span>   : <span class="string">'src/styles'</span>,</div><div class="line">        <span class="attr">css</span>    : <span class="string">'dist/styles'</span>,</div><div class="line">        <span class="attr">style</span>  : <span class="string">'expanded'</span></div><div class="line"></div><div class="line">    &#125;))</div><div class="line">    .pipe(autoprefixer(<span class="string">'last 2 version'</span>, <span class="string">'safari 5'</span>, <span class="string">'ie 8'</span>, <span class="string">'ie 9'</span>, <span class="string">'ff 17'</span>, <span class="string">'opera 12.1'</span>, <span class="string">'ios 6'</span>, <span class="string">'android 4'</span>))</div><div class="line">    .pipe(livereload(server))</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/styles'</span>))</div><div class="line">    .pipe(notify(&#123; <span class="attr">message</span>: <span class="string">'Styles task complete'</span> &#125;));</div><div class="line">&#125;);</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>就可以这么用：</p>
<p></p>
<figure class="highlight bash">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div></pre>
</td>
<td class="code">
<pre><div class="line">gulp watch --theme literature</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;命令行参数的好处就是方便控制，引用 Stack Overflow 的一个&lt;a href=&quot;http://stackoverflow.com/a/23088183&quot; target=&quot;_blank&quot;&gt;回答&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The environ
    
    </summary>
    
      <category term="Tools" scheme="https://blog.crimx.com/categories/Tools/"/>
    
    
      <category term="Gulp" scheme="https://blog.crimx.com/tags/Gulp/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text Title Case 快捷键</title>
    <link href="https://blog.crimx.com/2016/05/27/sublime-text-title-case/"/>
    <id>https://blog.crimx.com/2016/05/27/sublime-text-title-case/</id>
    <published>2016-05-26T16:00:00.000Z</published>
    <updated>2016-12-29T09:24:51.197Z</updated>
    
    <content type="html"><![CDATA[<p>Preferences -&gt; Key Bindings 添加：</p>
<p></p>
<figure class="highlight json">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
</td>
<td class="code">
<pre><div class="line">[</div><div class="line">  &#123; <span class="attr">"keys"</span>: [<span class="string">"ctrl+k"</span>, <span class="string">"ctrl+t"</span>], <span class="attr">"command"</span>: <span class="string">"title_case"</span> &#125;</div><div class="line">  // .....</div><div class="line">]</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>然后就可以用 <kbd>Ctrl</kbd>+<kbd>k</kbd> 再按下 <kbd>Ctrl</kbd>+<kbd>t</kbd> 使用 Title Case。</p>
<p>Package Control 上有个很老的 Package，Smart Title Case。能识别更复杂的情况，但是有 bug，核心代码已经修复 <a href="https://github.com/ppannuto/python-titlecase" target="_blank">https://github.com/ppannuto/python-titlecase</a>，但 Package 的作者早已不再维护，下载量也不大。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Preferences -&amp;gt; Key Bindings 添加：&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;gutter&quot;&gt;
&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;
    
    </summary>
    
      <category term="Tools" scheme="https://blog.crimx.com/categories/Tools/"/>
    
    
      <category term="Sublime Text" scheme="https://blog.crimx.com/tags/Sublime-Text/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript This 的六道坎</title>
    <link href="https://blog.crimx.com/2016/05/12/understanding-this/"/>
    <id>https://blog.crimx.com/2016/05/12/understanding-this/</id>
    <published>2016-05-11T16:00:00.000Z</published>
    <updated>2017-01-26T11:01:38.169Z</updated>
    
    <content type="html"><![CDATA[<p>鉴于<code>this</code>风骚的运作方式，对<code>this</code>的理解是永不过时的话题，本文试图通过将其大卸六块来钉住这个磨人的妖精。</p>
<h1 id="首先">
<a href="#首先" class="headerlink" title="首先"></a>首先</h1>
<blockquote>
<p><code>this</code> is all about context.</p>
</blockquote>
<p><code>this</code>说白了就是找大佬，找拥有当前上下文（context）的对象（context object）。</p>
<p>大佬可以分为六层，层数越高权力越大，<code>this</code>只会认最大的。</p>
<h2 id="第一层：世界尽头">
<a href="#第一层：世界尽头" class="headerlink" title="第一层：世界尽头"></a>第一层：世界尽头</h2>
<p>权力最小的大佬是作为备胎的存在，在普通情况下就是全局，浏览器里就是<code>window</code>；在<code>use strict</code>的情况下就是<code>undefined</code>。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showThis</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showStrictThis</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="meta">  'use strict'</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">showThis() <span class="comment">// window</span></div><div class="line">showStrictThis() <span class="comment">// undefined</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="第二层：点石成金">
<a href="#第二层：点石成金" class="headerlink" title="第二层：点石成金"></a>第二层：点石成金</h2>
<p>第二层大佬说白了就是找这个函数前面的点<code>.</code>。</p>
<p>如果用到<code>this</code>的那个函数是属于某个 context object 的，那么这个 context object 绑定到<code>this</code>。</p>
<p>比如下面的例子，<code>boss</code>是<code>returnThis</code>的 context object ，或者说<code>returnThis</code>属于<code>boss</code>。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">var</span> boss = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'boss'</span>,</div><div class="line">  returnThis () &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">boss.returnThis() === boss <span class="comment">// true</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>下面这个例子就要小心点咯，能想出答案么？</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">var</span> boss1 = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'boss1'</span>,</div><div class="line">  returnThis () &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> boss2 = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'boss2'</span>,</div><div class="line">  returnThis () &#123;</div><div class="line">    <span class="keyword">return</span> boss1.returnThis()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> boss3 = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'boss3'</span>,</div><div class="line">  returnThis () &#123;</div><div class="line">    <span class="keyword">var</span> returnThis = boss1.returnThis</div><div class="line">    <span class="keyword">return</span> returnThis()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">boss1.returnThis() <span class="comment">// boss1</span></div><div class="line">boss2.returnThis() <span class="comment">// ?</span></div><div class="line">boss3.returnThis() <span class="comment">// ?</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>答案是<code>boss1</code>和<code>window</code>哦，猜对了吗。</p>
<p>只要看使用<code>this</code>的那个函数。</p>
<p>在<code>boss2.returnThis</code>里，使用<code>this</code>的函数是<code>boss1.returnThis</code>，所以<code>this</code>绑定到<code>boss1</code>；</p>
<p>在<code>boss3.returnThis</code>里，使用<code>this</code>的函数是<code>returnThis</code>，所以<code>this</code>绑定到备胎。</p>
<p>要想把<code>this</code>绑定到<code>boss2</code>怎么做呢？</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">var</span> boss1 = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'boss1'</span>,</div><div class="line">  returnThis () &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> boss2 = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'boss2'</span>,</div><div class="line">  <span class="attr">returnThis</span>: boss1.returnThis</div><div class="line">&#125;</div><div class="line"></div><div class="line">boss2.returnThis() <span class="comment">//boss2</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>没错，只要让使用<code>this</code>的函数是属于<code>boss2</code>就行。</p>
<h2 id="第三层：指腹为婚">
<a href="#第三层：指腹为婚" class="headerlink" title="第三层：指腹为婚"></a>第三层：指腹为婚</h2>
<p>第三层大佬是<code>Object.prototype.call</code>和<code>Object.prototype.apply</code>，它们可以通过参数指定<code>this</code>。（注意<code>this</code>是不可以直接赋值的哦，<code>this = 2</code>会报<code>ReferenceError</code>。）</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnThis</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> boss1 = &#123; <span class="attr">name</span>: <span class="string">'boss1'</span> &#125;</div><div class="line"></div><div class="line">returnThis() <span class="comment">// window</span></div><div class="line">returnThis.call(boss1) <span class="comment">// boss1</span></div><div class="line">returnThis.apply(boss1) <span class="comment">// boss1</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="第四层：海誓山盟">
<a href="#第四层：海誓山盟" class="headerlink" title="第四层：海誓山盟"></a>第四层：海誓山盟</h2>
<p>第四层大佬是<code>Object.prototype.bind</code>，他不但通过一个新函数来提供永久的绑定，还会覆盖第三层大佬的命令。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnThis</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> boss1 = &#123; <span class="attr">name</span>: <span class="string">'boss1'</span>&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> boss1returnThis = returnThis.bind(boss1)</div><div class="line"></div><div class="line">boss1returnThis() <span class="comment">// boss1</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> boss2 = &#123; <span class="attr">name</span>: <span class="string">'boss2'</span> &#125;</div><div class="line">boss1returnThis.call(boss2) <span class="comment">// still boss1</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="第五层：内有乾坤">
<a href="#第五层：内有乾坤" class="headerlink" title="第五层：内有乾坤"></a>第五层：内有乾坤</h2>
<p>一个比较容易忽略的会绑定<code>this</code>的地方就是<code>new</code>。当我们<code>new</code>一个函数时，就会自动把<code>this</code>绑定在新对象上，然后再调用这个函数。它会覆盖<code>bind</code>的绑定。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showThis</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">showThis() <span class="comment">// window</span></div><div class="line"><span class="keyword">new</span> showThis() <span class="comment">// showThis</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> boss1 = &#123; <span class="attr">name</span>: <span class="string">'boss1'</span> &#125;</div><div class="line">showThis.call(boss1) <span class="comment">// boss1</span></div><div class="line"><span class="keyword">new</span> showThis.call(boss1) <span class="comment">// TypeError</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> boss1showThis = showThis.bind(boss1)</div><div class="line">boss1showThis() <span class="comment">// boss1</span></div><div class="line"><span class="keyword">new</span> boss1showThis() <span class="comment">// showThis</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="第六层：军令如山">
<a href="#第六层：军令如山" class="headerlink" title="第六层：军令如山"></a>第六层：军令如山</h2>
<p>最后一个法力无边的大佬就是 ES2015 的箭头函数。箭头函数里的<code>this</code>不再妖艳，被永远封印到当前词法作用域之中，称作 Lexical this ，在代码运行前就可以确定。没有其他大佬可以覆盖。</p>
<p>这样的好处就是方便让回调函数的<code>this</code>使用当前的作用域，不怕引起混淆。</p>
<p>所以对于箭头函数，只要看它在哪里创建的就行。</p>
<p>如果对 V8 实现的词法作用域感兴趣可以看看<a href="http://blog.crimx.com/2015/03/29/javascript-hoist-under-the-hood/" target="_blank">这里</a>。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span> (<span class="params">cb</span>) </span>&#123;</div><div class="line">  cb()</div><div class="line">&#125;</div><div class="line"></div><div class="line">callback(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>) &#125;) <span class="comment">// window</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> boss1 = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'boss1'</span>,</div><div class="line">  <span class="attr">callback</span>: callback,</div><div class="line">  callback2 () &#123;</div><div class="line">    callback(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>) &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">boss1.callback(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>) &#125;) <span class="comment">// still window</span></div><div class="line">boss1.callback2(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>) &#125;) <span class="comment">// boss1</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>下面这种奇葩的使用方式就需要注意：</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">var</span> returnThis = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span></div><div class="line"></div><div class="line">returnThis() <span class="comment">// window</span></div><div class="line"><span class="keyword">new</span> returnThis() <span class="comment">// TypeError</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> boss1 = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'boss1'</span>,</div><div class="line">  returnThis () &#123;</div><div class="line">    <span class="keyword">var</span> func = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span></div><div class="line">    <span class="keyword">return</span> func()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">returnThis.call(boss1) <span class="comment">// still window</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> boss1returnThis = returnThis.bind(boss1)</div><div class="line">boss1returnThis() <span class="comment">// still window</span></div><div class="line"></div><div class="line">boss1.returnThis() <span class="comment">// boss1</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> boss2 = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'boss2'</span>,</div><div class="line">  <span class="attr">returnThis</span>: boss1.returnThis</div><div class="line">&#125;</div><div class="line"></div><div class="line">boss2.returnThis() <span class="comment">// boss2</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>如果你不知道最后为什么会是 boss2，继续理解“对于箭头函数，只要看它在哪里创建”这句话。</p>
<h1 id="参考">
<a href="#参考" class="headerlink" title="参考"></a>参考</h1>
<ol>
<li>Mozilla Developer Network</li>
<li>Kyle Simpson, <em>this &amp; object prototypes</em></li>
<li>Axel Rauschmayer, <em>Speaking JavaScript</em></li>
</ol>
<p>[完]</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;鉴于&lt;code&gt;this&lt;/code&gt;风骚的运作方式，对&lt;code&gt;this&lt;/code&gt;的理解是永不过时的话题，本文试图通过将其大卸六块来钉住这个磨人的妖精。&lt;/p&gt;
&lt;h1 id=&quot;首先&quot;&gt;
&lt;a href=&quot;#首先&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.crimx.com/categories/JavaScript/"/>
    
    
      <category term="Understanding JavaScript" scheme="https://blog.crimx.com/tags/Understanding-JavaScript/"/>
    
      <category term="Recommended" scheme="https://blog.crimx.com/tags/Recommended/"/>
    
      <category term="This" scheme="https://blog.crimx.com/tags/This/"/>
    
  </entry>
  
  <entry>
    <title>闲读源码：ScrollingElement Polyfill</title>
    <link href="https://blog.crimx.com/2016/04/18/document-scrollingelement-polyfill/"/>
    <id>https://blog.crimx.com/2016/04/18/document-scrollingelement-polyfill/</id>
    <published>2016-04-17T16:00:00.000Z</published>
    <updated>2017-01-04T06:55:10.898Z</updated>
    
    <content type="html"><![CDATA[<p>今天看了<a href="https://imququ.com/post/document-scrollingelement-in-chrome.html" target="_blank">这篇文章</a>，讲到 WebKit <code>document.body.scrollTop</code> 的问题。还有这里 <a href="https://dev.opera.com/articles/fixing-the-scrolltop-bug/" target="_blank">Dev.Opera Blog : Fixing the scrollTop bug</a>。</p>
<p><code>scrollTop</code>, <code>scrollLeft</code>, <code>scrollWidth</code>, <code>scrollHeight</code> 都是跟滚动相关的属性。设置 <code>scrollTop</code> 和 <code>scrollLeft</code> 还可以产生滚动。当这些属于用在根元素的时候，滚动是发生在 viewport 的。</p>
<p>但是 WebKit/Blink 不走寻常路，它会一直让 <code>body</code> 来代替 viewport 滚动。所以根元素会一直返回 0，对它设值也不会有反应。</p>
<p>文章里面提到了几种处理方式，其中一种方式就是利用一个比较新的属性 <code>document.scrollingElement</code>，它会返回合适的滚动元素，就不用纠结是哪个。</p>
<p><a href="https://github.com/mathiasbynens/document.scrollingElement/blob/master/scrollingelement.js" target="_blank">document.scrollingElement polyfill</a> 是它的一个 fallback，看起来很有趣，就细读了一遍。</p>
<h2 id="规范">
<a href="#规范" class="headerlink" title="规范"></a>规范</h2>
<p>要理解源码必须先看它要干什么，<a href="https://drafts.csswg.org/cssom-view/#dom-document-scrollingelement" target="_blank">CSSOM View</a> specification 提到：</p>
<blockquote>
<p>The scrollingElement attribute, on getting, must run these steps:</p>
<ol>
<li>
<p>If the Document is in quirks mode, follow these substeps:</p>
<ol>
<li>If the HTML body element exists, and it is not potentially scrollable, return the HTML body element and abort these steps.</li>
<li>Return null and abort these steps.</li>
</ol>
</li>
<li>
<p>If there is a root element, return the root element and abort these steps.</p>
</li>
<li>
<p>Return null.</p>
</li>
</ol>
<blockquote>
<p>Note: For non-conforming user agents that always use the quirks mode behavior for scrollTop and scrollLeft, the scrollingElement attribute is expected to also always return the HTML body element (or null if it does not exist). This API exists so that
Web developers can use it to get the right element to use for scrolling APIs, without making assumptions about a particular user agent’s behavior or having to invoke a scroll to see which element scrolls the viewport.</p>
</blockquote>
</blockquote>
<p>这个 polyfill 干的事情就是在 Standards Mode 情况下如果正确实现规范的话就返回根元素，其它情况下返回 <code>body</code>（不一定是 <code>document</code> 的哦，后面会提到）。</p>
<h2 id="入口">
<a href="#入口" class="headerlink" title="入口"></a>入口</h2>
<p>整体来看，没有实现 <code>scrollingElement</code> 的才会调用 polyfill：</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">if</span> (!(<span class="string">'scrollingElement'</span> <span class="keyword">in</span> <span class="built_in">document</span>)) (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;());</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>然后从这里开始：</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">if</span> (<span class="built_in">Object</span>.defineProperty) &#123;</div><div class="line">  <span class="comment">// Support modern browsers that lack a native implementation.</span></div><div class="line">  <span class="built_in">Object</span>.defineProperty(<span class="built_in">document</span>, <span class="string">'scrollingElement'</span>, &#123;</div><div class="line">    <span class="string">'get'</span>: scrollingElement</div><div class="line">  &#125;);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.__defineGetter__) &#123;</div><div class="line">  <span class="comment">// Support Firefox ≤ 3.6.9, Safari ≤ 4.1.3.</span></div><div class="line">  <span class="built_in">document</span>.__defineGetter__(<span class="string">'scrollingElement'</span>, scrollingElement);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="comment">// IE ≤ 4 lacks `attachEvent`, so it only gets this one assignment. IE ≤ 7</span></div><div class="line">  <span class="comment">// gets it too, but the value is updated later (see `propertychange`).</span></div><div class="line">  <span class="built_in">document</span>.scrollingElement = scrollingElement();</div><div class="line">  <span class="built_in">document</span>.attachEvent &amp;&amp; <span class="built_in">document</span>.attachEvent(<span class="string">'onpropertychange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// This is for IE ≤ 7 only.</span></div><div class="line">    <span class="comment">// A `propertychange` event fires when `&lt;body&gt;` is parsed because</span></div><div class="line">    <span class="comment">// `document.activeElement` then changes.</span></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.event.propertyName == <span class="string">'activeElement'</span>) &#123;</div><div class="line">      <span class="built_in">document</span>.scrollingElement = scrollingElement();</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>规范里 <code>scrollingElement</code> 是一个变量。通过 <code>defineProperty</code> 就可以让一个变量在获取的时候（也就是 <code>get</code> 的时候）调用函数，动态计算值。</p>
<p><a href="https://github.com/mathiasbynens/document.scrollingElement/blob/master/scrollingelement.js#L78" target="_blank">这里</a>就是主入口：</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">var</span> scrollingElement = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (isCompliant()) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.documentElement;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> body = <span class="built_in">document</span>.body;</div><div class="line">  <span class="comment">// Note: `document.body` could be a `frameset` element, or `null`.</span></div><div class="line">  <span class="comment">// `tagName` is uppercase in HTML, but lowercase in XML.</span></div><div class="line">  <span class="keyword">var</span> isFrameset = body &amp;&amp; !<span class="regexp">/body/i</span>.test(body.tagName);</div><div class="line">  body = isFrameset ? getNextBodyElement(body) : body;</div><div class="line">  <span class="comment">// If `body` is itself scrollable, it is not the `scrollingElement`.</span></div><div class="line">  <span class="keyword">return</span> body &amp;&amp; isScrollable(body) ? <span class="literal">null</span> : body;</div><div class="line">&#125;;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>正确实现规范的话就是返回根元素 <code>document.documentElement</code>，比如 HTML 里的 <code>&lt;html&gt;</code>，否则返回 <code>body</code>。</p>
<h2 id="isCompliant">
<a href="#isCompliant" class="headerlink" title="isCompliant"></a>isCompliant</h2>
<p>这里就是先判断浏览器有没有正确实现了规范。看看怎么判断的：</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="comment">// Note: standards mode / quirks mode can be toggled at runtime via</span></div><div class="line"><span class="comment">// `document.write`.</span></div><div class="line"><span class="keyword">var</span> isCompliantCached;</div><div class="line"><span class="keyword">var</span> isCompliant = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> isStandardsMode = <span class="regexp">/^CSS1/</span>.test(<span class="built_in">document</span>.compatMode);</div><div class="line">  <span class="keyword">if</span> (!isStandardsMode) &#123;</div><div class="line">    <span class="comment">// In quirks mode, the result is equivalent to the non-compliant</span></div><div class="line">    <span class="comment">// standards mode behavior.</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (isCompliantCached === <span class="keyword">void</span> <span class="number">0</span>) &#123;</div><div class="line">    <span class="comment">// When called for the first time, check whether the browser is</span></div><div class="line">    <span class="comment">// standard-compliant, and cache the result.</span></div><div class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</div><div class="line">    iframe.style.height = <span class="string">'1px'</span>;</div><div class="line">    (<span class="built_in">document</span>.body || <span class="built_in">document</span>.documentElement || <span class="built_in">document</span>).appendChild(iframe);</div><div class="line">    <span class="keyword">var</span> doc = iframe.contentWindow.document;</div><div class="line">    doc.write(<span class="string">'&lt;!DOCTYPE html&gt;&lt;div style="height:9999em"&gt;x&lt;/div&gt;'</span>);</div><div class="line">    doc.close();</div><div class="line">    isCompliantCached = doc.documentElement.scrollHeight &gt; doc.body.scrollHeight;</div><div class="line">    iframe.parentNode.removeChild(iframe);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> isCompliantCached;</div><div class="line">&#125;;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p><span class="github-emoji" title=":white_check_mark:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/2705.png?v7">&#x2705;</span> <code>document.compatMode</code> 是用来判断浏览器是 Standards Mode 还是 Quirks Mode，分别取值为 <code>CSS1Compat</code>和 <code>BackCompat</code>。</p>
<p>作者也说了 <code>document.write</code> 可以在运行时修改模式，所以每次都要判断一遍。</p>
<p>然后就用一个 iframe 来测试了，哇蛮重的。好处只能说是通用了。</p>
<p>Standards Mode 下根元素的 <code>scrollHeight</code> 比 <code>body</code> 高就可以说明正确的实现了规范。</p>
<p>因为这么重所以测试了一遍之后就把结果存起来了，以后就直接用。</p>
<p><span class="github-emoji" title=":white_check_mark:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/2705.png?v7">&#x2705;</span> 从这里也对 <code>document.body</code> 有了
<a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/body" target="_blank">新的认识</a>：</p>
<blockquote>
<p>Returns the <code>&lt;body&gt;</code> or <code>&lt;frameset&gt;</code> node of the current document, or null if no such element exists.</p>
</blockquote>
<p><code>&lt;frameset&gt;</code> 这种过时的东西没什么兴趣深入了解，直接看看怎么获取 <code>body</code> 的：</p>
<h2 id="Body">
<a href="#Body" class="headerlink" title="Body"></a>Body</h2>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBodyElement</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">  <span class="comment">// The `instanceof` check gives the correct result for e.g. `body` in a</span></div><div class="line">  <span class="comment">// non-HTML namespace.</span></div><div class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.HTMLBodyElement) &#123;</div><div class="line">    <span class="keyword">return</span> element <span class="keyword">instanceof</span> HTMLBodyElement;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// Fall back to a `tagName` check for old browsers.</span></div><div class="line">  <span class="keyword">return</span> <span class="regexp">/body/i</span>.test(element.tagName);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNextBodyElement</span>(<span class="params">frameset</span>) </span>&#123;</div><div class="line">  <span class="comment">// We use this function to be correct per spec in case `document.body` is</span></div><div class="line">  <span class="comment">// a `frameset` but there exists a later `body`. Since `document.body` is</span></div><div class="line">  <span class="comment">// a `frameset`, we know the root is an `html`, and there was no `body`</span></div><div class="line">  <span class="comment">// before the `frameset`, so we just need to look at siblings after the</span></div><div class="line">  <span class="comment">// `frameset`.</span></div><div class="line">  <span class="keyword">var</span> current = frameset;</div><div class="line">  <span class="keyword">while</span> (current = current.nextSibling) &#123;</div><div class="line">    <span class="keyword">if</span> (current.nodeType == <span class="number">1</span> &amp;&amp; isBodyElement(current)) &#123;</div><div class="line">      <span class="keyword">return</span> current;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// No `body` found.</span></div><div class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>通过 <code>nextSibling</code> 循环排查跳过一个个 <code>frameset</code>。<code>nodeType == 1</code> 表示 <code>Node.ELEMENT_NODE</code>，这个节点是个元素。</p>
<p><span class="github-emoji" title=":white_check_mark:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/2705.png?v7">&#x2705;</span> 通过 <code>element instanceof window.HTMLBodyElement</code> 可以正确判断 <code>body</code> 元素。</p>
<h2 id="isScrollable">
<a href="#isScrollable" class="headerlink" title="isScrollable"></a>isScrollable</h2>
<p>找到了 <code>body</code> 接下来就看 <code>isScrollable</code> 干了什么：</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isScrollable</span>(<span class="params">body</span>) </span>&#123;</div><div class="line">  <span class="comment">// A `body` element is scrollable if `body` and `html` both have</span></div><div class="line">  <span class="comment">// non-`visible` overflow and are both being rendered.</span></div><div class="line">  <span class="keyword">var</span> bodyStyle = computeStyle(body);</div><div class="line">  <span class="keyword">var</span> htmlStyle = computeStyle(<span class="built_in">document</span>.documentElement);</div><div class="line">  <span class="keyword">return</span> bodyStyle.overflow != <span class="string">'visible'</span> &amp;&amp; htmlStyle.overflow != <span class="string">'visible'</span> &amp;&amp;</div><div class="line">    isRendered(bodyStyle) &amp;&amp; isRendered(htmlStyle);</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>基本就是看看它的 CSS 属性，如果 <code>overflow</code> 不是 <code>visible</code> 且这个元素被渲染了的话，就属于可滚动的。</p>
<p>这里就有了一个疑问，<code>overflow</code> 是 <code>hidden</code> 也算可滚动的吗？看了一下 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/overflow" target="_blank">MDN</a>，发现这么一段话：</p>
<blockquote>
<p><strong>Note</strong>: When programmatically setting scrollTop on the relevant HTML element, even when overflow has the hidden value an element may still need to scroll.</p>
</blockquote>
<p><span class="github-emoji" title=":white_check_mark:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/2705.png?v7">&#x2705;</span> 所以 <code>overflow</code> 是 <code>hidden</code> 也是可滚动的。</p>
<h3 id="window-getComputedStyle">
<a href="#window-getComputedStyle" class="headerlink" title="window.getComputedStyle"></a>window.getComputedStyle</h3>
<p>然后就是这个 <code>computeStyle</code>：</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">computeStyle</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.getComputedStyle) &#123;</div><div class="line">    <span class="comment">// Support Firefox &lt; 4 which throws on a single parameter.</span></div><div class="line">    <span class="keyword">return</span> getComputedStyle(element, <span class="literal">null</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// Support Internet Explorer &lt; 9.</span></div><div class="line">  <span class="keyword">return</span> element.currentStyle;</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p><span class="github-emoji" title=":white_check_mark:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/2705.png?v7">&#x2705;</span> <code>window.getComputedStyle()</code> 与 <code>HTMLElement.style</code> 不一样在于前者可以动态得到元素所有的 CSS 属性，包括默认的值，而后者只能得到
<em>inline</em> CSS 属性。但前者是只读的，后者可以设值。</p>
<h3 id="isRendered">
<a href="#isRendered" class="headerlink" title="isRendered"></a>isRendered</h3>
<p>然后再看 <code>isRendered</code> 怎么判断：</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isRendered</span>(<span class="params">style</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> style.display != <span class="string">'none'</span> &amp;&amp; !(style.visibility == <span class="string">'collapse'</span> &amp;&amp;</div><div class="line">    <span class="regexp">/^table-(.+-group|row|column)$/</span>.test(style.display));</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>看来这位作者不太用严格等号和不等号。<code>display</code>这个好理解，<code>none</code>的元素不会被渲染出来。后面的就有点绕，要理解这个判断需要明白 <code>visibility</code> 的<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/visibility" target="_blank">三个取值</a>：</p>
<blockquote>
<ul>
<li>
<p><strong>visible</strong> Default value, the box is visible.</p>
</li>
<li>
<p><strong>hidden</strong> The box is invisible (fully transparent, nothing is drawn), but still affects layout. Descendants of the element will be visible if they have visibility:visible (this doesn&#39;t work in IE up to version 7).</p>
</li>
<li>
<p><strong>collapse</strong> For table rows, columns, column groups, and row groups the row(s) or column(s) are hidden and the space they would have occupied is removed (as if display: none were applied to the column/row of the table). However, the size
of other rows and columns is still calculated as though the cells in the collapsed row(s) or column(s) are present. This was designed for fast removal of a row/column from a table without having to recalculate widths and heights for every portion of the
table. For XUL elements, the computed size of the element is always zero, regardless of other styles that would normally affect the size, although margins still take effect. For other elements, collapse is treated the same as hidden.</p>
</li>
</ul>
</blockquote>
<p>前两个比较常见，<code>hidden</code> 依然是占位置的所以属于渲染。</p>
<p><span class="github-emoji" title=":white_check_mark:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/2705.png?v7">&#x2705;</span> <code>collapse</code> 是专门为表格行列元素快速隐藏做优化的，对它们来说效果等同于 <code>display: none</code>，所以会影响滚动高度。</p>
<p>于是后半段代码相当于找出下面几种元素，然后看是不是 <code>collapse</code> 的：</p>
<p></p>
<figure class="highlight css">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="selector-tag">display</span>: <span class="selector-tag">table-column</span>;</div><div class="line"><span class="selector-tag">display</span>: <span class="selector-tag">table-column-group</span>;</div><div class="line"><span class="selector-tag">display</span>: <span class="selector-tag">table-footer-group</span>;</div><div class="line"><span class="selector-tag">display</span>: <span class="selector-tag">table-header-group</span>;</div><div class="line"><span class="selector-tag">display</span>: <span class="selector-tag">table-row</span>;</div><div class="line"><span class="selector-tag">display</span>: <span class="selector-tag">table-row-group</span>;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h1 id="总结">
<a href="#总结" class="headerlink" title="总结"></a>总结</h1>
<p>可以看到这个 polyfill 代码虽然不算太长，但也干了很多事情，算是比较重的。但考虑到还在用老浏览器的人，能用就很给面子了是吧哈哈。从中也学了许多新知识，都打钩了注意到了吗 <span class="github-emoji" title=":smile:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png?v7">&#x1f604;</span> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天看了&lt;a href=&quot;https://imququ.com/post/document-scrollingelement-in-chrome.html&quot; target=&quot;_blank&quot;&gt;这篇文章&lt;/a&gt;，讲到 WebKit &lt;code&gt;document.body.scr
    
    </summary>
    
      <category term="闲读源码" scheme="https://blog.crimx.com/categories/%E9%97%B2%E8%AF%BB%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="JavaScript" scheme="https://blog.crimx.com/tags/JavaScript/"/>
    
      <category term="闲读源码" scheme="https://blog.crimx.com/tags/%E9%97%B2%E8%AF%BB%E6%BA%90%E7%A0%81/"/>
    
      <category term="Browser" scheme="https://blog.crimx.com/tags/Browser/"/>
    
      <category term="Polyfill" scheme="https://blog.crimx.com/tags/Polyfill/"/>
    
  </entry>
  
  <entry>
    <title>理解 Anki 基础概念</title>
    <link href="https://blog.crimx.com/2016/03/20/understanding-anki/"/>
    <id>https://blog.crimx.com/2016/03/20/understanding-anki/</id>
    <published>2016-03-19T16:00:00.000Z</published>
    <updated>2017-02-26T04:18:41.822Z</updated>
    
    <content type="html"><![CDATA[<p>在尝试了 Anki 、 SuperMemo 、 Quizlet 和 Memrise 之后，最后选用了 Anki。</p>
<p>Anki 是一个卡片记忆系统，基于 <a href="https://www.supermemo.com" target="_blank">SuperMemo</a> 老版的 SM2 算法，在实用性和有效性方面做了很好的平衡。简洁的界面，全平台免费同步，用 HTML 和 CSS 做模板，导入导出非常灵活，很适合程序员使用。</p>
<p>Anki 跟其它几个系统一样，都引入了自身的一套理念，不理解的话用起来就会无从下手。看了<a href="http://ankisrs.net/docs/manual.html" target="_blank">官方的文档</a>后，解决了很多疑惑和误解，并试图在本文用自己的理解总结一遍。<strong>但这篇文章不是操作说明书</strong>，如何操作这个网上已经有很多中文资料和视频，就不重复劳动了。</p>
<p>可以把 Anki 的使用分成四个步骤：</p>
<ol>
<li>得到问题</li>
<li>录入数据</li>
<li>使用卡片</li>
<li>循环记忆</li>
</ol>
<p>主要需要理解前两个。</p>
<h2 id="得到问题">
<a href="#得到问题" class="headerlink" title="得到问题"></a>得到问题</h2>
<p>把想要记忆的材料整理出一道道“问题-答案”对，参照 <a href="https://www.supermemo.com/en/articles/20rules" target="_blank">SuperMemo 的 20 条规则</a>。</p>
<p>这些规则核心的概念是</p>
<p><a href="https://www.supermemo.com/en/articles/20rules#Do not learn if you do not understand" target="_blank">1、先理解再记忆</a>。</p>
<p><a href="https://www.supermemo.com/en/articles/20rules#minimum information principle" target="_blank">4、最小信息原则</a>。这个规则与 <a href="https://www.supermemo.com/en/articles/20rules#Avoid sets" target="_blank">9、避免使用集合</a>和
<a href="https://www.supermemo.com/en/articles/20rules#Enumerations" target="_blank">10、避免使用枚举</a>都是一个道理：保证每次的答案都是固定的，不一定是一模一样，但必须是有固定的顺序，且尽可能的细化，这样可以减少无必要的记忆负担，提高重复记忆的效果。</p>
<p><a href="https://www.supermemo.com/en/articles/20rules#Use imagery" target="_blank">6、使用图像</a>、 <a href="https://www.supermemo.com/en/articles/20rules#mnemonic techniques" target="_blank">7、使用思维导图</a>和
<a href="https://www.supermemo.com/en/articles/20rules#Personalize and provide examples" target="_blank">14、私人化定制例子</a> 提到了耳熟能详的右脑记忆和联想记忆。</p>
<p><a href="https://www.supermemo.com/en/articles/20rules#Cloze deletion" target="_blank">5、填空题</a> 以及变种 <a href="https://www.supermemo.com/en/articles/20rules#Graphic deletion" target="_blank">8、图像填空题</a>提到了填空题的好处。Anki 有自己的一套方式录入填空题，后面会提到。</p>
<h2 id="录入数据">
<a href="#录入数据" class="headerlink" title="录入数据"></a>录入数据</h2>
<p>录入数据最常用的方法就是在软件的上一条条的填入，但 Anki 提供了更方便的导入方式，结合 HTML 可以更灵活地控制显示方式。但必须注意，导入功能不是为了方便直接使用别人分享的数据；根据先理解再记忆的原则，最好还是手动用文本记录好，然后利用文本编辑器或者编写脚本批量添加样式，最后导入到 Anki 里。</p>
<p>在录入之前需要理解 Anki 数据的一些概念：</p>
<p>Anki 一个最大的亮点就是“用户负责录入数据，Anki 负责生成卡片”。这也是我一开始没有注意并误解了的地方。Anki 将数据和卡片分开提供了巨大的灵活性，可以用一组数据产生不同的卡片。</p>
<h3 id="Cards-和-Decks">
<a href="#Cards-和-Decks" class="headerlink" title="Cards 和 Decks"></a>Cards 和 Decks</h3>
<p><a href="http://ankisrs.net/docs/manual.html#cards" target="_blank">Cards</a> 就是卡片，每张卡片包含了正面和背面，一般正面会放问题，背面放问题和答案，但都是可以改的，很灵活。</p>
<p><a href="http://ankisrs.net/docs/manual.html#decks" target="_blank">Decks</a> 就是牌组，卡片放牌组里面，牌组也可以放牌组里面，方便分类整理，用 <code>::</code> 分隔。</p>
<h3 id="Notes-和-Fields">
<a href="#Notes-和-Fields" class="headerlink" title="Notes 和 Fields"></a>Notes 和 Fields</h3>
<p>Anki 中的数据主要分为 <a href="http://ankisrs.net/docs/manual.html#notes-&amp;-fields" target="_blank">Notes（记录） 和 Fields（字段）</a>。</p>
<p>如果把数据看成表格，字段就是表格的表头，代表了都有什么类型的数据，一条记录就是一组数据，包含了每种字段的一个取值。</p>
<p>使用文本导入时，文本里的一行就是一条记录，每条记录里面的各个字段用分隔符分隔。分隔符可以是逗号、分号或 tab ，Anki 会以第一条记录判断用什么分隔符，并判断有多少个字段。而字段的名称最后在要导入的那个牌组上面设置。</p>
<p>比如记忆英文，可以有三个字段：英文、中文、例句，文本中的一行记录就可以是：<code>Apple; 苹果; I love apple.</code> 。这里就代表了：</p>
<p></p>
<figure class="highlight plain">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
</td>
<td class="code">
<pre><div class="line">英文: Apple</div><div class="line">中文: 苹果</div><div class="line">例句：I love apple.</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>这样的好处就是可以非常灵活地生成卡片。比如可以将英文作为卡片正面，将中文和例句放在背面；也可以将中文放在正面，英文和例句放在背面。非常的方便。</p>
<p>得到了数据以后，就可以对卡片的样式和类型进行调整。</p>
<h3 id="Card-Types">
<a href="#Card-Types" class="headerlink" title="Card Types"></a>Card Types</h3>
<p>可以将一套卡片统一成一个类型，然后对这个类型套用一个模板去显示。</p>
<h3 id="Note-Types">
<a href="#Note-Types" class="headerlink" title="Note Types"></a>Note Types</h3>
<p>卡片的类型也是可以很方便修改，<a href="https://www.youtube.com/watch?v=5tYObQ3ocrw" target="_blank">这个视频</a>除了介绍添加答案输入，后面还提到了如何改成填空题</p>
<p></p>
<p><iframe width="560" height="315" style="width:100%" src="" data-type="youtube" data-src="//www.youtube.com/embed/5tYObQ3ocrw" frameborder="0" allowfullscreen></iframe></p>
<p></p>
<p>理解了这些基本概念就可以开始使用 Anki 了，遇到了其它问题可以查<a href="http://ankisrs.net/docs/manual.html" target="_blank">文档</a>、<a href="http://ankisrs.net/docs/manual.html#_intro_videos" target="_blank">视频</a>、<a href="https://anki.tenderapp.com/discussions" target="_blank">支持</a>和<a href="http://bbs.ankichina.net/" target="_blank">中文论坛</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在尝试了 Anki 、 SuperMemo 、 Quizlet 和 Memrise 之后，最后选用了 Anki。&lt;/p&gt;
&lt;p&gt;Anki 是一个卡片记忆系统，基于 &lt;a href=&quot;https://www.supermemo.com&quot; target=&quot;_blank&quot;&gt;Sup
    
    </summary>
    
      <category term="Tools" scheme="https://blog.crimx.com/categories/Tools/"/>
    
    
      <category term="Recommended" scheme="https://blog.crimx.com/tags/Recommended/"/>
    
      <category term="Anki" scheme="https://blog.crimx.com/tags/Anki/"/>
    
      <category term="GTD" scheme="https://blog.crimx.com/tags/GTD/"/>
    
      <category term="Time Management" scheme="https://blog.crimx.com/tags/Time-Management/"/>
    
      <category term="Todo List" scheme="https://blog.crimx.com/tags/Todo-List/"/>
    
  </entry>
  
  <entry>
    <title>路由器时间同步服务器</title>
    <link href="https://blog.crimx.com/2016/02/13/router-time-reset/"/>
    <id>https://blog.crimx.com/2016/02/13/router-time-reset/</id>
    <published>2016-02-12T16:00:00.000Z</published>
    <updated>2016-12-28T11:04:31.641Z</updated>
    
    <content type="html"><![CDATA[<p>最近路由器重启了之后时间总是卡在 1970 年不能自动同步。还以为是路由器哪里设置错了，后来发现应该是同步服务器连不上，换了<a href="https://www.douban.com/note/171309770/" target="_blank">新的服务器</a>好了，摘下一些常用的列表：</p>
<ul>
<li>ntp.sjtu.edu.cn 202.120.2.101 (上海交通大学网络中心NTP服务器地址）</li>
<li>s1a.time.edu.cn 北京邮电大学</li>
<li>s1b.time.edu.cn 清华大学</li>
<li>s1c.time.edu.cn 北京大学</li>
<li>s1d.time.edu.cn 东南大学</li>
<li>s1e.time.edu.cn 清华大学</li>
<li>s2a.time.edu.cn 清华大学</li>
<li>s2b.time.edu.cn 清华大学</li>
<li>s2c.time.edu.cn 北京邮电大学</li>
<li>s2d.time.edu.cn 西南地区网络中心</li>
<li>s2e.time.edu.cn 西北地区网络中心</li>
<li>s2f.time.edu.cn 东北地区网络中心</li>
<li>s2g.time.edu.cn 华东南地区网络中心</li>
<li>s2h.time.edu.cn 四川大学网络管理中心</li>
<li>s2j.time.edu.cn 大连理工大学网络中心</li>
<li>s2k.time.edu.cn CERNET桂林主节点</li>
<li>s2m.time.edu.cn 北京大学</li>
</ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近路由器重启了之后时间总是卡在 1970 年不能自动同步。还以为是路由器哪里设置错了，后来发现应该是同步服务器连不上，换了&lt;a href=&quot;https://www.douban.com/note/171309770/&quot; target=&quot;_blank&quot;&gt;新的服务器&lt;/a&gt;好
    
    </summary>
    
      <category term="Tools" scheme="https://blog.crimx.com/categories/Tools/"/>
    
    
      <category term="Time" scheme="https://blog.crimx.com/tags/Time/"/>
    
      <category term="Router" scheme="https://blog.crimx.com/tags/Router/"/>
    
  </entry>
  
  <entry>
    <title>理解 Prototype</title>
    <link href="https://blog.crimx.com/2015/05/14/understanding-prototype/"/>
    <id>https://blog.crimx.com/2015/05/14/understanding-prototype/</id>
    <published>2015-05-13T16:00:00.000Z</published>
    <updated>2016-12-28T11:04:11.296Z</updated>
    
    <content type="html"><![CDATA[<p>Prototype 初看很好理解，实际上很容易混淆。而且因为不影响平时使用，一直没用动力去了解，长时间都是在一知半解的状态。</p>
<h2 id="混淆">
<a href="#混淆" class="headerlink" title="混淆"></a>混淆</h2>
<p>混淆主要是因为 <code>[[prototype]]</code> 和 <code>prototype</code> 名字长得太像。看回以前总结的模拟继承<a href="/2014/07/27/javascript-inheritance">笔记</a>，基本就是照搬书，压根没搞清楚。</p>
<p>首先是 <code>[[prototype]]</code>， <strong>每个对象</strong>都会有 <code>[[prototype]]</code>属性，它的本质就是指向另外一个对象。</p>
<p>然后是 <code>prototype</code>。<code>prototype</code> 是 <code>function</code> 对象特有的属性。每个 <code>function</code> 都有一个 <code>prototype</code>（同时也会有 <code>[[prototype]]</code>）。<code>prototype</code> 里有个叫 <code>constructor</code> 的属性，一般情况下就是指回这个 <code>function</code>。</p>
<h2 id="获取">
<a href="#获取" class="headerlink" title="获取"></a>获取</h2>
<p>ES5 提供 <code>Object.getPrototypeOf()</code> 方法来获取一个对象的 <code>[[prototype]]</code>；也可以访问 <code>Object.prototype.__proto__</code>，而且这个很早就存在了，但在 ES2015 才标准化。</p>
<h2 id="创建">
<a href="#创建" class="headerlink" title="创建"></a>创建</h2>
<h3 id="New">
<a href="#New" class="headerlink" title="New"></a>New</h3>
<p>当 <code>new</code> 一个 <code>function</code> 的时候，返回的那个新对象里的 <code>[[prototype]]</code> 就会指向这个 <code>function</code> 的 <code>prototype</code>。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person()</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.getPrototypeOf(p) === Person.prototype <span class="comment">// true</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h3 id="Object-create">
<a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h3>
<p>ES5 提供了 <code>Object.create()</code> 方法来创建对象，它的第一个参数就是 <code>prototype</code> ，创建的新对象的 <code>[[prototype]]</code> 会指向这个参数。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">Object</span>.create(obj)) === obj <span class="comment">// true</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>在《JavaScript高级程序设计》提到了这个方法的 polyfill ，当然，当时也是糊里糊涂地跟着实现了一遍，不怎么明白。</p>
<p>这里需要理解 <code>Object.create()</code> 干了什么。它返回了一个对象，这个对象可以指定 <code>[[prototype]]</code>。</p>
<p>在 ES2015 之前只能通过 <code>new</code> 来赋予一个对象 <code>[[prototype]]</code>。</p>
<p>所以这个 polyfill 的核心思想就是利用一个空函数来改梁换柱。下面是简化的代码：</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span> (<span class="params">proto<span class="regexp">/* , 第二个参数 */</span></span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  <span class="keyword">var</span> Fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line">  Fn.prototype = proto || &#123;&#125;</div><div class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> Fn()</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  <span class="keyword">return</span> obj</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;&#125;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.getPrototypeOf(create(obj)) === obj <span class="comment">// true</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h3 id="Object-setPrototypeOf">
<a href="#Object-setPrototypeOf" class="headerlink" title="Object.setPrototypeOf()"></a>Object.setPrototypeOf()</h3>
<p>ES2015 增加了 <code>Object.setPrototypeOf()</code> 来设定对象的 <code>[[prototype]]</code>，但是尽量不要用，可能会有<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf" target="_blank">性能问题</a>。</p>
<h2 id="判断">
<a href="#判断" class="headerlink" title="判断"></a>判断</h2>
<p><code>instanceof</code> 和 <code>isPrototypeOf()</code> 都可以判断，但两者不一样。</p>
<p><code>object instanceof constructor</code> 沿着 <code>constructor.prototype</code> 来搜。也就是说 <code>constructor</code> 只能是函数。</p>
<p><code>prototypeObj.isPrototypeOf(object)</code> 是基于对象，不一定是函数。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Father()</div><div class="line"></div><div class="line">f <span class="keyword">instanceof</span> Father <span class="comment">// true</span></div><div class="line">f <span class="keyword">instanceof</span> Father.prototype <span class="comment">// Error</span></div><div class="line">Father.prototype.isPrototypeOf(f) <span class="comment">// true</span></div><div class="line">Father.isPrototypeOf(f) <span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line">Child.prototype = f</div><div class="line"></div><div class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Child()</div><div class="line">c <span class="keyword">instanceof</span> Father <span class="comment">// true</span></div><div class="line">c <span class="keyword">instanceof</span> f <span class="comment">// Error</span></div><div class="line">f.isPrototypeOf(c) <span class="comment">// true</span></div><div class="line">Father.isPrototypeOf(c) <span class="comment">// fasle</span></div><div class="line">Father.prototype.isPrototypeOf(f) <span class="comment">// true</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="继承">
<a href="#继承" class="headerlink" title="继承"></a>继承</h2>
<p><code>Child.prototype = Father.prototype</code> 不久好了么，收工。</p>
<p>这里的问题看出来了么。这种方式最大的问题是当在 <code>Child</code> 的 <code>prototype</code> 上增加一些属性的时候，会影响到 <code>Father</code> 去了，因为它们是同个对象。</p>
<p>那好吧，<code>Child.prototype = new Father()</code> 搞定。</p>
<p>这里的问题就更隐蔽一些。首先，我们只想要 <code>prototype</code>，这种方式会返回 <code>Father</code> 的一个对象，可能会增加一些没必要的属性；其次，<code>Father</code> 本质是一个函数，如果在 <code>Father</code> 里如果做了其它一些操作，比如改变了闭包或者全局变量什么的，<code>new</code> 的时候就会执行，有时候我们不希望这样。</p>
<p>所以，更好的方法就是用 <code>Object.create()</code> 创建一个 <code>[[prototype]]</code> 指向父类 <code>prototype</code> 的对象，然后再手动指定 <code>constructor</code>。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line">Father.prototype.isHandsome = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line">Child.prototype = <span class="built_in">Object</span>.create(Father.prototype)</div><div class="line">Child.prototype.constructor = Child</div><div class="line"></div><div class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Child()</div><div class="line"></div><div class="line">c.isHandsome() <span class="comment">// true</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>[完]</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Prototype 初看很好理解，实际上很容易混淆。而且因为不影响平时使用，一直没用动力去了解，长时间都是在一知半解的状态。&lt;/p&gt;
&lt;h2 id=&quot;混淆&quot;&gt;
&lt;a href=&quot;#混淆&quot; class=&quot;headerlink&quot; title=&quot;混淆&quot;&gt;&lt;/a&gt;混淆&lt;/h2&gt;
&lt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.crimx.com/categories/JavaScript/"/>
    
    
      <category term="Understanding JavaScript" scheme="https://blog.crimx.com/tags/Understanding-JavaScript/"/>
    
      <category term="Recommended" scheme="https://blog.crimx.com/tags/Recommended/"/>
    
      <category term="Prototype" scheme="https://blog.crimx.com/tags/Prototype/"/>
    
  </entry>
  
</feed>
