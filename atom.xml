<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CRIMX</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.crimx.com/"/>
  <updated>2016-12-31T18:50:16.914Z</updated>
  <id>https://blog.crimx.com/</id>
  
  <author>
    <name>StrayBugs</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>新年新博客！</title>
    <link href="https://blog.crimx.com/2017/01/01/new-blog-released/"/>
    <id>https://blog.crimx.com/2017/01/01/new-blog-released/</id>
    <published>2016-12-31T16:00:00.000Z</published>
    <updated>2016-12-31T18:50:16.914Z</updated>
    
    <content type="html"><![CDATA[<p>新博客终于写完啦！给心血们搬了个漂漂亮亮的新家。</p>
<p><a href="/about">关于这个博客</a> <span class="github-emoji" title=":point_left:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f448.png?v7">&#x1f448;</span>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新博客终于写完啦！给心血们搬了个漂漂亮亮的新家。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/about&quot;&gt;关于这个博客&lt;/a&gt; &lt;span class=&quot;github-emoji&quot; title=&quot;:point_left:&quot; data-src=&quot;https://assets-cdn.
    
    </summary>
    
      <category term="News" scheme="https://blog.crimx.com/categories/News/"/>
    
    
  </entry>
  
  <entry>
    <title>Progressive Background-Image With Ease</title>
    <link href="https://blog.crimx.com/2016/12/26/progressive-background-image/"/>
    <id>https://blog.crimx.com/2016/12/26/progressive-background-image/</id>
    <published>2016-12-25T16:00:00.000Z</published>
    <updated>2016-12-30T12:30:16.625Z</updated>
    
    <content type="html"><![CDATA[<p>Everyone likes smooth loading. Lately I tried to make the <code>background-image</code> of the menu to load progressively(also to the cover if you view the blog on mobile).</p>
<p>If you take a look at how <a href="https://medium.com/" target="_blank">Medium</a> does progressive image loading(or check out <a href="https://jmperezperez.com/medium-image-progressive-loading-placeholder/" target="_blank">this article</a>), you&#39;ll
  notice that they use JavaScript and canvas to blur and store thumbnails. It seems a bit overkill to me. And when you need to do it on a <code>background-image</code> with <code>background-position</code>, things become even more complicated.</p>
<p>So I needed to figure out a simpler solution. Here&#39;s what I came up with:</p>
<h2 id="Blur-by-default">
  <a href="#Blur-by-default" class="headerlink" title="Blur by default"></a>Blur by default</h2>
<p>As the article above mentioned:</p>
<blockquote>
  <p>By default, when a browser renders a small image scaled up, it applies a light blur effect to smooth the artefacts of the image. The effect can also be <a href="https://developers.google.com/web/updates/2015/01/pixelated" target="_blank">turned off</a>    for images like QR codes.</p>
</blockquote>
<p>But the default blur effect still feels blocky.</p>
<p></p>
<p><img src="/images/post/pexels-photo-24343-blocky-thumbnail.jpg" alt="thumbnail" style="width:100%"></p>
<p></p>
<p>To make it smoother, I applied blur effect to the thumbnails while generating them, using <a href="https://github.com/aheckmann/gm" target="_blank">GraphicsMagick for node</a>:</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">const</span> gm = <span class="built_in">require</span>(<span class="string">'gm'</span>)</div><div class="line"></div><div class="line">gm(coverPath)</div><div class="line">  .resize(<span class="number">30</span>) <span class="comment">// or .resize(null, 30) for portrait</span></div><div class="line">  .blur(<span class="number">5</span>)</div><div class="line">  .noProfile()</div><div class="line">  .write(thumbnailPath, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123; <span class="built_in">console</span>.warn(err) &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;)</div><div class="line"></div><div class="line"><span class="comment">// or to base64</span></div><div class="line">gm(coverPath)</div><div class="line">  .resize(<span class="number">30</span>) <span class="comment">// or .resize(null, 30) for portrait</span></div><div class="line">  .blur(<span class="number">5</span>)</div><div class="line">  .noProfile()</div><div class="line">  .toBuffer(<span class="function"><span class="keyword">function</span> (<span class="params">err, buffer</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123; <span class="built_in">console</span>.warn(err) &#125;</div><div class="line">    <span class="keyword">var</span> base64 = <span class="string">'data:image/'</span> + ext + <span class="string">';base64,'</span> + buffer.toString(<span class="string">'base64'</span>)</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p></p>
<p><img src="/images/cover/thumbnails/pexels-photo-24343.jpg" alt="thumbnail" style="width:100%"></p>
<p></p>
<p>This looks acceptable to me. No need for a canvas or blur function. Already felt relieved! <span class="github-emoji" title=":smile:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png?v7">&#x1f604;</span></p>
<h2 id="Layers">
  <a href="#Layers" class="headerlink" title="Layers"></a>Layers</h2>
<p>This method divides a component into four layers: container, thumbnail, mask and content.</p>
<ul>
  <li>Container holds the full-size background image.</li>
  <li>Thumbnail holds the blur thumbnail, as <code>background-image</code>.</li>
  <li>Mask is a translucent black element, to darken the background.</li>
  <li>Everything else lives in the content layer.</li>
</ul>
<p>Use <code>z-index</code> to separate the layers.</p>
<h2 id="Image-onload">
  <a href="#Image-onload" class="headerlink" title="Image onload"></a>Image onload</h2>
<p>When full-size image is loaded, hide the thumbnail. You can use this technic(with jQuery/Zepto):</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">var</span> $container = $(<span class="string">'.container'</span>)</div><div class="line"><span class="comment">// Matchs the "url(...)"</span></div><div class="line"><span class="keyword">var</span> bigBgSrc = $container.css(<span class="string">'background-image'</span>).match(<span class="regexp">/url\((.+?)\)/i</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> (bigBgSrc) &#123;</div><div class="line">  <span class="comment">// Removes quotations</span></div><div class="line">  bigBgSrc = bigBgSrc[<span class="number">1</span>].replace(<span class="regexp">/'|"/g</span>, <span class="string">''</span>)</div><div class="line"></div><div class="line">  $(<span class="string">'&lt;img&gt;'</span>)</div><div class="line">    .on(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      $container.find(<span class="string">'.thumbnail'</span>)</div><div class="line">        .addClass(<span class="string">'thumbnail--hide'</span>) <span class="comment">// Hides thumbnail</span></div><div class="line">    &#125;)</div><div class="line">    .prop(<span class="string">'src'</span>, bigBgSrc)</div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>A live example:</p>
<p></p>
<p>
  <iframe class="iframe-defer" height="437" scrolling="no" title="Progressive background-image Loading" src="" data-src="//codepen.io/straybugs/embed/preview/gLJyXW/?height=437&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width:100%">See the Pen <a href="http://codepen.io/straybugs/pen/gLJyXW/" target="_blank">Progressive background-image Loading</a> by CrimX (<a href="http://codepen.io/straybugs" target="_blank">@straybugs</a>) on <a href="http://codepen.io" target="_blank">CodePen</a>.</iframe>
</p>
<p></p>
<h2 id="No-js">
  <a href="#No-js" class="headerlink" title="No-js"></a>No-js</h2>
<p>No-js support is extremely easy. Just hide the thumbnail.</p>
<p></p>
<figure class="highlight css">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="selector-tag">html</span><span class="selector-class">.no-js</span> <span class="selector-class">.thumbnail</span> &#123;</div><div class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>For my blog I also made a <a href="https://github.com/crimx/blog/blob/master/themes/crimx/source/_scss/libs/_progressive-background-image.scss" target="_blank">Sass Mixin/Extend</a> with this method.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Everyone likes smooth loading. Lately I tried to make the &lt;code&gt;background-image&lt;/code&gt; of the menu to load progressively(also to the cov
    
    </summary>
    
      <category term="Tools" scheme="https://blog.crimx.com/categories/Tools/"/>
    
    
      <category term="Recommended" scheme="https://blog.crimx.com/tags/Recommended/"/>
    
      <category term="Image" scheme="https://blog.crimx.com/tags/Image/"/>
    
      <category term="Progressive Image" scheme="https://blog.crimx.com/tags/Progressive-Image/"/>
    
      <category term="GraphicsMagick" scheme="https://blog.crimx.com/tags/GraphicsMagick/"/>
    
  </entry>
  
  <entry>
    <title>在博客上使用 Emoji</title>
    <link href="https://blog.crimx.com/2016/12/23/emojis-for-blog/"/>
    <id>https://blog.crimx.com/2016/12/23/emojis-for-blog/</id>
    <published>2016-12-22T16:00:00.000Z</published>
    <updated>2016-12-30T12:14:00.057Z</updated>
    
    <content type="html"><![CDATA[<p>Emoji 都要出电影了，博客怎么能不用。奇怪的是 hexo 上只有一个插件，要在文中添加 tag，还不支持 hexo3 。我不太喜欢在 markdown 里加各种 tag，所以就打算自己再写个插件。</p>
<p>Github 对 emoji 的支持就很好，所以去观摩了一下。它在生成网页的时候将关键字替换成 emoji 的 unicode 字符，然后再利用 JavaScript 将字符替换成图片，这样即使图片加载失败还有字符 fallback。</p>
<p>于是就参考这种方式写了 <a href="https://github.com/crimx/hexo-filter-github-emojis" target="_blank">hexo-filter-github-emojis</a> <span class="github-emoji" title=":tada:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f389.png?v7">&#x1f389;</span>。</p>
<p>用法与 Github 一样，效果还不错吧 <span class="github-emoji" title=":smile:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png?v7">&#x1f604;</span>。</p>
<blockquote>
  <p><span class="github-emoji" title=":speedboat:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f6a4.png?v7">&#x1f6a4;</span><br>&nbsp; <span class="github-emoji" title=":tropical_fish:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f420.png?v7">&#x1f420;</span></p>
  <p><br><br><br><br><br></p>
  <p>&emsp;&emsp;&emsp;&emsp; <span class="github-emoji" title=":octopus:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f419.png?v7">&#x1f419;</span><span class="github-emoji" title=":dolphin:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f42c.png?v7">&#x1f42c;</span><span class="github-emoji" title=":fish:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f41f.png?v7">&#x1f41f;</span><br>&emsp;&emsp;&emsp;&emsp; <i>&quot;He touched the butt!&quot;</i></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Emoji 都要出电影了，博客怎么能不用。奇怪的是 hexo 上只有一个插件，要在文中添加 tag，还不支持 hexo3 。我不太喜欢在 markdown 里加各种 tag，所以就打算自己再写个插件。&lt;/p&gt;
&lt;p&gt;Github 对 emoji 的支持就很好，所以去观摩了一
    
    </summary>
    
      <category term="Technics" scheme="https://blog.crimx.com/categories/Technics/"/>
    
    
      <category term="Recommended" scheme="https://blog.crimx.com/tags/Recommended/"/>
    
      <category term="Image" scheme="https://blog.crimx.com/tags/Image/"/>
    
      <category term="Emoji" scheme="https://blog.crimx.com/tags/Emoji/"/>
    
      <category term="Hexo" scheme="https://blog.crimx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>SVG Symbol 和 Sprite 的好处和坑</title>
    <link href="https://blog.crimx.com/2016/11/28/svg-sprite/"/>
    <id>https://blog.crimx.com/2016/11/28/svg-sprite/</id>
    <published>2016-11-27T16:00:00.000Z</published>
    <updated>2016-12-30T12:32:20.306Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SVG-Symbol">
  <a href="#SVG-Symbol" class="headerlink" title="SVG Symbol"></a>SVG Symbol</h1>
<p>用 Symbol 来把 SVG 合并到一个文件几乎是现在最流行的用法。</p>
<h2 id="Symbol-好处">
  <a href="#Symbol-好处" class="headerlink" title="Symbol 好处"></a>Symbol 好处</h2>
<h3 id="方便">
  <a href="#方便" class="headerlink" title="方便"></a>方便</h3>
<p>利用 ID 来取图案，所以不用各种计算，可以随便放。</p>
<h3 id="反复利用">
  <a href="#反复利用" class="headerlink" title="反复利用"></a>反复利用</h3>
<p>这应该是一个不太容易发现的好处，你可以在文件内部继续用<code>&lt;use&gt;</code>来做图案的各种版本。这样 SVG 的优势更加明显，节省了好多空间。</p>
<p>比如这个博客里用到的社交图案，原本的是只有图案本身。例如这是 Codepen 的图案：</p>
<p></p>
<figure class="highlight html">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">"icon-codepen"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 32 32"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>codepen<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">class</span>=<span class="string">"icon-path"</span> <span class="attr">d</span>=<span class="string">"M17.050 1.259c-0.882-0.546-2.016-0.546-2.855 0.042l-12.764 8.649c-0.672 0.462-1.092 1.218-1.092 2.016v9.321c0 0.84 0.42 1.596 1.134 2.057l12.974 8.355c0.84 0.546 1.931 0.546 2.813 0l13.226-8.482c0.714-0.462 1.134-1.218 1.134-2.057v-9.153c0-0.84-0.42-1.596-1.134-2.057l-13.436-8.691zM26.959 11.378l-4.87 3.191-4.576-3.233-0.042-6.382 9.489 6.424zM14.11 4.954v6.256l-4.702 3.191-4.702-3.065 9.405-6.382zM3.446 14.401l3.023 1.973-3.023 2.057v-4.031zM14.195 27.753l-9.447-6.172 4.744-3.233 4.744 3.107c-0.042 0-0.042 6.298-0.042 6.298zM12.389 16.332l3.065-2.099 3.569 2.267-3.149 2.099-3.485-2.267zM17.553 27.753v-6.298l4.535-2.939 4.87 3.107-9.405 6.13zM28.302 18.557l-3.233-2.057 3.233-2.099v4.157z"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>现在直接在文章里<code>&lt;use&gt;</code>：</p>
<p></p>
<figure class="highlight html">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">fill</span>=<span class="string">"#000"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">"/images/symbol-defs.svg#icon-codepen"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>就是这个效果:</p>
<p></p>
<p style="text-align:center;max-height:150px"><svg fill="#000"><use xlink:href="/images/symbol-defs.svg#icon-codepen"/></svg></p>
<p></p>
<p>在<code>symbol-defs.svg</code>里还有它的另外一个版本，带圆圈的，只需要添加几行就可以：</p>
<p></p>
<figure class="highlight html">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">"icon-codepen-circle"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 32 32"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>codepen<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"50%"</span> <span class="attr">cy</span>=<span class="string">"50%"</span> <span class="attr">r</span>=<span class="string">"50%"</span> <span class="attr">fill</span>=<span class="string">"#000"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">"#icon-codepen"</span> <span class="attr">width</span>=<span class="string">"20"</span> <span class="attr">x</span>=<span class="string">"6"</span> <span class="attr">fill</span>=<span class="string">"#fff"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>同样的使用方式，既环保又方便：</p>
<p></p>
<p style="text-align:center;max-height:150px"><svg fill="#000"><use xlink:href="/images/symbol-defs.svg#icon-codepen-circle"/></svg></p>
<p></p>
<h2 id="Symbol-坏处">
  <a href="#Symbol-坏处" class="headerlink" title="Symbol 坏处"></a>Symbol 坏处</h2>
<h3 id="不完全支持">
  <a href="#不完全支持" class="headerlink" title="不完全支持"></a>不完全支持</h3>
<p>这种方式并不完全支持 SVG 的各种特性。比如我开始就踩到了一个坑。我的 LOGO 里使用了<code>clippath</code>，使用这种方式就会失去效果。这个貌似是个<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=109212" target="_blank">陈年老 bug</a> 来的。</p>
<p>解决方式就是利用工具合并路径，最好还压缩成一条，方便管理。编辑工具推荐 <a href="https://boxy-svg.com/main.html#download" target="_blank">Boxy SVG</a>，生成的代码非常轻盈，而且尽可能保留原来的样子，不会像 Illustrator 一样源码面目全非。压缩工具推荐 <a href="https://jakearchibald.github.io/svgomg/" target="_blank">SVGOMG!</a>，号称
  <a href="https://github.com/svg/svgo" target="_blank">SVGO</a>&#39;s Missing GUI。</p>
<h3 id="奇怪的宽高">
  <a href="#奇怪的宽高" class="headerlink" title="奇怪的宽高"></a>奇怪的宽高</h3>
<p>在宽和高是百分比的情况下，会出现跟<code>&lt;img&gt;</code>或者普通<code>&lt;svg&gt;</code>不一样的计算。有时高空出一段，有时宽空出一段。</p>
<p>这个我纠结了很久，没有找到原因。我猜是受到原本整个 SVG 的影响。</p>
<p>解决方法是用相同宽高比的父<code>&lt;div&gt;</code>来限制；或者不用百分比。</p>
<h3 id="慢">
  <a href="#慢" class="headerlink" title="慢"></a>慢</h3>
<p>因为零部件是可以<code>&lt;use&gt;</code>的，所以引擎不能像图片一样直接解析完就一整块到处扔。</p>
<p>虽然这个延时非常的小，一般几乎感觉不到，但是如果像这个博客左边的菜单栏一样（电脑上），在每个页面都是同样的元素，那么切换页面的时候就可以肉眼感受到图案的闪动。这种情况就只能放弃使用 Symbol。可以考虑单独一张 SVG 图片或者：<span class="github-emoji" title=":point_down:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f447.png?v7">&#x1f447;</span></p>
<h1 id="SVG-Sprite">
  <a href="#SVG-Sprite" class="headerlink" title="SVG Sprite"></a>SVG Sprite</h1>
<p>SVG Sprite 与以前的 PNG Sprite 一样，把图案按一定方式平铺到一张大图片上。</p>
<h2 id="Sprite-好处">
  <a href="#Sprite-好处" class="headerlink" title="Sprite 好处"></a>Sprite 好处</h2>
<h3 id="对齐">
  <a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3>
<p>SVG 不受大小限制，所以 Sprite 可以按统一的规格排列。</p>
<p>取的时候也不受大小限制，利用百分比来取。</p>
<p>比如这个博客左边菜单的图案就是 SVG Sprite，<a href="https://github.com/crimx/blog/blob/master/themes/crimx/source/_scss/libs/_svg-icons.scss" target="_blank">利用 Sass 自动计算百分比</a>。</p>
<h3 id="快">
  <a href="#快" class="headerlink" title="快"></a>快</h3>
<p>这种方式与普通图片一样肉眼看不到延时，而且还结合了 SVG 不受大小限制的优势。</p>
<h2 id="Sprite-坏处">
  <a href="#Sprite-坏处" class="headerlink" title="Sprite 坏处"></a>Sprite 坏处</h2>
<h3 id="添加麻烦">
  <a href="#添加麻烦" class="headerlink" title="添加麻烦"></a>添加麻烦</h3>
<p>图案受位置影响，当然没有 Symbol 方法来得方便。</p>
<p>因为需要快速显示的图案不多，我是利用 <a href="https://boxy-svg.com/main.html#download" target="_blank">Boxy SVG</a> 一个一个添加的。</p>
<p>不太用心的查过一下，没注意到有合适的自动化工具。</p>
<p>能用 Symbol 的当然优先使用 Symbol 方法，所以 Sprite 用的也不多，手动添加可以满足。</p>
<h3 id="有误差">
  <a href="#有误差" class="headerlink" title="有误差"></a>有误差</h3>
<p>使用百分比因为受小数影响，图案会有<code>1px</code>浮动，当然这个<code>1px</code>是根据图案当前大小得出的，所以越小图案浮动的位置越大。</p>
<p>解决方法有两个，一是避免产生小数，按倍数来设置图案大小；二是按图案最小的情况计算出血，把图案缩小空出足够位置。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SVG-Symbol&quot;&gt;
  &lt;a href=&quot;#SVG-Symbol&quot; class=&quot;headerlink&quot; title=&quot;SVG Symbol&quot;&gt;&lt;/a&gt;SVG Symbol&lt;/h1&gt;
&lt;p&gt;用 Symbol 来把 SVG 合并到一个文件几乎是现在最流行的用法
    
    </summary>
    
      <category term="SVG" scheme="https://blog.crimx.com/categories/SVG/"/>
    
    
      <category term="Recommended" scheme="https://blog.crimx.com/tags/Recommended/"/>
    
      <category term="Image" scheme="https://blog.crimx.com/tags/Image/"/>
    
      <category term="SVG" scheme="https://blog.crimx.com/tags/SVG/"/>
    
      <category term="Sprite" scheme="https://blog.crimx.com/tags/Sprite/"/>
    
  </entry>
  
  <entry>
    <title>CSS 过渡未知高度</title>
    <link href="https://blog.crimx.com/2016/11/12/transition-display-none/"/>
    <id>https://blog.crimx.com/2016/11/12/transition-display-none/</id>
    <published>2016-11-11T16:00:00.000Z</published>
    <updated>2016-12-30T05:09:26.564Z</updated>
    
    <content type="html"><![CDATA[<p>有时候往 dom 里插入一些元素，会希望 dom 慢慢腾开空间，再把插入的元素呈现出来。</p>
<p>但对于过渡 <code>height</code> 未知的元素，暂时没有完美的方法，浏览器还不支持 <code>height</code> 过渡到 <code>auto</code>。而且这种方式也会造成这个元素后面的所有元素一并重绘，蛮耗资源的。</p>
<p>以下是利用 <code>max-height</code> 来过渡，适合已知元素高度的范围。但也不是完美方法，<code>max-height</code> 固定了，那么同样的时间，元素高度越小过渡就会显得越快。所以只好尽量选最接近的 <code>max-height</code>。</p>
<p></p>
<p><iframe height="300" scrolling="no" title="css transition max-height" src="//codepen.io/straybugs/embed/preview/ObqVBy/?height=300&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width:100%">See the Pen <a href="http://codepen.io/straybugs/pen/ObqVBy/" target="_blank">css transition max-height</a> by CrimX (<a href="http://codepen.io/straybugs" target="_blank">@straybugs</a>) on <a href="http://codepen.io" target="_blank">CodePen</a>.</iframe></p>
<p></p>
<p>写的时候犯了一个小错误，折腾了一会才发现时间 0 忘了加单位。CSS 时间里<code>0</code><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/time" target="_blank">是非法的值</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候往 dom 里插入一些元素，会希望 dom 慢慢腾开空间，再把插入的元素呈现出来。&lt;/p&gt;
&lt;p&gt;但对于过渡 &lt;code&gt;height&lt;/code&gt; 未知的元素，暂时没有完美的方法，浏览器还不支持 &lt;code&gt;height&lt;/code&gt; 过渡到 &lt;code&gt;auto&lt;
    
    </summary>
    
      <category term="CSS" scheme="https://blog.crimx.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://blog.crimx.com/tags/CSS/"/>
    
      <category term="Transition" scheme="https://blog.crimx.com/tags/Transition/"/>
    
  </entry>
  
  <entry>
    <title>Photoshop Pen Tool</title>
    <link href="https://blog.crimx.com/2016/09/25/photoshop-pen-tool/"/>
    <id>https://blog.crimx.com/2016/09/25/photoshop-pen-tool/</id>
    <published>2016-09-24T16:00:00.000Z</published>
    <updated>2016-12-30T05:14:51.121Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://design.tutsplus.com/tutorials/photoshops-pen-tool-the-comprehensive-guide--psd-718" target="_blank">https://design.tutsplus.com/tutorials/photoshops-pen-tool-the-comprehensive-guide--psd-718</a></p>
<p>这篇文章非常好的总结了 PS 钢笔工具的用法，其中的练习 PSD 特别好用，照着画一遍基本就懂得怎么操作锚点。</p>
<p><img src="/images/post/photoshop/photoshop-pen-tool.jpg" alt="photoshop-pen-tool"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://design.tutsplus.com/tutorials/photoshops-pen-tool-the-comprehensive-guide--psd-718&quot; target=&quot;_blank&quot;&gt;https://design.tutsp
    
    </summary>
    
      <category term="Tools" scheme="https://blog.crimx.com/categories/Tools/"/>
    
    
      <category term="Photoshop" scheme="https://blog.crimx.com/tags/Photoshop/"/>
    
  </entry>
  
  <entry>
    <title>自适应封面</title>
    <link href="https://blog.crimx.com/2016/09/11/responsive-cover/"/>
    <id>https://blog.crimx.com/2016/09/11/responsive-cover/</id>
    <published>2016-09-10T16:00:00.000Z</published>
    <updated>2016-12-31T16:56:44.744Z</updated>
    
    <content type="html"><![CDATA[<p>很多时候我们希望背景图片能够在元素不同大小的情况下都能够显示出主体。</p>
<p>居中是最常见的方式，但如果主体不在中间这个效果就大打折扣了。</p>
<p>这个对我来说一开始仅仅是一个念头，也没太注意。直到一次在 podcast 上听到有位嘉宾做了一个 jQuery 插件 <a href="https://github.com/wentin/ResponsifyJS" target="_blank">https://github.com/wentin/ResponsifyJS</a>，主要就是为了实现这种效果。</p>
<p>感兴趣地去看了一下，感觉还是太重了。但我有个缺点就是一旦开始了就不容易停下来，就继续找了一下资料。发现其实浏览器本身就有很好的实现。</p>
<p></p>
<p style="text-align:center;font-size:1.29rem"><span>Background Positon!</span></p>
<p></p>
<p><code>background-position</code> 支持百分比属性。当使用百分比属性的时候，就是将背景图片与元素在百分比指定的位置重合。比如说 <code>20% 40%</code>，在横向上背景图片的 20% 与元素的 20% 对齐，竖向上背景图片的 40% 与元素的 40% 对齐。</p>
<p>这就相当于指定了一个焦点。把焦点放到主体上，那么无论元素怎么变化，主体都会有较好的显示效果。而且这些计算都是浏览器来干的！</p>
<p>现在唯一麻烦的地方就是要指定焦点。我继续找了一些资料，JavaScript 上也有人实现一些 Content Aware 的算法，比如这个 <a href="https://github.com/jwagner/smartcrop.js/" target="_blank">Smartcrop.js</a>。但是由于我没有批量的图片需要调整，就没有折腾去研究这个，而是研究怎么方便手动选择。</p>
<p>后来就做了这个所见即所得工具，<a href="http://www.crimx.com/portrait-crop/" target="_blank">http://www.crimx.com/portrait-crop/</a>，除了标记焦点以外还可以进行竖向的裁剪，节省空间。</p>
<p>移动焦点的时候右边会实时计算 <code>background-position</code>，包括了横向和竖向的结果。不需要裁剪的话只用横向的就行。</p>
<p>右下还提供了 json 格式。我的博客就是为所有封面保存了一个 json 文件，在 hexo 中设钩子去读再作为 inline css 写入。每次添加的时候复制粘贴就可以。</p>
<p>裁剪框是基于 <a href="https://github.com/fengyuanchen/cropperjs" target="_blank">cropperjs</a> 实现的，添加了个焦点。实现的时候还顺便修了 bug 提交了个 pr 给原作者哈哈。</p>
<p><strong>2016年12月31日按</strong>：他今天才 merge …… <span class="github-emoji" title=":sweat_smile:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f605.png?v7">&#x1f605;</span> 都忘记有提过这个 pr 了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多时候我们希望背景图片能够在元素不同大小的情况下都能够显示出主体。&lt;/p&gt;
&lt;p&gt;居中是最常见的方式，但如果主体不在中间这个效果就大打折扣了。&lt;/p&gt;
&lt;p&gt;这个对我来说一开始仅仅是一个念头，也没太注意。直到一次在 podcast 上听到有位嘉宾做了一个 jQuery 插
    
    </summary>
    
      <category term="CSS" scheme="https://blog.crimx.com/categories/CSS/"/>
    
    
      <category term="Recommended" scheme="https://blog.crimx.com/tags/Recommended/"/>
    
      <category term="CSS" scheme="https://blog.crimx.com/tags/CSS/"/>
    
      <category term="Responsive" scheme="https://blog.crimx.com/tags/Responsive/"/>
    
      <category term="Background" scheme="https://blog.crimx.com/tags/Background/"/>
    
  </entry>
  
  <entry>
    <title>Gulp 使用命令号参数</title>
    <link href="https://blog.crimx.com/2016/08/07/gulp-console-arguments/"/>
    <id>https://blog.crimx.com/2016/08/07/gulp-console-arguments/</id>
    <published>2016-08-06T16:00:00.000Z</published>
    <updated>2016-12-30T09:11:54.294Z</updated>
    
    <content type="html"><![CDATA[<p>命令行参数的好处就是方便控制，引用 Stack Overflow 的一个<a href="http://stackoverflow.com/a/23088183" target="_blank">回答</a>：</p>
<blockquote>
  <p>The environment setting is available during all subtasks. So I can use this flag on the watch task too.</p>
</blockquote>
<p>通过 <code>require(&#39;gulp-util&#39;).env</code> 获得参数：</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'gulp-util'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'styles'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src([<span class="string">'src/styles/'</span> + (util.env.theme ? util.env.theme : <span class="string">'main'</span>) + <span class="string">'.scss'</span>])</div><div class="line">    .pipe(compass(&#123;</div><div class="line">        <span class="attr">config_file</span>: <span class="string">'./config.rb'</span>,</div><div class="line">        <span class="attr">sass</span>   : <span class="string">'src/styles'</span>,</div><div class="line">        <span class="attr">css</span>    : <span class="string">'dist/styles'</span>,</div><div class="line">        <span class="attr">style</span>  : <span class="string">'expanded'</span></div><div class="line"></div><div class="line">    &#125;))</div><div class="line">    .pipe(autoprefixer(<span class="string">'last 2 version'</span>, <span class="string">'safari 5'</span>, <span class="string">'ie 8'</span>, <span class="string">'ie 9'</span>, <span class="string">'ff 17'</span>, <span class="string">'opera 12.1'</span>, <span class="string">'ios 6'</span>, <span class="string">'android 4'</span>))</div><div class="line">    .pipe(livereload(server))</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/styles'</span>))</div><div class="line">    .pipe(notify(&#123; <span class="attr">message</span>: <span class="string">'Styles task complete'</span> &#125;));</div><div class="line">&#125;);</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>就可以这么用：</p>
<p></p>
<figure class="highlight bash">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">gulp watch --theme literature</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;命令行参数的好处就是方便控制，引用 Stack Overflow 的一个&lt;a href=&quot;http://stackoverflow.com/a/23088183&quot; target=&quot;_blank&quot;&gt;回答&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;The envir
    
    </summary>
    
      <category term="Tools" scheme="https://blog.crimx.com/categories/Tools/"/>
    
    
      <category term="Gulp" scheme="https://blog.crimx.com/tags/Gulp/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text Title Case 快捷键</title>
    <link href="https://blog.crimx.com/2016/05/27/sublime-text-title-case/"/>
    <id>https://blog.crimx.com/2016/05/27/sublime-text-title-case/</id>
    <published>2016-05-26T16:00:00.000Z</published>
    <updated>2016-12-29T09:24:51.197Z</updated>
    
    <content type="html"><![CDATA[<p>Preferences -&gt; Key Bindings 添加：</p>
<p></p>
<figure class="highlight json">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">[</div><div class="line">  &#123; <span class="attr">"keys"</span>: [<span class="string">"ctrl+k"</span>, <span class="string">"ctrl+t"</span>], <span class="attr">"command"</span>: <span class="string">"title_case"</span> &#125;</div><div class="line">  // .....</div><div class="line">]</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>然后就可以用 <kbd>Ctrl</kbd>+<kbd>k</kbd> 再按下 <kbd>Ctrl</kbd>+<kbd>t</kbd> 使用 Title Case。</p>
<p>Package Control 上有个很老的 Package，Smart Title Case。能识别更复杂的情况，但是有 bug，核心代码已经修复 <a href="https://github.com/ppannuto/python-titlecase" target="_blank">https://github.com/ppannuto/python-titlecase</a>，但 Package 的作者早已不再维护，下载量也不大。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Preferences -&amp;gt; Key Bindings 添加：&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td class=&quot;gutter&quot;&gt;
        &lt;pre&gt;
    
    </summary>
    
      <category term="Tools" scheme="https://blog.crimx.com/categories/Tools/"/>
    
    
      <category term="Sublime Text" scheme="https://blog.crimx.com/tags/Sublime-Text/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript This 的六道坎</title>
    <link href="https://blog.crimx.com/2016/05/12/understanding-this/"/>
    <id>https://blog.crimx.com/2016/05/12/understanding-this/</id>
    <published>2016-05-11T16:00:00.000Z</published>
    <updated>2016-12-30T12:44:23.955Z</updated>
    
    <content type="html"><![CDATA[<p>鉴于<code>this</code>风骚的运作方式，对<code>this</code>的理解是永不过时的话题，本文试图通过将其大卸六块来钉住这个磨人的妖精。</p>
<h1 id="首先">
  <a href="#首先" class="headerlink" title="首先"></a>首先</h1>
<blockquote>
  <p><code>this</code> is all about context.</p>
</blockquote>
<p><code>this</code>说白了就是找大佬，找拥有当前上下文（context）的对象（context object）。</p>
<p>大佬可以分为六层，层数越高权力越大，<code>this</code>只会认最大的。</p>
<h2 id="第一层：世界尽头">
  <a href="#第一层：世界尽头" class="headerlink" title="第一层：世界尽头"></a>第一层：世界尽头</h2>
<p>权力最小的大佬是作为备胎的存在，在普通情况下就是全局，浏览器里就是<code>window</code>；在<code>use strict</code>的情况下就是<code>undefined</code>。</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showThis</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showStrictThis</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="meta">  'use strict'</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">showThis() <span class="comment">// window</span></div><div class="line">showStrictThis() <span class="comment">// undefined</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<h2 id="第二层：点石成金">
  <a href="#第二层：点石成金" class="headerlink" title="第二层：点石成金"></a>第二层：点石成金</h2>
<p>第二层大佬说白了就是找这个函数前面的点<code>.</code>。</p>
<p>如果用到<code>this</code>的那个函数是属于某个 context object 的，那么这个 context object 绑定到<code>this</code>。</p>
<p>比如下面的例子，<code>boss</code>是<code>returnThis</code>的 context object ，或者说<code>returnThis</code>属于<code>boss</code>。</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">var</span> boss = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'boss'</span>,</div><div class="line">  returnThis () &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">boss.returnThis() === boss <span class="comment">// true</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>下面这个例子就要小心点咯，能想出答案么？</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">var</span> boss1 = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'boss1'</span>,</div><div class="line">  returnThis () &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> boss2 = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'boss2'</span>,</div><div class="line">  returnThis () &#123;</div><div class="line">    <span class="keyword">return</span> boss1.returnThis()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> boss3 = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'boss3'</span>,</div><div class="line">  returnThis () &#123;</div><div class="line">    <span class="keyword">var</span> returnThis = boss1.returnThis</div><div class="line">    <span class="keyword">return</span> returnThis()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">boss1.returnThis() <span class="comment">// boss1</span></div><div class="line">boss2.returnThis() <span class="comment">// ?</span></div><div class="line">boss3.returnThis() <span class="comment">// ?</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>答案是<code>boss1</code>和<code>window</code>哦，猜对了吗。</p>
<p>只要看使用<code>this</code>的那个函数。</p>
<p>在<code>boss2.returnThis</code>里，使用<code>this</code>的函数是<code>boss1.returnThis</code>，所以<code>this</code>绑定到<code>boss1</code>；</p>
<p>在<code>boss3.returnThis</code>里，使用<code>this</code>的函数是<code>returnThis</code>，所以<code>this</code>绑定到备胎。</p>
<p>要想把<code>this</code>绑定到<code>boss2</code>怎么做呢？</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">var</span> boss1 = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'boss1'</span>,</div><div class="line">  returnThis () &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> boss2 = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'boss2'</span>,</div><div class="line">  <span class="attr">returnThis</span>: boss1.returnThis</div><div class="line">&#125;</div><div class="line"></div><div class="line">boss2.returnThis() <span class="comment">//boss2</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>没错，只要让使用<code>this</code>的函数是属于<code>boss2</code>就行。</p>
<h2 id="第三层：指腹为婚">
  <a href="#第三层：指腹为婚" class="headerlink" title="第三层：指腹为婚"></a>第三层：指腹为婚</h2>
<p>第三层大佬是<code>Object.prototype.call</code>和<code>Object.prototype.apply</code>，它们可以通过参数指定<code>this</code>。（注意<code>this</code>是不可以直接赋值的哦，<code>this = 2</code>会报<code>ReferenceError</code>。）</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnThis</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> boss1 = &#123; <span class="attr">name</span>: <span class="string">'boss1'</span> &#125;</div><div class="line"></div><div class="line">returnThis() <span class="comment">// window</span></div><div class="line">returnThis.call(boss1) <span class="comment">// boss1</span></div><div class="line">returnThis.apply(boss1) <span class="comment">// boss1</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<h2 id="第四层：海誓山盟">
  <a href="#第四层：海誓山盟" class="headerlink" title="第四层：海誓山盟"></a>第四层：海誓山盟</h2>
<p>第四层大佬是<code>Object.prototype.bind</code>，他不但通过一个新函数来提供永久的绑定，还会覆盖第三层大佬的命令。</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnThis</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> boss1 = &#123; <span class="attr">name</span>: <span class="string">'boss1'</span>&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> boss1returnThis = returnThis.bind(boss1)</div><div class="line"></div><div class="line">boss1returnThis() <span class="comment">// boss1</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> boss2 = &#123; <span class="attr">name</span>: <span class="string">'boss2'</span> &#125;</div><div class="line">boss1returnThis.call(boss2) <span class="comment">// still boss1</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<h2 id="第五层：内有乾坤">
  <a href="#第五层：内有乾坤" class="headerlink" title="第五层：内有乾坤"></a>第五层：内有乾坤</h2>
<p>一个比较容易忽略的会绑定<code>this</code>的地方就是<code>new</code>。当我们<code>new</code>一个函数时，就会自动把<code>this</code>绑定在新对象上，然后再调用这个函数。它会覆盖<code>bind</code>的绑定。</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showThis</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">showThis() <span class="comment">// window</span></div><div class="line"><span class="keyword">new</span> showThis() <span class="comment">// showThis</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> boss1 = &#123; <span class="attr">name</span>: <span class="string">'boss1'</span> &#125;</div><div class="line">showThis.call(boss1) <span class="comment">// boss1</span></div><div class="line"><span class="keyword">new</span> showThis.call(boss1) <span class="comment">// TypeError</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> boss1showThis = showThis.bind(boss1)</div><div class="line">boss1showThis() <span class="comment">// showThis</span></div><div class="line"><span class="keyword">new</span> boss1showThis() <span class="comment">// showThis</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<h2 id="第六层：军令如山">
  <a href="#第六层：军令如山" class="headerlink" title="第六层：军令如山"></a>第六层：军令如山</h2>
<p>最后一个法力无边的大佬就是 ES2015 的箭头函数。箭头函数里的<code>this</code>不再妖艳，被永远封印到当前词法作用域之中，称作 Lexical this ，在代码运行前就可以确定。没有其他大佬可以覆盖。</p>
<p>这样的好处就是方便让回调函数的<code>this</code>使用当前的作用域，不怕引起混淆。</p>
<p>所以对于箭头函数，只要看它在哪里创建的就行。</p>
<p>补充：如果对 Javascript 的词法作用域不太理解的可以看我另外一篇文章。</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span> (<span class="params">cb</span>) </span>&#123;</div><div class="line">  cb()</div><div class="line">&#125;</div><div class="line"></div><div class="line">callback(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>) &#125;) <span class="comment">// window</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> boss1 = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'boss1'</span>,</div><div class="line">  <span class="attr">callback</span>: callback,</div><div class="line">  callback2 () &#123;</div><div class="line">    callback(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>) &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">boss1.callback(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>) &#125;) <span class="comment">// still window</span></div><div class="line">boss1.callback2(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>) &#125;) <span class="comment">// boss1</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>下面这种奇葩的使用方式就需要注意：</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">var</span> returnThis = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span></div><div class="line"></div><div class="line">returnThis() <span class="comment">// window</span></div><div class="line"><span class="keyword">new</span> returnThis() <span class="comment">// TypeError</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> boss1 = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'boss1'</span>,</div><div class="line">  returnThis () &#123;</div><div class="line">    <span class="keyword">var</span> func = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span></div><div class="line">    <span class="keyword">return</span> func()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">returnThis.call(boss1) <span class="comment">// still window</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> boss1returnThis = returnThis.bind(boss1)</div><div class="line">boss1returnThis() <span class="comment">// still window</span></div><div class="line"></div><div class="line">boss1.returnThis() <span class="comment">// boss1</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> boss2 = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'boss2'</span>,</div><div class="line">  <span class="attr">returnThis</span>: boss1.returnThis</div><div class="line">&#125;</div><div class="line"></div><div class="line">boss2.returnThis() <span class="comment">// boss2</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>如果你不知道最后为什么会是 boss2，继续理解“对于箭头函数，只要看它在哪里创建”这句话。</p>
<h1 id="参考">
  <a href="#参考" class="headerlink" title="参考"></a>参考</h1>
<ol>
  <li>Mozilla Developer Network</li>
  <li>Kyle Simpson, <em>this &amp; object prototypes</em></li>
  <li>Axel Rauschmayer, <em>Speaking JavaScript</em></li>
</ol>
<p>[完]</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;鉴于&lt;code&gt;this&lt;/code&gt;风骚的运作方式，对&lt;code&gt;this&lt;/code&gt;的理解是永不过时的话题，本文试图通过将其大卸六块来钉住这个磨人的妖精。&lt;/p&gt;
&lt;h1 id=&quot;首先&quot;&gt;
  &lt;a href=&quot;#首先&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.crimx.com/categories/JavaScript/"/>
    
    
      <category term="Recommended" scheme="https://blog.crimx.com/tags/Recommended/"/>
    
      <category term="Understanding JavaScript" scheme="https://blog.crimx.com/tags/Understanding-JavaScript/"/>
    
      <category term="This" scheme="https://blog.crimx.com/tags/This/"/>
    
  </entry>
  
  <entry>
    <title>闲读源码：ScrollingElement Polyfill</title>
    <link href="https://blog.crimx.com/2016/04/18/document-scrollingelement-polyfill/"/>
    <id>https://blog.crimx.com/2016/04/18/document-scrollingelement-polyfill/</id>
    <published>2016-04-17T16:00:00.000Z</published>
    <updated>2016-12-28T11:04:28.224Z</updated>
    
    <content type="html"><![CDATA[<p>今天看了<a href="https://imququ.com/post/document-scrollingelement-in-chrome.html" target="_blank">这篇文章</a>，讲到 WebKit <code>document.body.scrollTop</code> 的问题。还有这里 <a href="https://dev.opera.com/articles/fixing-the-scrolltop-bug/" target="_blank">Dev.Opera Blog : Fixing the scrollTop bug</a>。</p>
<p><code>scrollTop</code>, <code>scrollLeft</code>, <code>scrollWidth</code>, <code>scrollHeight</code> 都是跟滚动相关的属性。设置 <code>scrollTop</code> 和 <code>scrollLeft</code> 还可以产生滚动。当这些属于用在根元素的时候，滚动是发生在 viewport 的。</p>
<p>但是 WebKit/Blink 不走寻常路，它会一直让 <code>body</code> 来代替 viewport 滚动。所以根元素会一直返回 0，对它设值也不会有反应。</p>
<p>文章里面提到了几种处理方式，其中一种方式就是利用一个比较新的属性 <code>document.scrollingElement</code>，它会返回合适的滚动元素，就不用纠结是哪个。</p>
<p><a href="https://github.com/mathiasbynens/document.scrollingElement/blob/master/scrollingelement.js" target="_blank">document.scrollingElement polyfill</a> 是它的一个 fallback，看起来很有趣，就细读了一遍。</p>
<h2 id="规范">
  <a href="#规范" class="headerlink" title="规范"></a>规范</h2>
<p>要理解源码必须先看它要干什么，<a href="https://drafts.csswg.org/cssom-view/#dom-document-scrollingelement" target="_blank">CSSOM View</a> specification 提到：</p>
<blockquote>
  <p>The scrollingElement attribute, on getting, must run these steps:</p>
  <ol>
    <li>
      <p>If the Document is in quirks mode, follow these substeps:</p>
      <ol>
        <li>If the HTML body element exists, and it is not potentially scrollable, return the HTML body element and abort these steps.</li>
        <li>Return null and abort these steps.</li>
      </ol>
    </li>
    <li>
      <p>If there is a root element, return the root element and abort these steps.</p>
    </li>
    <li>
      <p>Return null.</p>
    </li>
  </ol>
  <blockquote>
    <p>Note: For non-conforming user agents that always use the quirks mode behavior for scrollTop and scrollLeft, the scrollingElement attribute is expected to also always return the HTML body element (or null if it does not exist). This API exists so that
      Web developers can use it to get the right element to use for scrolling APIs, without making assumptions about a particular user agent’s behavior or having to invoke a scroll to see which element scrolls the viewport.</p>
  </blockquote>
</blockquote>
<p>这个 polyfill 干的事情就是在 Standards Mode 情况下如果正确实现规范的话就返回根元素，其它情况下返回 <code>body</code>（不一定是 <code>document</code> 的哦，后面会提到）。</p>
<h2 id="入口">
  <a href="#入口" class="headerlink" title="入口"></a>入口</h2>
<p>整体来看，没有实现 <code>scrollingElement</code> 的才会调用 polyfill：</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">if</span> (!(<span class="string">'scrollingElement'</span> <span class="keyword">in</span> <span class="built_in">document</span>)) (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;());</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>然后从这里开始：</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">if</span> (<span class="built_in">Object</span>.defineProperty) &#123;</div><div class="line">  <span class="comment">// Support modern browsers that lack a native implementation.</span></div><div class="line">  <span class="built_in">Object</span>.defineProperty(<span class="built_in">document</span>, <span class="string">'scrollingElement'</span>, &#123;</div><div class="line">    <span class="string">'get'</span>: scrollingElement</div><div class="line">  &#125;);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.__defineGetter__) &#123;</div><div class="line">  <span class="comment">// Support Firefox ≤ 3.6.9, Safari ≤ 4.1.3.</span></div><div class="line">  <span class="built_in">document</span>.__defineGetter__(<span class="string">'scrollingElement'</span>, scrollingElement);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="comment">// IE ≤ 4 lacks `attachEvent`, so it only gets this one assignment. IE ≤ 7</span></div><div class="line">  <span class="comment">// gets it too, but the value is updated later (see `propertychange`).</span></div><div class="line">  <span class="built_in">document</span>.scrollingElement = scrollingElement();</div><div class="line">  <span class="built_in">document</span>.attachEvent &amp;&amp; <span class="built_in">document</span>.attachEvent(<span class="string">'onpropertychange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// This is for IE ≤ 7 only.</span></div><div class="line">    <span class="comment">// A `propertychange` event fires when `&lt;body&gt;` is parsed because</span></div><div class="line">    <span class="comment">// `document.activeElement` then changes.</span></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.event.propertyName == <span class="string">'activeElement'</span>) &#123;</div><div class="line">      <span class="built_in">document</span>.scrollingElement = scrollingElement();</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>规范里 <code>scrollingElement</code> 是一个变量。通过 <code>defineProperty</code> 就可以让一个变量在获取的时候（也就是 <code>get</code> 的时候）调用函数，动态计算值。</p>
<p><a href="https://github.com/mathiasbynens/document.scrollingElement/blob/master/scrollingelement.js#L78" target="_blank">这里</a>就是主入口：</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">var</span> scrollingElement = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (isCompliant()) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.documentElement;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> body = <span class="built_in">document</span>.body;</div><div class="line">  <span class="comment">// Note: `document.body` could be a `frameset` element, or `null`.</span></div><div class="line">  <span class="comment">// `tagName` is uppercase in HTML, but lowercase in XML.</span></div><div class="line">  <span class="keyword">var</span> isFrameset = body &amp;&amp; !<span class="regexp">/body/i</span>.test(body.tagName);</div><div class="line">  body = isFrameset ? getNextBodyElement(body) : body;</div><div class="line">  <span class="comment">// If `body` is itself scrollable, it is not the `scrollingElement`.</span></div><div class="line">  <span class="keyword">return</span> body &amp;&amp; isScrollable(body) ? <span class="literal">null</span> : body;</div><div class="line">&#125;;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>正确实现规范的话就是返回根元素 <code>window.HTMLBodyElement</code>，比如 HTML 里的 <code>&lt;html&gt;</code>，否则返回 <code>body</code>。</p>
<h2 id="isCompliant">
  <a href="#isCompliant" class="headerlink" title="isCompliant"></a>isCompliant</h2>
<p>这里就是先判断浏览器有没有正确实现了规范。看看怎么判断的：</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment">// Note: standards mode / quirks mode can be toggled at runtime via</span></div><div class="line"><span class="comment">// `document.write`.</span></div><div class="line"><span class="keyword">var</span> isCompliantCached;</div><div class="line"><span class="keyword">var</span> isCompliant = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> isStandardsMode = <span class="regexp">/^CSS1/</span>.test(<span class="built_in">document</span>.compatMode);</div><div class="line">  <span class="keyword">if</span> (!isStandardsMode) &#123;</div><div class="line">    <span class="comment">// In quirks mode, the result is equivalent to the non-compliant</span></div><div class="line">    <span class="comment">// standards mode behavior.</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (isCompliantCached === <span class="keyword">void</span> <span class="number">0</span>) &#123;</div><div class="line">    <span class="comment">// When called for the first time, check whether the browser is</span></div><div class="line">    <span class="comment">// standard-compliant, and cache the result.</span></div><div class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</div><div class="line">    iframe.style.height = <span class="string">'1px'</span>;</div><div class="line">    (<span class="built_in">document</span>.body || <span class="built_in">document</span>.documentElement || <span class="built_in">document</span>).appendChild(iframe);</div><div class="line">    <span class="keyword">var</span> doc = iframe.contentWindow.document;</div><div class="line">    doc.write(<span class="string">'&lt;!DOCTYPE html&gt;&lt;div style="height:9999em"&gt;x&lt;/div&gt;'</span>);</div><div class="line">    doc.close();</div><div class="line">    isCompliantCached = doc.documentElement.scrollHeight &gt; doc.body.scrollHeight;</div><div class="line">    iframe.parentNode.removeChild(iframe);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> isCompliantCached;</div><div class="line">&#125;;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p><span class="github-emoji" title=":white_check_mark:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/2705.png?v7">&#x2705;</span> <code>document.compatMode</code> 是用来判断浏览器是 Standards Mode 还是 Quirks Mode，分别取值为 <code>CSS1Compat</code>  和 <code>BackCompat</code>。</p>
<p>作者也说了 <code>document.write</code> 可以在运行时修改模式，所以每次都要判断一遍。</p>
<p>然后就用一个 iframe 来测试了，哇蛮重的。好处只能说是通用了。</p>
<p>Standards Mode 下根元素的 <code>scrollHeight</code> 比 <code>body</code> 高就可以说明正确的实现了规范。</p>
<p>因为这么重所以测试了一遍之后就把结果存起来了，以后就直接用。</p>
<p><span class="github-emoji" title=":white_check_mark:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/2705.png?v7">&#x2705;</span> 从这里也对 <code>document.body</code> 有了
  <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/body" target="_blank">新的认识</a>：</p>
<blockquote>
  <p>Returns the <code>&lt;body&gt;</code> or <code>&lt;frameset&gt;</code> node of the current document, or null if no such element exists.</p>
</blockquote>
<p><code>&lt;frameset&gt;</code> 这种过时的东西没什么兴趣深入了解，直接看看怎么获取 <code>body</code> 的：</p>
<h2 id="Body">
  <a href="#Body" class="headerlink" title="Body"></a>Body</h2>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBodyElement</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">  <span class="comment">// The `instanceof` check gives the correct result for e.g. `body` in a</span></div><div class="line">  <span class="comment">// non-HTML namespace.</span></div><div class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.HTMLBodyElement) &#123;</div><div class="line">    <span class="keyword">return</span> element <span class="keyword">instanceof</span> HTMLBodyElement;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// Fall back to a `tagName` check for old browsers.</span></div><div class="line">  <span class="keyword">return</span> <span class="regexp">/body/i</span>.test(element.tagName);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNextBodyElement</span>(<span class="params">frameset</span>) </span>&#123;</div><div class="line">  <span class="comment">// We use this function to be correct per spec in case `document.body` is</span></div><div class="line">  <span class="comment">// a `frameset` but there exists a later `body`. Since `document.body` is</span></div><div class="line">  <span class="comment">// a `frameset`, we know the root is an `html`, and there was no `body`</span></div><div class="line">  <span class="comment">// before the `frameset`, so we just need to look at siblings after the</span></div><div class="line">  <span class="comment">// `frameset`.</span></div><div class="line">  <span class="keyword">var</span> current = frameset;</div><div class="line">  <span class="keyword">while</span> (current = current.nextSibling) &#123;</div><div class="line">    <span class="keyword">if</span> (current.nodeType == <span class="number">1</span> &amp;&amp; isBodyElement(current)) &#123;</div><div class="line">      <span class="keyword">return</span> current;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// No `body` found.</span></div><div class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>通过 <code>nextSibling</code> 循环排查跳过一个个 <code>frameset</code>。<code>nodeType == 1</code> 表示 <code>Node.ELEMENT_NODE</code>，这个节点是个元素。</p>
<p><span class="github-emoji" title=":white_check_mark:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/2705.png?v7">&#x2705;</span> 通过 <code>element instanceof window.HTMLBodyElement</code> 可以正确判断 <code>body</code> 元素。</p>
<h2 id="isScrollable">
  <a href="#isScrollable" class="headerlink" title="isScrollable"></a>isScrollable</h2>
<p>找到了 <code>body</code> 接下来就看 <code>isScrollable</code> 干了什么：</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isScrollable</span>(<span class="params">body</span>) </span>&#123;</div><div class="line">  <span class="comment">// A `body` element is scrollable if `body` and `html` both have</span></div><div class="line">  <span class="comment">// non-`visible` overflow and are both being rendered.</span></div><div class="line">  <span class="keyword">var</span> bodyStyle = computeStyle(body);</div><div class="line">  <span class="keyword">var</span> htmlStyle = computeStyle(<span class="built_in">document</span>.documentElement);</div><div class="line">  <span class="keyword">return</span> bodyStyle.overflow != <span class="string">'visible'</span> &amp;&amp; htmlStyle.overflow != <span class="string">'visible'</span> &amp;&amp;</div><div class="line">    isRendered(bodyStyle) &amp;&amp; isRendered(htmlStyle);</div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>基本就是看看它的 CSS 属性，如果 <code>overflow</code> 不是 <code>visible</code> 且这个元素被渲染了的话，就属于可滚动的。</p>
<p>这里就有了一个疑问，<code>overflow</code> 是 <code>hidden</code> 也算可滚动的吗？看了一下 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/overflow" target="_blank">MDN</a>，发现这么一段话：</p>
<blockquote>
  <p><strong>Note</strong>: When programmatically setting scrollTop on the relevant HTML element, even when overflow has the hidden value an element may still need to scroll.</p>
</blockquote>
<p><span class="github-emoji" title=":white_check_mark:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/2705.png?v7">&#x2705;</span> 所以 <code>overflow</code> 是 <code>hidden</code> 也是可滚动的。</p>
<h3 id="window-getComputedStyle">
  <a href="#window-getComputedStyle" class="headerlink" title="window.getComputedStyle"></a>window.getComputedStyle</h3>
<p>然后就是这个 <code>computeStyle</code>：</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">computeStyle</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.getComputedStyle) &#123;</div><div class="line">    <span class="comment">// Support Firefox &lt; 4 which throws on a single parameter.</span></div><div class="line">    <span class="keyword">return</span> getComputedStyle(element, <span class="literal">null</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// Support Internet Explorer &lt; 9.</span></div><div class="line">  <span class="keyword">return</span> element.currentStyle;</div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p><span class="github-emoji" title=":white_check_mark:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/2705.png?v7">&#x2705;</span> <code>window.getComputedStyle()</code> 与 <code>HTMLElement.style</code> 不一样在于前者可以动态得到元素所有的 CSS 属性，包括默认的值，而后者只能得到
  <em>inline</em> CSS 属性。但前者是只读的，后者可以设值。</p>
<h3 id="isRendered">
  <a href="#isRendered" class="headerlink" title="isRendered"></a>isRendered</h3>
<p>然后再看 <code>isRendered</code> 怎么判断：</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isRendered</span>(<span class="params">style</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> style.display != <span class="string">'none'</span> &amp;&amp; !(style.visibility == <span class="string">'collapse'</span> &amp;&amp;</div><div class="line">    <span class="regexp">/^table-(.+-group|row|column)$/</span>.test(style.display));</div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>看来这位作者不太用严格等号和不等号。<code>display</code>这个好理解，<code>none</code>的元素不会被渲染出来。后面的就有点绕，要理解这个判断需要明白 <code>visibility</code> 的<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/visibility" target="_blank">三个取值</a>：</p>
<blockquote>
  <ul>
    <li>
      <p><strong>visible</strong> Default value, the box is visible.</p>
    </li>
    <li>
      <p><strong>hidden</strong> The box is invisible (fully transparent, nothing is drawn), but still affects layout. Descendants of the element will be visible if they have visibility:visible (this doesn&#39;t work in IE up to version 7).</p>
    </li>
    <li>
      <p><strong>collapse</strong> For table rows, columns, column groups, and row groups the row(s) or column(s) are hidden and the space they would have occupied is removed (as if display: none were applied to the column/row of the table). However, the
        size of other rows and columns is still calculated as though the cells in the collapsed row(s) or column(s) are present. This was designed for fast removal of a row/column from a table without having to recalculate widths and heights for every
        portion of the table. For XUL elements, the computed size of the element is always zero, regardless of other styles that would normally affect the size, although margins still take effect. For other elements, collapse is treated the same as hidden.</p>
    </li>
  </ul>
</blockquote>
<p>前两个比较常见，<code>hidden</code> 依然是占位置的所以属于渲染。</p>
<p><span class="github-emoji" title=":white_check_mark:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/2705.png?v7">&#x2705;</span> <code>collapse</code> 是专门为表格行列元素快速隐藏做优化的，对它们来说效果等同于 <code>display: none</code>，所以会影响滚动高度。</p>
<p>于是后半段代码相当于找出下面几种元素，然后看是不是 <code>collapse</code> 的：</p>
<p></p>
<figure class="highlight css">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="selector-tag">display</span>: <span class="selector-tag">table-column</span>;</div><div class="line"><span class="selector-tag">display</span>: <span class="selector-tag">table-column-group</span>;</div><div class="line"><span class="selector-tag">display</span>: <span class="selector-tag">table-footer-group</span>;</div><div class="line"><span class="selector-tag">display</span>: <span class="selector-tag">table-header-group</span>;</div><div class="line"><span class="selector-tag">display</span>: <span class="selector-tag">table-row</span>;</div><div class="line"><span class="selector-tag">display</span>: <span class="selector-tag">table-row-group</span>;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<h1 id="总结">
  <a href="#总结" class="headerlink" title="总结"></a>总结</h1>
<p>可以看到这个 polyfill 代码虽然不算太长，但也干了很多事情，算是比较重的。但考虑到还在用老浏览器的人，能用就很给面子了是吧哈哈。从中也学了许多新知识，都打钩了注意到了吗 <span class="github-emoji" title=":smile:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png?v7">&#x1f604;</span> 。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天看了&lt;a href=&quot;https://imququ.com/post/document-scrollingelement-in-chrome.html&quot; target=&quot;_blank&quot;&gt;这篇文章&lt;/a&gt;，讲到 WebKit &lt;code&gt;document.body.scr
    
    </summary>
    
      <category term="闲读源码" scheme="https://blog.crimx.com/categories/%E9%97%B2%E8%AF%BB%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="JavaScript" scheme="https://blog.crimx.com/tags/JavaScript/"/>
    
      <category term="闲读源码" scheme="https://blog.crimx.com/tags/%E9%97%B2%E8%AF%BB%E6%BA%90%E7%A0%81/"/>
    
      <category term="Browser" scheme="https://blog.crimx.com/tags/Browser/"/>
    
      <category term="Polyfill" scheme="https://blog.crimx.com/tags/Polyfill/"/>
    
  </entry>
  
  <entry>
    <title>理解 Anki 基础概念</title>
    <link href="https://blog.crimx.com/2016/03/20/understanding-anki/"/>
    <id>https://blog.crimx.com/2016/03/20/understanding-anki/</id>
    <published>2016-03-19T16:00:00.000Z</published>
    <updated>2016-12-28T11:04:33.473Z</updated>
    
    <content type="html"><![CDATA[<p>在尝试了 Anki 、 SuperMemo 、 Quizlet 和 Memrise 之后，最后选用了 Anki。</p>
<p>Anki 是一个卡片记忆系统，基于 <a href="https://www.supermemo.com" target="_blank">SuperMemo</a> 老版的 SM2 算法，在实用性和有效性方面做了很好的平衡。简洁的界面，全平台免费同步，用 HTML 和 CSS 做模板，导入导出非常灵活，很适合程序员使用。</p>
<p>Anki 跟其它几个系统一样，都引入了自身的一套理念，不理解的话用起来就会无从下手。看了<a href="http://ankisrs.net/docs/manual.html" target="_blank">官方的文档</a>后，解决了很多疑惑和误解，并试图在本文用自己的理解总结一遍。<strong>但这篇文章不是操作说明书</strong>，如何操作这个网上已经有很多中文资料和视频，就不重复劳动了。</p>
<p>可以把 Anki 的使用分成四个步骤：</p>
<ol>
  <li>得到问题</li>
  <li>录入数据</li>
  <li>使用卡片</li>
  <li>循环记忆</li>
</ol>
<p>主要需要理解前两个。</p>
<h2 id="得到问题">
  <a href="#得到问题" class="headerlink" title="得到问题"></a>得到问题</h2>
<p>把想要记忆的材料整理出一道道“问题-答案”对，参照 <a href="https://www.supermemo.com/en/articles/20rules" target="_blank">SuperMemo 的 20 条规则</a>。</p>
<p>这些规则核心的概念是</p>
<p><a href="https://www.supermemo.com/en/articles/20rules#Do not learn if you do not understand" target="_blank">1、先理解再记忆</a>。</p>
<p><a href="https://www.supermemo.com/en/articles/20rules#minimum information principle" target="_blank">4、最小信息原则</a>。这个规则与 <a href="https://www.supermemo.com/en/articles/20rules#Avoid sets" target="_blank">9、避免使用集合</a>和
  <a href="https://www.supermemo.com/en/articles/20rules#Enumerations" target="_blank">10、避免使用枚举</a>都是一个道理：保证每次的答案都是固定的，不一定是一模一样，但必须是有固定的顺序，且尽可能的细化，这样可以减少无必要的记忆负担，提高重复记忆的效果。</p>
<p><a href="https://www.supermemo.com/en/articles/20rules#Use imagery" target="_blank">6、使用图像</a>、 <a href="https://www.supermemo.com/en/articles/20rules#mnemonic techniques" target="_blank">7、使用思维导图</a>和
  <a href="https://www.supermemo.com/en/articles/20rules#Personalize and provide examples" target="_blank">14、私人化定制例子</a> 提到了耳熟能详的右脑记忆和联想记忆。</p>
<p><a href="https://www.supermemo.com/en/articles/20rules#Cloze deletion" target="_blank">5、填空题</a> 以及变种 <a href="https://www.supermemo.com/en/articles/20rules#Graphic deletion" target="_blank">8、图像填空题</a>提到了填空题的好处。Anki 有自己的一套方式录入填空题，后面会提到。</p>
<h2 id="录入数据">
  <a href="#录入数据" class="headerlink" title="录入数据"></a>录入数据</h2>
<p>录入数据最常用的方法就是在软件的上一条条的填入，但 Anki 提供了更方便的导入方式，结合 HTML 可以更灵活地控制显示方式。但必须注意，导入功能不是为了方便直接使用别人分享的数据；根据先理解再记忆的原则，最好还是手动用文本记录好，然后利用文本编辑器或者编写脚本批量添加样式，最后导入到 Anki 里。</p>
<p>在录入之前需要理解 Anki 数据的一些概念：</p>
<p>Anki 一个最大的亮点就是“用户负责录入数据，Anki 负责生成卡片”。这也是我一开始没有注意并误解了的地方。Anki 将数据和卡片分开提供了巨大的灵活性，可以用一组数据产生不同的卡片。</p>
<h3 id="Cards-和-Decks">
  <a href="#Cards-和-Decks" class="headerlink" title="Cards 和 Decks"></a>Cards 和 Decks</h3>
<p><a href="http://ankisrs.net/docs/manual.html#cards" target="_blank">Cards</a> 就是卡片，每张卡片包含了正面和背面，一般正面会放问题，背面放问题和答案，但都是可以改的，很灵活。</p>
<p><a href="http://ankisrs.net/docs/manual.html#decks" target="_blank">Decks</a> 就是牌组，卡片放牌组里面，牌组也可以放牌组里面，方便分类整理，用 <code>::</code> 分隔。</p>
<h3 id="Notes-和-Fields">
  <a href="#Notes-和-Fields" class="headerlink" title="Notes 和 Fields"></a>Notes 和 Fields</h3>
<p>Anki 中的数据主要分为 <a href="http://ankisrs.net/docs/manual.html#notes-&amp;-fields" target="_blank">Notes（记录） 和 Fields（字段）</a>。</p>
<p>如果把数据看成表格，字段就是表格的表头，代表了都有什么类型的数据，一条记录就是一组数据，包含了每种字段的一个取值。</p>
<p>使用文本导入时，文本里的一行就是一条记录，每条记录里面的各个字段用分隔符分隔。分隔符可以是逗号、分号或 tab ，Anki 会以第一条记录判断用什么分隔符，并判断有多少个字段。而字段的名称最后在要导入的那个牌组上面设置。</p>
<p>比如记忆英文，可以有三个字段：英文、中文、例句，文本中的一行记录就可以是：<code>Apple; 苹果; I love apple.</code> 。这里就代表了：</p>
<p></p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">英文: Apple</div><div class="line">中文: 苹果</div><div class="line">例句：I love apple.</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>这样的好处就是可以非常灵活地生成卡片。比如可以将英文作为卡片正面，将中文和例句放在背面；也可以将中文放在正面，英文和例句放在背面。非常的方便。</p>
<p>得到了数据以后，就可以对卡片的样式和类型进行调整。</p>
<h3 id="Card-Types">
  <a href="#Card-Types" class="headerlink" title="Card Types"></a>Card Types</h3>
<p>可以将一套卡片统一成一个类型，然后对这个类型套用一个模板去显示。</p>
<h3 id="Note-Types">
  <a href="#Note-Types" class="headerlink" title="Note Types"></a>Note Types</h3>
<p>卡片的类型也是可以很方便修改，这个视频除了介绍添加答案输入，后面还提到了如何改成填空题</p>
<p><a href="https://www.youtube.com/watch?v=5tYObQ3ocrw" target="_blank">https://www.youtube.com/watch?v=5tYObQ3ocrw</a></p>
<p>理解了这些基本概念就可以开始使用 Anki 了，遇到了其它问题可以查<a href="http://ankisrs.net/docs/manual.html" target="_blank">文档</a>、<a href="http://ankisrs.net/docs/manual.html#_intro_videos" target="_blank">视频</a>、<a href="https://anki.tenderapp.com/discussions" target="_blank">支持</a>和<a href="http://bbs.ankichina.net/forum.php" target="_blank">中文论坛</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在尝试了 Anki 、 SuperMemo 、 Quizlet 和 Memrise 之后，最后选用了 Anki。&lt;/p&gt;
&lt;p&gt;Anki 是一个卡片记忆系统，基于 &lt;a href=&quot;https://www.supermemo.com&quot; target=&quot;_blank&quot;&gt;Sup
    
    </summary>
    
      <category term="Tools" scheme="https://blog.crimx.com/categories/Tools/"/>
    
    
      <category term="Anki" scheme="https://blog.crimx.com/tags/Anki/"/>
    
      <category term="GTD" scheme="https://blog.crimx.com/tags/GTD/"/>
    
      <category term="Time Management" scheme="https://blog.crimx.com/tags/Time-Management/"/>
    
      <category term="Todo List" scheme="https://blog.crimx.com/tags/Todo-List/"/>
    
  </entry>
  
  <entry>
    <title>路由器时间同步服务器</title>
    <link href="https://blog.crimx.com/2016/02/13/router-time-reset/"/>
    <id>https://blog.crimx.com/2016/02/13/router-time-reset/</id>
    <published>2016-02-12T16:00:00.000Z</published>
    <updated>2016-12-28T11:04:31.641Z</updated>
    
    <content type="html"><![CDATA[<p>最近路由器重启了之后时间总是卡在 1970 年不能自动同步。还以为是路由器哪里设置错了，后来发现应该是同步服务器连不上，换了<a href="https://www.douban.com/note/171309770/" target="_blank">新的服务器</a>好了，摘下一些常用的列表：</p>
<ul>
  <li>ntp.sjtu.edu.cn 202.120.2.101 (上海交通大学网络中心NTP服务器地址）</li>
  <li>s1a.time.edu.cn 北京邮电大学</li>
  <li>s1b.time.edu.cn 清华大学</li>
  <li>s1c.time.edu.cn 北京大学</li>
  <li>s1d.time.edu.cn 东南大学</li>
  <li>s1e.time.edu.cn 清华大学</li>
  <li>s2a.time.edu.cn 清华大学</li>
  <li>s2b.time.edu.cn 清华大学</li>
  <li>s2c.time.edu.cn 北京邮电大学</li>
  <li>s2d.time.edu.cn 西南地区网络中心</li>
  <li>s2e.time.edu.cn 西北地区网络中心</li>
  <li>s2f.time.edu.cn 东北地区网络中心</li>
  <li>s2g.time.edu.cn 华东南地区网络中心</li>
  <li>s2h.time.edu.cn 四川大学网络管理中心</li>
  <li>s2j.time.edu.cn 大连理工大学网络中心</li>
  <li>s2k.time.edu.cn CERNET桂林主节点</li>
  <li>s2m.time.edu.cn 北京大学</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近路由器重启了之后时间总是卡在 1970 年不能自动同步。还以为是路由器哪里设置错了，后来发现应该是同步服务器连不上，换了&lt;a href=&quot;https://www.douban.com/note/171309770/&quot; target=&quot;_blank&quot;&gt;新的服务器&lt;/a&gt;好
    
    </summary>
    
      <category term="Tools" scheme="https://blog.crimx.com/categories/Tools/"/>
    
    
      <category term="Time" scheme="https://blog.crimx.com/tags/Time/"/>
    
      <category term="Router" scheme="https://blog.crimx.com/tags/Router/"/>
    
  </entry>
  
  <entry>
    <title>理解 Prototype</title>
    <link href="https://blog.crimx.com/2015/05/14/understanding-prototype/"/>
    <id>https://blog.crimx.com/2015/05/14/understanding-prototype/</id>
    <published>2015-05-13T16:00:00.000Z</published>
    <updated>2016-12-28T11:04:11.296Z</updated>
    
    <content type="html"><![CDATA[<p>Prototype 初看很好理解，实际上很容易混淆。而且因为不影响平时使用，一直没用动力去了解，长时间都是在一知半解的状态。</p>
<h2 id="混淆">
  <a href="#混淆" class="headerlink" title="混淆"></a>混淆</h2>
<p>混淆主要是因为 <code>[[prototype]]</code> 和 <code>prototype</code> 名字长得太像。看回以前总结的模拟继承<a href="/2014/07/27/javascript-inheritance">笔记</a>，基本就是照搬书，压根没搞清楚。</p>
<p>首先是 <code>[[prototype]]</code>， <strong>每个对象</strong>都会有 <code>[[prototype]]</code>属性，它的本质就是指向另外一个对象。</p>
<p>然后是 <code>prototype</code>。<code>prototype</code> 是 <code>function</code> 对象特有的属性。每个 <code>function</code> 都有一个 <code>prototype</code>（同时也会有 <code>[[prototype]]</code>）。<code>prototype</code> 里有个叫 <code>constructor</code> 的属性，一般情况下就是指回这个 <code>function</code>。</p>
<h2 id="获取">
  <a href="#获取" class="headerlink" title="获取"></a>获取</h2>
<p>ES5 提供 <code>Object.getPrototypeOf()</code> 方法来获取一个对象的 <code>[[prototype]]</code>；也可以访问 <code>Object.prototype.__proto__</code>，而且这个很早就存在了，但在 ES2015 才标准化。</p>
<h2 id="创建">
  <a href="#创建" class="headerlink" title="创建"></a>创建</h2>
<h3 id="New">
  <a href="#New" class="headerlink" title="New"></a>New</h3>
<p>当 <code>new</code> 一个 <code>function</code> 的时候，返回的那个新对象里的 <code>[[prototype]]</code> 就会指向这个 <code>function</code> 的 <code>prototype</code>。</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person()</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.getPrototypeOf(p) === Person.prototype <span class="comment">// true</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<h3 id="Object-create">
  <a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h3>
<p>ES5 提供了 <code>Object.create()</code> 方法来创建对象，它的第一个参数就是 <code>prototype</code> ，创建的新对象的 <code>[[prototype]]</code> 会指向这个参数。</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">Object</span>.create(obj)) === obj <span class="comment">// true</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>在《JavaScript高级程序设计》提到了这个方法的 polyfill ，当然，当时也是糊里糊涂地跟着实现了一遍，不怎么明白。</p>
<p>这里需要理解 <code>Object.create()</code> 干了什么。它返回了一个对象，这个对象可以指定 <code>[[prototype]]</code>。</p>
<p>在 ES2015 之前只能通过 <code>new</code> 来赋予一个对象 <code>[[prototype]]</code>。</p>
<p>所以这个 polyfill 的核心思想就是利用一个空函数来改梁换柱。下面是简化的代码：</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span> (<span class="params">proto<span class="regexp">/* , 第二个参数 */</span></span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  <span class="keyword">var</span> Fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line">  Fn.prototype = proto || &#123;&#125;</div><div class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> Fn()</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  <span class="keyword">return</span> obj</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;&#125;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.getPrototypeOf(create(obj)) === obj <span class="comment">// true</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<h3 id="Object-setPrototypeOf">
  <a href="#Object-setPrototypeOf" class="headerlink" title="Object.setPrototypeOf()"></a>Object.setPrototypeOf()</h3>
<p>ES2015 增加了 <code>Object.setPrototypeOf()</code> 来设定对象的 <code>[[prototype]]</code>，但是尽量不要用，可能会有<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf" target="_blank">性能问题</a>。</p>
<h2 id="判断">
  <a href="#判断" class="headerlink" title="判断"></a>判断</h2>
<p><code>instanceof</code> 和 <code>isPrototypeOf()</code> 都可以判断，但两者不一样。</p>
<p><code>object instanceof constructor</code> 沿着 <code>constructor.prototype</code> 来搜。也就是说 <code>constructor</code> 只能是函数。</p>
<p><code>prototypeObj.isPrototypeOf(object)</code> 是基于对象，不一定是函数。</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Father()</div><div class="line"></div><div class="line">f <span class="keyword">instanceof</span> Father <span class="comment">// true</span></div><div class="line">f <span class="keyword">instanceof</span> Father.prototype <span class="comment">// Error</span></div><div class="line">Father.prototype.isPrototypeOf(f) <span class="comment">// true</span></div><div class="line">Father.isPrototypeOf(f) <span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line">Child.prototype = f</div><div class="line"></div><div class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Child()</div><div class="line">c <span class="keyword">instanceof</span> Father <span class="comment">// true</span></div><div class="line">c <span class="keyword">instanceof</span> f <span class="comment">// Error</span></div><div class="line">f.isPrototypeOf(c) <span class="comment">// true</span></div><div class="line">Father.isPrototypeOf(c) <span class="comment">// fasle</span></div><div class="line">Father.prototype.isPrototypeOf(f) <span class="comment">// true</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<h2 id="继承">
  <a href="#继承" class="headerlink" title="继承"></a>继承</h2>
<p><code>Child.prototype = Father.prototype</code> 不久好了么，收工。</p>
<p>这里的问题看出来了么。这种方式最大的问题是当在 <code>Child</code> 的 <code>prototype</code> 上增加一些属性的时候，会影响到 <code>Father</code> 去了，因为它们是同个对象。</p>
<p>那好吧，<code>Child.prototype = new Father()</code> 搞定。</p>
<p>这里的问题就更隐蔽一些。首先，我们只想要 <code>prototype</code>，这种方式会返回 <code>Father</code> 的一个对象，可能会增加一些没必要的属性；其次，<code>Father</code> 本质是一个函数，如果在 <code>Father</code> 里如果做了其它一些操作，比如改变了闭包或者全局变量什么的，<code>new</code> 的时候就会执行，有时候我们不希望这样。</p>
<p>所以，更好的方法就是用 <code>Object.create()</code> 创建一个 <code>[[prototype]]</code> 指向父类 <code>prototype</code> 的对象，然后再手动指定 <code>constructor</code>。</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line">Father.prototype.isHandsome = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line">Child.prototype = <span class="built_in">Object</span>.create(Father.prototype)</div><div class="line">Child.prototype.constructor = Child</div><div class="line"></div><div class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Child()</div><div class="line"></div><div class="line">c.isHandsome() <span class="comment">// true</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>[完]</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Prototype 初看很好理解，实际上很容易混淆。而且因为不影响平时使用，一直没用动力去了解，长时间都是在一知半解的状态。&lt;/p&gt;
&lt;h2 id=&quot;混淆&quot;&gt;
  &lt;a href=&quot;#混淆&quot; class=&quot;headerlink&quot; title=&quot;混淆&quot;&gt;&lt;/a&gt;混淆&lt;/h2&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.crimx.com/categories/JavaScript/"/>
    
    
      <category term="Recommended" scheme="https://blog.crimx.com/tags/Recommended/"/>
    
      <category term="Understanding JavaScript" scheme="https://blog.crimx.com/tags/Understanding-JavaScript/"/>
    
      <category term="Prototype" scheme="https://blog.crimx.com/tags/Prototype/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 有必要缓存 for 循环中的 Array.length 吗？</title>
    <link href="https://blog.crimx.com/2015/04/21/should-array-length-be-cached-or-not/"/>
    <id>https://blog.crimx.com/2015/04/21/should-array-length-be-cached-or-not/</id>
    <published>2015-04-20T16:00:00.000Z</published>
    <updated>2016-12-31T16:52:11.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题">
  <a href="#问题" class="headerlink" title="问题"></a>问题</h2>
<p>缓存 <code>Array.length</code> 是老生常谈的小优化。</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment">// 不缓存 </span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 缓存</span></div><div class="line"><span class="keyword">var</span> len = arr.length;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">...</div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>但笔者对这种破碎的写法感到不适，也对这种写法的实际优化效果产生疑问。</p>
<p>且推崇这种写法的朋友似乎很多也是“前辈这么说+自己想了一下觉得有道理”。</p>
<p>由于 for 循环搭配 <code>Array.length</code> 是极度常用的 JavasScript 代码，所以非常必要搞清楚。</p>
<h2 id="结论">
  <a href="#结论" class="headerlink" title="结论"></a>结论</h2>
<p>先上笔者得到的结论：缓存 <code>Array.lengh</code> 对优化影响不大，甚至会减慢。</p>
<h2 id="理由">
  <a href="#理由" class="headerlink" title="理由"></a>理由</h2>
<h3 id="从测试结果上看">
  <a href="#从测试结果上看" class="headerlink" title="从测试结果上看"></a>从测试结果上看</h3>
<p>stackoverflow 上也有这个讨论，<a href="http://stackoverflow.com/questions/17989270/for-loop-performance-storing-array-length-in-a-variable" target="_blank">For-loop performance: storing array length in a variable</a> 。</p>
<p>accepted 的答案是说缓存会起到加速的结果，给出了 <a href="http://jsperf.com/for-loop-research" target="_blank">jsPerf</a> 测试。</p>
<p>但是有答案反对，也给出了 <a href="http://blogs.msdn.com/b/eternalcoding/archive/2015/01/07/javascript-shoud-i-have-to-cache-my-array-s-length.aspx" target="_blank">jsPerf</a> 测试。</p>
<p>两个答案的区别在于 （<a href="http://en.wikipedia.org/wiki/Loop-invariant_code_motion" target="_blank">Loop-invariant code motion</a>），accepted 答案的测试循环里没有访问到数组，是不实际的，后面会讲到。</p>
<p>从另一篇文章 <a href="http://blogs.msdn.com/b/eternalcoding/archive/2015/01/07/javascript-shoud-i-have-to-cache-my-array-s-length.aspx" target="_blank">Shoud I have to cache my array’s length?</a> 的测试结果也可以看出缓存差别不大。</p>
<p><img src="/images/post/javascript/array-caching-performance-1.jpg" alt="array-caching-performance-1"></p>
<p>还有这篇 <a href="http://www.erichynds.com/blog/javascript-length-property-is-a-stored-value" target="_blank">JavaScript&#39;s .length Property is a Stored Value</a></p>
<p><img src="/images/post/javascript/array-caching-performance-2.jpg" alt="array-caching-performance-2"></p>
<h3 id="从-V8-的中间代码分析">
  <a href="#从-V8-的中间代码分析" class="headerlink" title="从 V8 的中间代码分析"></a>从 V8 的中间代码分析</h3>
<p>这篇文章 <a href="http://mrale.ph/blog/2014/12/24/array-length-caching.html" target="_blank">How the Grinch stole array.length access</a> 从 V8 的 hydrogen 探讨 <code>Array.length</code> 在 for 循环中的处理。</p>
<p>正如上面提到的 <a href="http://en.wikipedia.org/wiki/Loop-invariant_code_motion" target="_blank">Loop-invariant code motion</a>，引擎会聪明的把能确定不变的代码移到循环外。</p>
<p>所以像下面这种代码也不会影响引擎对 <code>Array.length</code> 的优化：</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">uncached</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">    arr[i]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>而当循环中调用不可<a href="http://zh.wikipedia.org/zh/%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0" target="_blank">内联函数</a>时，引擎没法做优化，每次循环都会重新计算一遍 <code>length</code></p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">BLACKHOLE</span>(<span class="params">sum, arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">try</span> &#123; &#125; <span class="keyword">catch</span> (e) &#123; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">uncached</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">    sum += arr[i];</div><div class="line">    <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) BLACKHOLE(arr, sum);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> sum;</div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>但这时即便是在循环外缓存了 <code>length</code> 也是没有用的，引擎没法预判数组的变化，当需要访问数组元素时会触发 bounds check ，从而照样要计算一遍 <code>length</code> 。所以缓存 <code>length</code> 是没有用的。</p>
<p>甚至，由于多了一个变量，底层的寄存器分配器每次循环还要多一次恢复这个变量。这个只有在大规模的情况下才会看出区别。</p>
<h2 id="结尾">
  <a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2>
<p>当然这篇文章也有局限性，仅仅讨论了 V8 引擎，也没有讨论访问 <code>length</code> 代价更高的 <code>HTMLCollection</code> 。但这已经足够让我们不用再局限于缓存的写法，可以放开来按照自己喜欢的方式去写循环了。</p>
<p>【完】</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;
  &lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;
&lt;p&gt;缓存 &lt;code&gt;Array.length&lt;/code&gt; 是老生常谈的小优化。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;figure class=
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.crimx.com/categories/JavaScript/"/>
    
    
      <category term="Recommended" scheme="https://blog.crimx.com/tags/Recommended/"/>
    
      <category term="JavaScript" scheme="https://blog.crimx.com/tags/JavaScript/"/>
    
      <category term="Understanding JavaScript" scheme="https://blog.crimx.com/tags/Understanding-JavaScript/"/>
    
      <category term="Array" scheme="https://blog.crimx.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>V8 是如何实现 JavaScript Hoist 的</title>
    <link href="https://blog.crimx.com/2015/03/29/javascript-hoist-under-the-hood/"/>
    <id>https://blog.crimx.com/2015/03/29/javascript-hoist-under-the-hood/</id>
    <published>2015-03-28T16:00:00.000Z</published>
    <updated>2016-12-31T17:07:33.175Z</updated>
    
    <content type="html"><![CDATA[<h2 id="首先">
  <a href="#首先" class="headerlink" title="首先"></a>首先</h2>
<p>今天在知乎上看到一个问题“<a href="http://www.zhihu.com/question/29105940/answer/43277384" target="_blank">JavaScript有预编译吗？</a>”，题主实际上是对 JavaScript 变量提升（hoist）机制的实现过程有疑惑。我刚知道 hoist 时也好奇过浏览器是怎么实现的，就跑去看了一下 V8 引擎的源码，做了一些笔记，现在正好趁机整理出来。</p>
<h2 id="Hoist">
  <a href="#Hoist" class="headerlink" title="Hoist"></a>Hoist</h2>
<p>var 和 function 的 hoist 是老生常谈的问题，网上有大量资料，<a href="https://bonsaiden.github.io/JavaScript-Garden/zh/#function.scopes" target="_blank">JavaScript 秘密花园</a></p>
<h2 id="V8-源码">
  <a href="#V8-源码" class="headerlink" title="V8 源码"></a>V8 源码</h2>
<p>墙外：<a href="https://code.google.com/p/chromium" target="_blank">Chromium</a><br>墙内：<a href="https://github.com/v8/v8-git-mirror/blob/master/src/dateparser.cc" target="_blank">GitHub</a></p>
<h2 id="V8-的-Hoist">
  <a href="#V8-的-Hoist" class="headerlink" title="V8 的 Hoist"></a>V8 的 Hoist</h2>
<p>V8 中变量提升涉及到两个步骤，Parse 和 Analyze 。先 Parse 一遍代码得出 AST （抽象语法树）等信息，再把信息 Analyze 一遍。虽然 V8 有“预语法分析”,「preparser.h」， 只是为了收集信息辅助后续加速的，不属于预编译。</p>
<p>Talk is cheap, let me show you the code.</p>
<h2 id="Parse-部分">
  <a href="#Parse-部分" class="headerlink" title="Parse 部分"></a>Parse 部分</h2>
<p>在「<code>parser.cc</code>」里</p>
<p>var 声明的处理在 <code>Parser::ParseVariableDeclarations</code> 函数中，对于 <code>var a = 2</code>，V8 是将声明和赋值分开处理的，即转换为 <code>var a; a = 2;</code> ，然后前者由 <code>Parser::Declare</code> 提升。提升就是将每一层作用域用户声明的变量都放在该层的 <code>variables_</code> 表中。</p>
<p></p>
<figure class="highlight cpp">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">Block* Parser::ParseVariableDeclarations( <span class="comment">/*...*/</span> ) &#123;</div><div class="line">  <span class="comment">/*...*/</span></div><div class="line">  <span class="comment">// 一层层地向外找合适的声明作用域</span></div><div class="line">  Scope* declaration_scope = DeclarationScope(mode);</div><div class="line">  <span class="comment">/*...*/</span></div><div class="line">  <span class="comment">// 分析出变量名</span></div><div class="line">  name = ParseIdentifier(kDontAllowEvalOrArguments, CHECK_OK);</div><div class="line">  <span class="comment">/*...*/</span></div><div class="line">  <span class="comment">// 下面会详细讲 proxy</span></div><div class="line">  VariableProxy* proxy = NewUnresolved(name, mode);</div><div class="line">  <span class="comment">// 进一步封装</span></div><div class="line">  Declaration* declaration =</div><div class="line">      factory()-&gt;NewVariableDeclaration(proxy, mode, scope_, pos);</div><div class="line">  <span class="comment">// 声明变量，注意 VAR 声明时第二个参数是 false</span></div><div class="line">  Variable* var = Declare(declaration, mode != VAR, CHECK_OK);</div><div class="line">  <span class="comment">/*...*/</span></div><div class="line">  <span class="comment">// 如果接下来还有等号的话（带赋值的变量声明）</span></div><div class="line">  <span class="keyword">if</span> (peek() == Token::ASSIGN <span class="comment">/*...*/</span> ) &#123;</div><div class="line">    <span class="comment">/*...*/</span></div><div class="line">    <span class="comment">// 解析出待赋的值</span></div><div class="line">    value = ParseAssignmentExpression(var_context != kForStatement, CHECK_OK);</div><div class="line">    <span class="comment">/*...*/</span></div><div class="line">  &#125;</div><div class="line">  <span class="comment">/*...*/</span></div><div class="line">  <span class="comment">// 按正常的赋值表达式语句解析</span></div><div class="line">  VariableProxy* proxy = initialization_scope-&gt;NewUnresolved(factory(), name);</div><div class="line">    Assignment* assignment = factory()-&gt;NewAssignment(init_op, proxy, value, pos);</div><div class="line">    block-&gt;AddStatement(</div><div class="line">        factory()-&gt;NewExpressionStatement(assignment, RelocInfo::kNoPosition),</div><div class="line">        zone());</div><div class="line">  <span class="comment">/*...*/</span></div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>function 声明在 <code>Parser::ParseFunctionDeclaration</code> 中，</p>
<p></p>
<figure class="highlight cpp">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">Statement* Parser::ParseFunctionDeclaration( <span class="comment">/*...*/</span> ) &#123;</div><div class="line">  <span class="comment">/*...*/</span></div><div class="line">  <span class="comment">// 可以看到函数体在这里也一并读取了</span></div><div class="line">  FunctionLiteral* fun = ParseFunctionLiteral( <span class="comment">/*...*/</span> );</div><div class="line">  <span class="comment">/*...*/</span></div><div class="line">  <span class="comment">// 与var 声明大同小异</span></div><div class="line">  VariableProxy* proxy = NewUnresolved(name, mode);</div><div class="line">  Declaration* declaration =</div><div class="line">      factory()-&gt;NewFunctionDeclaration(proxy, mode, fun, scope_, pos);</div><div class="line">  <span class="comment">// 注意这里的 true</span></div><div class="line">  Declare(declaration, <span class="literal">true</span>, CHECK_OK);</div><div class="line">  <span class="comment">/*...*/</span></div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>注意两者传入 <code>Parser::Declare</code> 函数的第二个参数值（<code>resolve</code>）不一样。</p>
<p>前面提过，对于“var a = 2”，V8 是将声明和赋值分开处理的，即转换为 <code>var a; a = 2;</code> 。<code>var a;</code> 提升后， <code>a = 2;</code> 还在原来的位置，相当于拆散了。</p>
<p>在 ES5 中，除了 <code>function</code> 作用域外还有 <code>with</code> 和 <code>catch</code> 可以产生作用域的（最近也做了<a href="http://www.crimx.com/2015/03/09/es6-function-vs-block-scope" target="_blank">笔记</a>）。而 var 的 hoist 是提升到函数作用域的最前面，所以会有下面的情况：</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">try</span> &#123;<span class="keyword">throw</span> <span class="number">1</span>&#125; <span class="keyword">catch</span>(a) &#123;</div><div class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 1 ,这里的 a 是 catch 的</span></div><div class="line">    <span class="keyword">var</span> a = <span class="number">3</span>; <span class="comment">// 这里的 a 也是 catch 的</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// undefined ,这里的 a 是 fn 的</span></div><div class="line"></div><div class="line">&#125;());</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>所以对于 var 的声明，不可以在读到 <code>var a = 3;</code> 时就绑定，于是 V8 的 proxy 变量代理的机制就显得十分有用了。</p>
<p>对于 var 声明， proxy 不跟变量绑定，而是在 Parse 一遍后的 Analyze 阶段再统一进行绑定，所以传入 false；而由于函数没有上面的情况，在 Parse 的时候就可以将其 proxy 与变量绑定，于是传入的 resolve 为 true。</p>
<p>看看 <code>Parser::Declare</code> 如何处理变量：</p>
<p></p>
<figure class="highlight cpp">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">Variable* Parser::Declare(Declaration* declaration, <span class="keyword">bool</span> resolve, <span class="keyword">bool</span>* ok) &#123;</div><div class="line">  VariableProxy* proxy = declaration-&gt;proxy();</div><div class="line">  DCHECK(proxy-&gt;raw_name() != <span class="literal">NULL</span>);</div><div class="line">  <span class="keyword">const</span> AstRawString* name = proxy-&gt;raw_name();</div><div class="line">  VariableMode mode = declaration-&gt;mode();</div><div class="line"></div><div class="line">  <span class="comment">// 层层向外找最近的声明作用域</span></div><div class="line">  Scope* declaration_scope = DeclarationScope(mode);</div><div class="line"></div><div class="line">  <span class="comment">// 只有符合以下几个声明作用域才会进行注册</span></div><div class="line">  <span class="keyword">if</span> (declaration_scope-&gt;is_function_scope() ||</div><div class="line">      declaration_scope-&gt;is_strict_eval_scope() ||</div><div class="line">      declaration_scope-&gt;is_block_scope() ||</div><div class="line">      declaration_scope-&gt;is_module_scope() ||</div><div class="line">      declaration_scope-&gt;is_script_scope()) &#123;</div><div class="line">    <span class="comment">// 看看有没有被注册了</span></div><div class="line">    var = declaration_scope-&gt;LookupLocal(name);</div><div class="line">    <span class="comment">// 如果没有就新注册一个</span></div><div class="line">    <span class="keyword">if</span> (var == <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="comment">// var 和 function 还有 ES6 的 let const 等等都会在这里做标记</span></div><div class="line">      var = declaration_scope-&gt;DeclareLocal(</div><div class="line">          name, mode, declaration-&gt;initialization(),</div><div class="line">          declaration-&gt;IsFunctionDeclaration() ? Variable::FUNCTION</div><div class="line">                                               : Variable::NORMAL,</div><div class="line">          kNotAssigned);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="comment">/*...*/</span> ) &#123;</div><div class="line">      <span class="comment">/*...*/</span> <span class="comment">// ES6 相关</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mode == VAR) &#123;</div><div class="line">      <span class="comment">// 如果之前已经注册了的话，就可能被赋过值了</span></div><div class="line">      var-&gt;set_maybe_assigned();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/*...*/</span></div><div class="line"></div><div class="line">  <span class="comment">// 对于每次声明 V8 都会挂载一个 declaration 节点</span></div><div class="line">  <span class="comment">// 虽然只有在必要的时候才会生成相应代码</span></div><div class="line">  <span class="comment">// 但对于一个变量有过多的 declaration 节点必然会影响查找性能</span></div><div class="line">  <span class="comment">// 所以尽量不要重复声明</span></div><div class="line">  declaration_scope-&gt;AddDeclaration(declaration);</div><div class="line"></div><div class="line">  <span class="comment">/*...*/</span></div><div class="line"></div><div class="line">  <span class="comment">// 前面提到的传入的 resolve </span></div><div class="line">  <span class="comment">// function 为 true</span></div><div class="line">  <span class="comment">// var 为 false</span></div><div class="line">  <span class="keyword">if</span> (resolve &amp;&amp; var != <span class="literal">NULL</span>) &#123;</div><div class="line">    <span class="comment">// 绑定在一起</span></div><div class="line">    proxy-&gt;BindTo(var);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> var;</div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<h2 id="Analyze-部分">
  <a href="#Analyze-部分" class="headerlink" title="Analyze 部分"></a>Analyze 部分</h2>
<p>在「<code>scope.cc</code>」里</p>
<p>Analyze 是由最外层 <code>Scope::Analyze</code> 开始，一层层向里递归的查看需要 resolve 的作用域，然后对该作用域的每一个需要 resolve 的 proxy 再一层层向外递归查找最近的同名变量进行绑定。</p>
<h2 id="总结">
  <a href="#总结" class="headerlink" title="总结"></a>总结</h2>
<p>V8 为了处理声明提升，在每层作用域都会维护一个独立的声明作用域（<code>variables_</code> 表），这样运行时就可以从声明作用域中递归查找变量。为了处理一些不能确定的特殊情况，V8 会将 proxy 与变量的绑定推迟到 Analyze 阶段。</p>
<p>所以对 var 和 function 提升的处理在语法分析阶段就搞定了，不需要预编译。</p>
<p>【完】</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;首先&quot;&gt;
  &lt;a href=&quot;#首先&quot; class=&quot;headerlink&quot; title=&quot;首先&quot;&gt;&lt;/a&gt;首先&lt;/h2&gt;
&lt;p&gt;今天在知乎上看到一个问题“&lt;a href=&quot;http://www.zhihu.com/question/29105940/answe
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.crimx.com/categories/JavaScript/"/>
    
    
      <category term="Recommended" scheme="https://blog.crimx.com/tags/Recommended/"/>
    
      <category term="JavaScript" scheme="https://blog.crimx.com/tags/JavaScript/"/>
    
      <category term="Understanding JavaScript" scheme="https://blog.crimx.com/tags/Understanding-JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>ES6 随笔：函数与块级作用域</title>
    <link href="https://blog.crimx.com/2015/03/09/es6-function-vs-block-scope/"/>
    <id>https://blog.crimx.com/2015/03/09/es6-function-vs-block-scope/</id>
    <published>2015-03-08T16:00:00.000Z</published>
    <updated>2016-12-29T11:14:41.540Z</updated>
    
    <content type="html"><![CDATA[<h2 id="作用域">
  <a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2>
<p>作者提到了 ES5 中有三种方式实现作用域：function、with 和鲜为人知的 try/catch 。with 已经被淘汰，function 方式可以看看之前翻译的经典文章<a href="http://www.crimx.com/2014/08/05/javascript-module-pattern-in-depth/" target="_blank">《深入理解 JavaScript 模块模式 》</a>，而最后一种 hack 真是让人眼前一亮。他在附录 B 中也提到 google 的
  Traceur 也是这么实现的，我试了一下，发现 Traceur 与 Babel 现在都没有采用这种方式了，而是直接检测 shadow 冲突再使用不同的变量名，这可能是考虑到性能的问题。</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment">// ES6 代码</span></div><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> a = <span class="number">2</span>;</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">let</span> a = <span class="number">3</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// ...</span></div><div class="line"></div><div class="line"><span class="comment">// Try/Catch 方式</span></div><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="keyword">try</span> &#123;<span class="keyword">throw</span> <span class="number">1</span>&#125; <span class="keyword">catch</span>(a) &#123;</div><div class="line">  <span class="keyword">try</span> &#123;<span class="keyword">throw</span> <span class="number">2</span>&#125; <span class="keyword">catch</span>(a) &#123;</div><div class="line">    <span class="keyword">try</span> &#123;<span class="keyword">throw</span> <span class="number">3</span>&#125; <span class="keyword">catch</span>(a) &#123;</div><div class="line">      </div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// ...</span></div><div class="line"></div><div class="line"><span class="comment">// Traceur</span></div><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">&#123;</div><div class="line">  <span class="keyword">var</span> a$__0 = <span class="number">2</span>;</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">var</span> a$__1 = <span class="number">3</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// ...</span></div><div class="line"></div><div class="line"><span class="comment">// Babel</span></div><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">&#123;</div><div class="line">  <span class="keyword">var</span> _a = <span class="number">2</span>;</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">var</span> _a2 = <span class="number">3</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// ...</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<h2 id="TDZ">
  <a href="#TDZ" class="headerlink" title="TDZ"></a>TDZ</h2>
<p>有意思的是，这几种 hack 都不能解决 <code>let</code> 变量不许提升 (hoist) 的问题。</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// ReferenceError</span></div><div class="line"><span class="keyword">let</span> a;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p><code>let</code> 声明行到它所在 block 最开始之间的区域被称为 TDZ <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let" target="_blank">“Temporal dead zone”</a>，正常情况下，可以考虑用回上面的方法 hack ，把 TDZ 当做一个
  block，但是<a href="https://github.com/babel/babel/issues/563" target="_blank">这里</a>提到了一种坑爹的情况，函数。</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  x; <span class="comment">// 合法</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> x;</div><div class="line">foo();</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  x; <span class="comment">// 不合法</span></div><div class="line">&#125;</div><div class="line">foo();</div><div class="line"><span class="keyword">let</span> x;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">foo();</div><div class="line"><span class="keyword">let</span> x;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  x; <span class="comment">// 不合法</span></div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>这么一来静态分析出错误就变得很麻烦，在 Traceur 的一个 issue 中 <strong>@arv</strong> 提到了<a href="https://github.com/google/traceur-compiler/issues/1382" target="_blank">牺牲运行时来检测的方式</a>：</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment">// ES6</span></div><div class="line"><span class="keyword">let</span> a = f();</div><div class="line"><span class="keyword">const</span> b = <span class="number">2</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> b; &#125;</div><div class="line"></div><div class="line"><span class="comment">// hack</span></div><div class="line">$traceurRuntime.UNITIALIZED = &#123;&#125;;</div><div class="line">$traceurRuntime.assertInitialized = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (v === UNITIALIZED) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">ReferenceError</span>();</div><div class="line">  <span class="keyword">return</span> v;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = $traceurRuntime.UNITIALIZED;</div><div class="line"><span class="keyword">var</span> b = $traceurRuntime.UNITIALIZED;</div><div class="line">a = f();</div><div class="line">b = <span class="number">2</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> $traceurRuntime.assertInitialized(b);</div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>这在 Babel 中需要开启 <code>es6.blockScopingTDZ</code> 特性：</p>
<p></p>
<figure class="highlight bash">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">$ babel-node --optional es6.blockScopingTDZ test.js</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>（3 月 19 日 补）<br>注意 <code>for</code> 循环闭包的坑，现在还没有好的 polyfill 方案</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment">// 0 1 2 3 4</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i += <span class="number">1</span>) &#123;</div><div class="line">  <span class="comment">// 忽略我在循环中声明函数</span></div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;, <span class="number">1</span>*<span class="number">1000</span>);</div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<h2 id="块级作用域">
  <a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2>
<p>作者提到几个块级作用域的好处，比较有意思的一个是对垃圾回收的优化：</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> someReallyBigData = &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">process(someReallyBigData);</div><div class="line"></div><div class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'a_button'</span>);</div><div class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'button clicked'</span>);</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>这里 <code>btn</code> 的回调函数虽然没有直接用到 <code>someReallyBigData</code> ，但 JS 引擎很可能会继续保留 <code>someReallyBigData</code> 因为闭包使回调函数引用了 <code>someReallyBigData</code> 所在的作用域。ES6 中，使用显式的块则可以向引擎明确回收时机：</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> someReallyBigData = &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  process(someReallyBigData);</div><div class="line">&#125;<span class="comment">// 这里就可以回收 someReallyBigData 了</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'a_button'</span>);</div><div class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'button clicked'</span>);</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;作用域&quot;&gt;
  &lt;a href=&quot;#作用域&quot; class=&quot;headerlink&quot; title=&quot;作用域&quot;&gt;&lt;/a&gt;作用域&lt;/h2&gt;
&lt;p&gt;作者提到了 ES5 中有三种方式实现作用域：function、with 和鲜为人知的 try/catch 。with 已经被
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.crimx.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.crimx.com/tags/JavaScript/"/>
    
      <category term="Understanding JavaScript" scheme="https://blog.crimx.com/tags/Understanding-JavaScript/"/>
    
      <category term="Scope" scheme="https://blog.crimx.com/tags/Scope/"/>
    
  </entry>
  
  <entry>
    <title>CSS 自适应正方形</title>
    <link href="https://blog.crimx.com/2015/02/28/css-square/"/>
    <id>https://blog.crimx.com/2015/02/28/css-square/</id>
    <published>2015-02-27T16:00:00.000Z</published>
    <updated>2016-12-29T12:24:39.981Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/padding#Syntax" target="_blank">padding 使用百分数值时是根据其包含块的 width 值计算的。</a></p>
<blockquote>
  <p>With respect to the width of the containing block.</p>
</blockquote>
<p>所以可以利用 <code>height = 0;</code> 并用 <code>padding-bottom = 100%;</code> 撑起一个正方形：</p>
<p></p>
<p><iframe height="265" scrolling="no" title="CSS Responsive Square" src="//codepen.io/Crimx/embed/VYdMWJ/?height=265&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width:100%">See the Pen <a href="http://codepen.io/Crimx/pen/VYdMWJ/" target="_blank">CSS Responsive Square</a> by Jesse Wong (<a href="http://codepen.io/Crimx" target="_blank">@Crimx</a>) on <a href="http://codepen.io" target="_blank">CodePen</a>.</iframe></p>
<p></p>
<p></p>
<figure class="highlight html">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"spacer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>item<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p></p>
<figure class="highlight css">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">width</span>: <span class="number">20%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.spacer</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">padding-bottom</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">background</span>: orange;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.content</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>参考资料</p>
<ul>
  <li><a href="http://qiita.com/usp/items/96f3cf9997ebb5b3dbb9" target="_blank">CSSだけで正方形を作る</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/padding#Syntax" target="_blank">padding-CSS MDN</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/padding#Syntax&quot; target=&quot;_blank&quot;&gt;padding 使用百分数值时是根据其包含块的 width 值计算的。&lt;/a&gt;&lt;/p&gt;
&lt;bl
    
    </summary>
    
      <category term="CSS" scheme="https://blog.crimx.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://blog.crimx.com/tags/CSS/"/>
    
      <category term="Responsive" scheme="https://blog.crimx.com/tags/Responsive/"/>
    
      <category term="Square" scheme="https://blog.crimx.com/tags/Square/"/>
    
  </entry>
  
  <entry>
    <title>多说评论邮件提醒</title>
    <link href="https://blog.crimx.com/2015/02/27/duoshuo-email/"/>
    <id>https://blog.crimx.com/2015/02/27/duoshuo-email/</id>
    <published>2015-02-26T16:00:00.000Z</published>
    <updated>2016-12-29T11:33:03.145Z</updated>
    
    <content type="html"><![CDATA[<p>多说只有被人回复评论时才会有邮件提醒，博主是默认不造的（怪不得一直没有收到邮件提醒 T_T）。</p>
<p>dig 了一下，<a href="http://dev.duoshuo.com/docs/5003ecd94cab3e7250000008/" target="_blank">这里</a>有讲到用 <code>data-author-key</code> 可以设置提醒。</p>
<blockquote>
  <p>作者在本站中的id。对于 wordpress 插件，文章如果填写该 id，可以识别作者，在收到评论时，会对该作者发出邮件提醒。通用代码用户及其他插件，如果需要通过这种方式获取邮件，请通过 <a href="http://dev.duoshuo.com/docs/51435552047fe92f490225de" target="_blank">http://dev.duoshuo.com/docs/51435552047fe92f490225de</a> 这个接口导入用户并且要有邮箱信息，指定的
    <code>user_key</code> 就是此处要填的 <code>data-author-key</code></p>
</blockquote>
<p>进去那个接口看看，其实就是同步用户数据，按着那个接口发个 post 就可以了。以 nodejs 为例。</p>
<p>安装 nodejs 然后在某个目录下打开终端，输入 <code>npm install --save-dev request</code></p>
<p>该目录下新建 <code>a.js</code>，粘贴下面代码进去，修改 <code>data</code> 中的信息。</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> data = &#123;</div><div class="line">  <span class="string">'short_name'</span>         : <span class="string">''</span>,    <span class="comment">// 你的short_name，后台管理那里可以看到</span></div><div class="line">  <span class="string">'secret'</span>             : <span class="string">''</span>,    <span class="comment">// 密钥，后台管理那里可以看到</span></div><div class="line">  <span class="string">'users[0][user_key]'</span> : <span class="string">'1'</span>,   <span class="comment">// 用户在当前站点的ID，就是后面需要设置的 data-author-key 值</span></div><div class="line">  <span class="string">'users[0][name]'</span>     : <span class="string">''</span>,    <span class="comment">// 显示的名字</span></div><div class="line">  <span class="string">'users[0][email]'</span>    : <span class="string">''</span>     <span class="comment">// 提醒的邮箱</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">request.post(&#123;<span class="attr">url</span>:<span class="string">'http://api.duoshuo.com/users/import.json'</span>, <span class="attr">form</span>: data&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error, response, body</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!error &amp;&amp; response.statusCode == <span class="number">200</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'success'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>终端里跑一下该 js <code>node a.js</code></p>
<p>然后浏览器打开 <code>多说short_name</code>.duoshuo.com/admin/users/ ，在“用户”那里可以看到添加了新用户，角色默认为游客，可以把他修改为作者。</p>
<p>最后在网站原来的多说代码中，就在一堆参数那里（data-thread-key、data-title...）后面照样画葫芦补上 <code>data-author-key=&quot;1&quot;</code> 即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多说只有被人回复评论时才会有邮件提醒，博主是默认不造的（怪不得一直没有收到邮件提醒 T_T）。&lt;/p&gt;
&lt;p&gt;dig 了一下，&lt;a href=&quot;http://dev.duoshuo.com/docs/5003ecd94cab3e7250000008/&quot; target=&quot;_b
    
    </summary>
    
      <category term="Tools" scheme="https://blog.crimx.com/categories/Tools/"/>
    
    
      <category term="Jekyll" scheme="https://blog.crimx.com/tags/Jekyll/"/>
    
      <category term="多说" scheme="https://blog.crimx.com/tags/%E5%A4%9A%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 函数名里面有什么？</title>
    <link href="https://blog.crimx.com/2014/12/10/whats-in-a-function-name/"/>
    <id>https://blog.crimx.com/2014/12/10/whats-in-a-function-name/</id>
    <published>2014-12-09T16:00:00.000Z</published>
    <updated>2016-12-29T17:40:51.480Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="http://bocoup.com/weblog/whats-in-a-function-name/" target="_blank">What&#39;s in a Function Name?</a>（2014-11-25）</p>
<p>每次为 JSHint 提交代码我都会学到一些 JavaScript 的新东西。最近的一次知识之旅中我接触到了函数对象的 <code>name</code> 属性。</p>
<p>JSHint 有一个很有意思但很少人知道的功能：代码分析报告。当以编程方式使用时，JSHint 会返回一个对象，描述已分析代码的数据。它包括（但不限于）代码中函数对象的信息：</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">jshint(<span class="string">'function myFn() &#123;&#125;'</span>);</div><div class="line"><span class="built_in">console</span>.log(jshint.data().functions);</div><div class="line"><span class="comment">/*</span></div><div class="line">  [&#123;</div><div class="line">    name: 'myFn',</div><div class="line">    param: undefined,</div><div class="line">    line: 1,</div><div class="line">    character: 15,</div><div class="line">    last: 1,</div><div class="line">    lastcharacter: 19,</div><div class="line">    metrics: &#123; complexity: 1, parameters: 0, statements: 0 &#125;</div><div class="line">  &#125;]</div><div class="line"> */</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>JSHint 网站本身实时生成的“Metrics”报告是这个功能最突出的使用。比如：</p>
<blockquote>
  <p>Metrics</p>
  <ul>
    <li>There is only one function in this file.</li>
    <li>It takes no arguments.</li>
    <li>This function is empty.</li>
    <li>Cyclomatic complexity number for this function is 1.</li>
  </ul>
</blockquote>
<p>我得知这个功能在与一个不相关的 bug 一起工作时会出错。更困扰我的是，我发现自己以前对 JavaScript 函数名的理解完全是错误的。对我的三观质疑了几个小时（“名字意味着什么？”、“我是真实存在的么？”....）之后，我决定开始研究这个 issue 并一劳永逸地学习正确的理解。下面是我所学到的东西。</p>
<h2 id="你以为自己知道">
  <a href="#你以为自己知道" class="headerlink" title="你以为自己知道..."></a>你以为自己知道...</h2>
<p>首先我该解释一下我一开始对 name 如何在 JavaScript 中分配的误解。</p>
<p>我以前只知道函数对象间的一个区别 —— 函数声明与函数表达式。前者需要一个标识符，所以我通常认为这是一个“命名函数”：</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>而后者不需要标识符，我就把它叫作“匿名函数”：</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;());</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>这种推断在直觉上是合理的，因为它用了直白的词语定义如“命名的”和“匿名的”。这也许可以解释为何不止我一个人存在这个误解。事实上：现在的 JavaScript （ECMAScript 5.1 或缩写 ES5）对于函数的 <code>name</code> 属性并没有明确的说明。稍微看看这个<a href="http://es5.github.io/#x13" target="_blank">相关的说明</a>可以支持我的观点。我们一般认为命名函数表达式中的标识符会指向“name”，实际上它只会被用在环境记录（environment
  record）中创建一个入口（entry），（跟 <code>var</code> 声明一样）。除此以外的说明都会存在平台特定的细微差异。</p>
<p>（三观已崩溃）</p>
<h2 id="你根本不知道">
  <a href="#你根本不知道" class="headerlink" title="...你根本不知道"></a>...你根本不知道</h2>
<p>碰巧下一代 JavaScript （即 ES6 ，<a href="https://people.mozilla.org/~jorendorff/es6-draft.html" target="_blank">工作草案在这里</a>）的说明中明确了函数 <code>name</code> 属性的初始化。很方便的是，它完全是依赖于一个叫
  <a href="https://people.mozilla.org/~jorendorff/es6-draft.html#sec-setfunctionname" target="_blank">SetFunctionName</a> 的<a href="https://people.mozilla.org/~jorendorff/es6-draft.html#sec-abstract-operations" target="_blank">抽象操作</a>。学习函数名赋值的来龙去脉其实就是简单（虽然也比较无聊）地去研究草案中关于这个操作的所有文献。对于平台实现者来说这必不可少，但对于我们来说，稍微学习几个例子就足够了。</p>
<p>首先，这个规范形式化了一些我们可以预料到的行为：</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment">// 函数形式 ........................ `name` 属性的值</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunc</span>(<span class="params"></span>) </span>&#123;&#125;                  <span class="comment">// 'myFunc;</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;());                    <span class="comment">// ''</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>但远不止如此！这份规范还列出了一系列情况下，函数表达式（我前面所以为的“匿名函数”）也应该被赋予 <code>name</code> 值：</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment">// 函数形式 ........................ `name` 属性的值</span></div><div class="line"><span class="keyword">new</span> <span class="built_in">Function</span>();                       <span class="comment">// 'anonymous'</span></div><div class="line"><span class="keyword">var</span> toVar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;            <span class="comment">// 'toVar'</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;).bind();               <span class="comment">// 'bound'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  <span class="attr">myMethod</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,            <span class="comment">// 'myMethod'</span></div><div class="line">  get myGetter() &#123;&#125;,                  <span class="comment">// 'get myGetter'</span></div><div class="line">  set mySetter(value) &#123;&#125;              <span class="comment">// 'set mySetter'</span></div><div class="line">&#125;;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>但这里要清楚，新规范只会在上面的这些情况下才改变函数对象的 <code>name</code> 属性。至于现在的 ES5 语法，环境记录依然会保持不变，只有函数声明才会产生新入口。</p>
<p>这让我很惊讶，因为不像函数声明，我从来没有想到对变量或属性的赋值会与函数对象的创建有联系。但 ES6 就是这么任性！JSHint 团队将这个行为称作“名推断”（name inference）。函数对象本身没有让标识符定义，而是由运行时通过其初始赋值去对函数的名字做“最佳猜测”。</p>
<p>最后，ES6 定义了一大堆不兼容 ES5 的新代码格式。当中一部分进一步扩展了函数名推断的语义：</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment">// 函数形式 ........................ `name` 属性的值</span></div><div class="line"><span class="keyword">let</span> toLet = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;            <span class="comment">// 'toLet'</span></div><div class="line"><span class="keyword">const</span> toConst = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;        <span class="comment">// 'toConst'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;          <span class="comment">// 'default'</span></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">myGenerator</span>(<span class="params"></span>) </span>&#123;&#125;            <span class="comment">// 'myGenerator'</span></div><div class="line"><span class="keyword">new</span> GeneratorFunction() &#123;&#125;            <span class="comment">// 'anonymous'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  [<span class="string">'exp'</span> + <span class="string">'ression'</span>]: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;, <span class="comment">// 'expression'</span></div><div class="line">  myConciseMethod() &#123;&#125;,               <span class="comment">// 'myConciseMethod'</span></div><div class="line">  *myGeneratorMethod() &#123;&#125;             <span class="comment">// 'myGeneratorMethod'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;&#125;                    <span class="comment">// 'MyClass'</span></div><div class="line">  myClassMethod() &#123;&#125;                  <span class="comment">// 'myClassMethod'</span></div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>最后一个例子让我很吃惊，构造函数居然被赋予类的名字而不是“constructor”？对于其它大多数的类方法，其 <code>name</code> 值跟你想的基本一样。但构造方法很特殊，因为他们本质上都是引用其归属的类。这在 ES5 中也有相应的例子：</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">MyClass.prototype.constructor === MyClass;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>这个原则同样适用于 ES6 ，即便构造函数体与 <code>class</code> 关键字出现在不同的表达式中。</p>
<h2 id="标准偏差">
  <a href="#标准偏差" class="headerlink" title="标准偏差"></a>标准偏差</h2>
<p>手中有了完整的规格书，我们就可以重新看看 JSHint 中函数名推断的过程。注意它也不是一模一样照搬实现的，有些地方我们是故意做得跟规范不同。</p>
<p>「表达式」：很多情况下，实现者会直接以表达式的结果去调用 <code>SetFunctionName</code> 。（如：“设 <code>propKey</code> 为对 <code>PropertyName</code> 求值的结果。[…] <code>SetFunctionName(propValue, propKey)</code> 。”）且因为 JSHint 是一个静态分析工具，它不会对检测的代码做任何计算（见文末）。所以这种情况下，我们会报告此函数的 <code>name</code>  为“(expression)”。</p>
<p>「未命名」：规范要求“若 <code>description</code> 值为 <strong>undefined</strong> ，则 <code>name</code> 值取空字符串。”这里意思是类似下面的函数声明：</p>
<p></p>
<figure class="highlight javascript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;)();</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p></p>
<p>其 <code>name</code> 值应该为 “” 。但我们决定对这种函数的 <code>name</code> 报告为“(empty)”。因为 JSHint 这个工具的目的是协助开发者而不是 JavaScript runtime ，我们觉得在这种情况下将规范作重新解释是可以接受的。具体来说：JSHint 在其报告中赋予函数的名字不会引起兼容性问题，所以我们实现了不同的行为，因为这样做更有帮助。</p>
<p><a href="https://github.com/jshint/jshint/pull/1971" target="_blank">改进的函数名推断已经在 JSHint 的 master 分支中 landed 了</a>，可以展望它会出现在下个 release 中。</p>
<h2 id="其它名字的函数">
  <a href="#其它名字的函数" class="headerlink" title="其它名字的函数"></a>其它名字的函数</h2>
<p>我从不厌倦去阅读下一代 JavaScript 的各种炫酷新特性。即便如此，对比起 generator、class、module 和 promise ，函数名的确显得有些过时。悲观者甚至会认为这是语言中的一个没有必要的累赘。但正如任何优秀的标准，这个新特性实际上也是一种现实需求的体现。</p>
<p>报错的栈跟踪里需要函数名。缺少函数名推断的情况下，平台一般会用一些通用的替换值如“(anonymous function)”去报告没有名字的函数。这往往会从整体上削弱了栈跟踪的实用性。现在的一些性能检测工具和控制台会识别一个叫 <code>displayName</code> 的非标准值，并在栈跟踪时回退到该值。<a href="https://medium.com/@cramforce/on-the-awesomeness-of-fn-displayname-9511933a714a" target="_blank">Malte Ubl 最近也赞成将此纳入 JavaScript 库代码</a>，<a href="https://github.com/emberjs/ember.js/blob/43423f6acd1abd4ffb0de6afb744d4897ae2f768/packages/ember-metal/lib/logger.js#L20" target="_blank">Ember.js 也对此稍作尝试</a>。</p>
<p>但随着 runtime 实现了新功能，诸如此类的非标准方法就变得没什么必要了。这个小小的改变可以帮助开发者专注于着手解决问题而无需担心怎么减少调试陷阱。所以即使在即将到来的各种 JavaScript 会议中你不太可能会见到标题为“ES6 中的函数名推断”之类的演讲，这个小小的特性依然值得庆祝。</p>
<ul>
  <li>JSHint 的确会<a href="https://github.com/jshint/jshint/blob/d0b3cfd935c9445f14b37ea9694d8a172a52739a/src/jshint.js#L2335-L2348" target="_blank">对封闭字符串做连接操作</a>，但这基本算不上是代码执行。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;http://bocoup.com/weblog/whats-in-a-function-name/&quot; target=&quot;_blank&quot;&gt;What&amp;#39;s in a Function Name?&lt;/a&gt;（2014-11-25）&lt;/p&gt;
&lt;p&gt;每次为
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.crimx.com/categories/JavaScript/"/>
    
    
      <category term="Translation" scheme="https://blog.crimx.com/tags/Translation/"/>
    
      <category term="Understanding JavaScript" scheme="https://blog.crimx.com/tags/Understanding-JavaScript/"/>
    
      <category term="Function" scheme="https://blog.crimx.com/tags/Function/"/>
    
  </entry>
  
</feed>
