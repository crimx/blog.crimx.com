<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CRIMX</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.crimx.com/"/>
  <updated>2017-07-06T11:24:19.498Z</updated>
  <id>https://blog.crimx.com/</id>
  
  <author>
    <name>StrayBugs</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Manacher 马拉车算法</title>
    <link href="https://blog.crimx.com/2017/07/06/manachers-algorithm/"/>
    <id>https://blog.crimx.com/2017/07/06/manachers-algorithm/</id>
    <published>2017-07-05T16:00:00.000Z</published>
    <updated>2017-07-06T11:24:19.498Z</updated>
    
    <content type="html"><![CDATA[<p>马拉车算法可以在线性时间复杂度内求出一个字符串的最长回文字串。其核心思想跟 KMP 相似，即反复利用已掌握的情况。</p>
<p>视频推荐看这个，觉得是最清晰易懂的：</p>
<p></p>
<p><iframe width="560" height="315" style="width:100%" src="" data-type="youtube" data-src="//www.youtube.com/embed/nbTSfrEfo6M" frameborder="0" allowfullscreen></iframe></p>
<p></p>
<h2 id="整体思路">
<a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h2>
<p>这个算法的主要思路是维护一个跟原串 str 一样长的数组 lens。lens[i] 表示以 str[i] 为中点的回串其中一边的长度。这里有的人把中点算进去，有的人记录两边的长度，其实都一样，我这里是只记录一边的长度，不包括中点。比如 <code>&quot;CDCDE&quot;</code></p>
<p></p>
<figure class="highlight plain">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div></pre>
</td>
<td class="code">
<pre><div class="line">str:  [C, D, C, D, E]</div><div class="line">lens: [0, 1, 1, 0, 0]</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>那么 lens 里最大的自然就对应最长回串的中点了。所以这个算法的核心就是如何快速计算 lens。</p>
<h2 id="预处理">
<a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2>
<p>回文有奇偶长度两种情况，通过补充间隔符可以将这两种情况化简为奇数长度。</p>
<p>比如 <code>ABA</code> 补充为 <code>#A#B#A#</code> 中点还是 B，<code>ABBA</code> 补充为 <code>#A#B#B#A#</code> 中点为 <code>#</code>，最后可以去掉。</p>
<p>算法用 JavaScript 写，我将原串转为数组，间隔符就用 <code>null</code>。</p>
<p>最后在两侧补上哨兵点方便遍历中止。我用了 <code>NaN</code>。所以看起来是这样</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">var</span> arr = [<span class="literal">NaN</span>, <span class="literal">null</span>]</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i += <span class="number">1</span>) &#123;</div><div class="line">  arr.push(str[i])</div><div class="line">  arr.push(<span class="literal">null</span>)</div><div class="line">&#125;</div><div class="line">arr.push(<span class="literal">NaN</span>)</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="计算长度数组">
<a href="#计算长度数组" class="headerlink" title="计算长度数组"></a>计算长度数组</h2>
<h3 id="朴素计算方法">
<a href="#朴素计算方法" class="headerlink" title="朴素计算方法"></a>朴素计算方法</h3>
<p>以一个中心计算回串，最直接的方法当然是左右遍历对比了，比如以 i 为中心：</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
</td>
<td class="code">
<pre><div class="line">lens[i] = <span class="number">0</span></div><div class="line"><span class="keyword">while</span> (arr[i + lens[i] + <span class="number">1</span>] === arr[i - lens[i] - <span class="number">1</span>]) &#123;</div><div class="line">  lens[i] += <span class="number">1</span></div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>这个就是计算长度基本方式。n 个点，每个点最多计算 n/2 遍，所以是 n 平方复杂度。</p>
<h3 id="手背手心都是肉">
<a href="#手背手心都是肉" class="headerlink" title="手背手心都是肉"></a>手背手心都是肉</h3>
<p>看回上面的算法，可以发现，lens[i] 是从 0 开始的，这个很正常，一开始当然是 0 ，回串嘛，从中心开始两侧都要一一比较相等才行。</p>
<p>但再进一步看，0 代表从头开始，即对于每个中心点，我们都是从什么都不知道开始，什么情况都没有掌握。</p>
<p>事实是这样吗？</p>
<p>既然有了这个算法，事实当然不是。这时就很容易联系到回串的特性，对称。</p>
<p>先来一个简单的例子 <code>OABAXABAO</code>。两个 B 是 X 的对称点，左边 B 对应的 lens[j] 长度显然是 1，当我们计算右边 B 的 lens[i] 时候，是不是可以把 lens[j] 的值直接复制过来。因为它们是镜面对称的，所以都是一样，不过是反过来而已。</p>
<h3 id="最右中心">
<a href="#最右中心" class="headerlink" title="最右中心"></a>最右中心</h3>
<p>我们维护一个已知最右的回串，设其中心点 iCenter 以及其最右点 iRight。显然两者有这么的关系 <code>iRight = iCenter + lens[iCenter]</code>。</p>
<p>这个回串是最右的，也就是说 iRight 是最大的。有更右的就不断更新。</p>
<p>为什么要维护最右回串？</p>
<p>当我们一个个遍历中点 i 时，因 iCenter 已知，故必然是已经遍历过了，所以 i 肯定是在 iCenter 的右边，这就保证了两种情况：</p>
<ol>
<li>i &lt;= iRight，在最右回串的范围内，可以应用上面的镜面复制；</li>
<li>i &gt; iRight，超出了最右，在未知区域，只能用朴素方式计算。</li>
</ol>
<p>这就是这个算法的核心思想了，最后引入两个边界情况：</p>
<h3 id="右贴界">
<a href="#右贴界" class="headerlink" title="右贴界"></a>右贴界</h3>
<p>像简单例子的 <code>OABAXABAO</code> 可以明确知道 X 和 O 不相等，所以复制过来就行。但如果是 <code>OABAXABA...</code> 就不知道下一个是不是 X 了。我们只能知道下一个肯定不是 O，因为最右串 X 的范围到 A 就截止了。</p>
<p>所以右边 B 对应的 lens[i] 得到了 1 之后，在这基础上继续用朴素方式比较两侧。</p>
<p>意思是“我现在可以确定右 B 两侧 1 个长度内是对称的，其它未知，继续比较下去看如何”。</p>
<p>如果右 B 比较下去有戏的话，那么右 B 就是新的最右串了，更新 iCenter 和 iRight 值。</p>
<p>右贴界的条件是 <code>i + lens[i] === iRight</code>。</p>
<h3 id="左越界">
<a href="#左越界" class="headerlink" title="左越界"></a>左越界</h3>
<p>对于串 <code>XABAXABA...</code>。两个 B 还是 X 的对称点，但是左边的 B 对应的 lens[j] 长度是 2，右边 B 的 lens[i] 可以看到是 1。</p>
<p>为什么？</p>
<p>理解上面提到的镜面对称就很简单了，X 为中心的回串是 <code>ABAXABA</code>，也就是左边到了 A 就截止了，左 X 是超出的，所以不对称。因为如果最右的下一个位也是 X 的话，最右回串就应该是 <code>XABAXABAX</code> 了是不是。</p>
<p>所以，当左边的 B 超出了中心 X 的范围时，我们只复制在最右回串范围内的部分。</p>
<p>即对于左边的 B，我们知道范围内的是 <code>ABA</code> ，为 1，复制给右边 B 对应的 lens[i]，再按右贴界处理。</p>
<p>设左 B 的索引为 iMirror，因为左右 B 对称，故 <code>iMiiror = iCenter - (i - iCenter) = 2 * iCenter - i</code>。</p>
<p>左 B 到 iCenter 左边界的距离我们用镜面对称过来就是右 B 到 iCenter 右边界的距离 <code>iRight - i</code>。</p>
<p>于是左越界的条件就是 <code>lens[iMiiror] &gt; iRight - i</code>。</p>
<h3 id="整合">
<a href="#整合" class="headerlink" title="整合"></a>整合</h3>
<p>可以看到，我们复制镜面值要考虑三种情况，范围内、右贴界、左越界，其中左越界又包含了右贴界。于是简洁起见，我们全部当右贴界处理，因为如果在范围内比较下去自然不相等，相当于去掉了 if 判断。</p>
<p>然后整合范围内和左越界，范围内指 <code>lens[iMiiror] &lt;= iRight - i</code>，直接复制 <code>lens[iMiiror]</code>；左越界指 <code>lens[iMiiror] &gt; iRight - i</code>，取 <code>iRight - 1</code>。故整合为 <code>min(iRight - i, lens[iMirror])</code>。</p>
<h2 id="完整算法">
<a href="#完整算法" class="headerlink" title="完整算法"></a>完整算法</h2>
<p>所以完整算法如下</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">manacher</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">  str = <span class="built_in">String</span>(str)</div><div class="line"></div><div class="line">  <span class="keyword">var</span> arr = [<span class="literal">NaN</span>, <span class="literal">null</span>]</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i += <span class="number">1</span>) &#123;</div><div class="line">    arr.push(str[i])</div><div class="line">    arr.push(<span class="literal">null</span>)</div><div class="line">  &#125;</div><div class="line">  arr.push(<span class="literal">NaN</span>)</div><div class="line"></div><div class="line">  <span class="keyword">var</span> iCenterMax = <span class="number">1</span></div><div class="line">  <span class="keyword">var</span> lens = []</div><div class="line">  <span class="keyword">var</span> iCenter = <span class="number">0</span></div><div class="line">  <span class="keyword">var</span> iRight = <span class="number">0</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.length - <span class="number">1</span>; i += <span class="number">1</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (arr.length - <span class="number">1</span> - i &lt;= lens[iCenterMax]) &#123;</div><div class="line">      <span class="keyword">break</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    lens[i] = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (i &lt; iRight) &#123;</div><div class="line">      <span class="keyword">let</span> iMirror = <span class="number">2</span> * iCenter - i</div><div class="line">      lens[i] = <span class="built_in">Math</span>.min(iRight - i, lens[iMirror])</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (arr[i + lens[i] + <span class="number">1</span>] === arr[i - lens[i] - <span class="number">1</span>]) &#123;</div><div class="line">      lens[i] += <span class="number">1</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (i + lens[i] &gt; iRight) &#123;</div><div class="line">      iCenter = i</div><div class="line">      iRight = i + lens[i]</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (lens[i] &gt; lens[iCenterMax]) &#123;</div><div class="line">      iCenterMax = i</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> arr.slice(iCenterMax - lens[iCenterMax], iCenterMax + lens[iCenterMax] + <span class="number">1</span>)</div><div class="line">    .filter(<span class="function"><span class="params">item</span> =&gt;</span> item !== <span class="literal">null</span>)</div><div class="line">    .join(<span class="string">''</span>)</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;马拉车算法可以在线性时间复杂度内求出一个字符串的最长回文字串。其核心思想跟 KMP 相似，即反复利用已掌握的情况。&lt;/p&gt;
&lt;p&gt;视频推荐看这个，觉得是最清晰易懂的：&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; style
    
    </summary>
    
      <category term="Algorithms" scheme="https://blog.crimx.com/categories/Algorithms/"/>
    
    
      <category term="Recommended" scheme="https://blog.crimx.com/tags/Recommended/"/>
    
      <category term="Manacher" scheme="https://blog.crimx.com/tags/Manacher/"/>
    
      <category term="算法" scheme="https://blog.crimx.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Algorithms" scheme="https://blog.crimx.com/tags/Algorithms/"/>
    
      <category term="回文" scheme="https://blog.crimx.com/tags/%E5%9B%9E%E6%96%87/"/>
    
      <category term="Palindrome" scheme="https://blog.crimx.com/tags/Palindrome/"/>
    
      <category term="字符串" scheme="https://blog.crimx.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="String" scheme="https://blog.crimx.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>CSS 属性值计算</title>
    <link href="https://blog.crimx.com/2017/07/03/value-calculation-of-css-properties/"/>
    <id>https://blog.crimx.com/2017/07/03/value-calculation-of-css-properties/</id>
    <published>2017-07-02T16:00:00.000Z</published>
    <updated>2017-07-03T13:22:12.511Z</updated>
    
    <content type="html"><![CDATA[<p>属性值的计算可谓是 CSS 101 。然而入门资料从来都是良莠不齐的，当初从畅销书上得来的一些误解，如今整理笔记的时候才发现。这里就结合规范梳理一遍。</p>
<p>一个属性的值在计算时会经过 4 个阶段</p>
<ol>
<li>Specified values</li>
<li>Computed values</li>
<li>Used values</li>
<li>Actual values</li>
</ol>
<h2 id="Specified-values">
<a href="#Specified-values" class="headerlink" title="Specified values"></a>Specified values</h2>
<p>这里有 3 种可能，满足一种就可以</p>
<ul>
<li>计算 cascade 有结果</li>
<li>否则，若这个值可以继承，继承父元素的 computed value（根元素除外）</li>
<li>还是没有，则用默认值</li>
</ul>
<h3 id="计算-cascade">
<a href="#计算-cascade" class="headerlink" title="计算 cascade"></a>计算 cascade</h3>
<p>这里就是重点，经历 4 个步骤：</p>
<ol>
<li>匹配 Media Type 的筛选</li>
<li>按来源排序（低到高）
<ol>
<li>user agent declarations</li>
<li>user normal declarations</li>
<li>author normal declarations</li>
<li>author important declarations</li>
<li>user important declarations</li>
</ol>
</li>
<li>同个来源的按权值（specificity）排序，收集选择器里的属性个数比较
<ul>
<li>&quot;style&quot; 属性（attribute）里的属性 * 1000</li>
<li>ID 属性 * 100</li>
<li>其它属性、类、伪类 * 10</li>
<li>元素名、伪元素 * 1</li>
</ul>
</li>
<li>如果前面得出并列结果，则按位置排序
<ul>
<li>越靠后越高</li>
<li>import 进来的样式看做在本样式表前面</li>
</ul>
</li>
</ol>
<p>可以看到来源总共有三个，user agent、user 和 author。User important 最高是因为用户的自定义样式一般是为了覆盖 user agent 作为默认样式，但有时候用户也想覆盖 author 即网站本身的样式，于是让 user important 最高。</p>
<p>注意 <code>&lt;style&gt;</code> 与 <code>&lt;link&gt;</code> 引入的 CSS 同属 author declarations 也就是说两者的等级是<strong>一样的</strong>，按先后顺序覆盖。</p>
<p>HTML 里若有非 CSS 的样式属性（presentational attributes），比如 font 之类，UA 可能将其翻译为 CSS 属性，放在 author style sheet 开端，并赋予权值 0。</p>
<h2 id="Computed-values">
<a href="#Computed-values" class="headerlink" title="Computed values"></a>Computed values</h2>
<p>在排版前就可以确定的值。在元素定义的 Computed Value 区域可以查到，如</p>
<ul>
<li>URI 计算绝对路径</li>
<li>&#39;em&#39; 和 &#39;ex&#39; 计算成 px 或绝对长度。</li>
</ul>
<p>比如</p>
<p></p>
<figure class="highlight css">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">font-size</span>: <span class="number">10px</span>; &#125;</div><div class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">font-size</span>: <span class="number">120%</span>; &#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>h1 先计算 cascade 按继承得到了 10px ，再在本阶段计算得 12px。</p>
<h2 id="Used-values">
<a href="#Used-values" class="headerlink" title="Used values"></a>Used values</h2>
<p>排版之后才能确定的值，如百分比宽度，必须排版才能知道父容器宽度。</p>
<h2 id="Actual-values">
<a href="#Actual-values" class="headerlink" title="Actual values"></a>Actual values</h2>
<p>实际用于渲染的值，由于设备环境等因素，一些值可能不能用，需要作出变化。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;属性值的计算可谓是 CSS 101 。然而入门资料从来都是良莠不齐的，当初从畅销书上得来的一些误解，如今整理笔记的时候才发现。这里就结合规范梳理一遍。&lt;/p&gt;
&lt;p&gt;一个属性的值在计算时会经过 4 个阶段&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Specified values&lt;/li&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://blog.crimx.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://blog.crimx.com/tags/CSS/"/>
    
      <category term="闲读规范" scheme="https://blog.crimx.com/tags/%E9%97%B2%E8%AF%BB%E8%A7%84%E8%8C%83/"/>
    
      <category term="Box Model" scheme="https://blog.crimx.com/tags/Box-Model/"/>
    
      <category term="Visual Formatting Model" scheme="https://blog.crimx.com/tags/Visual-Formatting-Model/"/>
    
  </entry>
  
  <entry>
    <title>CSS VFM 中易混淆的名词概念</title>
    <link href="https://blog.crimx.com/2017/05/29/css-vfm-concepts/"/>
    <id>https://blog.crimx.com/2017/05/29/css-vfm-concepts/</id>
    <published>2017-05-28T16:00:00.000Z</published>
    <updated>2017-07-03T08:51:36.722Z</updated>
    
    <content type="html"><![CDATA[<p><span class="github-emoji" title=":warning:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/26a0.png?v7">&#x26a0;</span>第一遍看 CSS2.1 VFM（Visual Formatting Model）是看别人整理的<a href="http://book.mixu.net/css/" target="_blank">笔记</a>，辅助理解很不错，但是在名词概念上作者跳过了一些或者打乱了顺序，所以现在看回文档时发现当初有一些理解不太正确。于是在这篇文章将这些概念系统整理了一遍。</p>
<h2 id="Element-与-Box">
<a href="#Element-与-Box" class="headerlink" title="Element 与 Box"></a>Element 与 Box</h2>
<ul>
<li>
<p>第一个概念是 Element （元素）与 Box （盒子）。用 Element 的时候是指 document tree （文档树）的节点，Box 则是指元素根据 VFM 和 Box Model 生成的盒子。一个元素可能生成零个或多个盒子。</p>
</li>
<li>
<p>Box Model 描述了一个矩形的盒子。每个盒子都有 content area，可能有 padding, border, margin areas。</p>
</li>
</ul>
<p><img src="/images/post/box-model.png" alt="box-model"></p>
<h2 id="Block-level-Element">
<a href="#Block-level-Element" class="headerlink" title="Block-level Element"></a>Block-level Element</h2>
<ul>
<li>
<p>display 值为 &#39;block/list-item/table&#39; 的元素叫 <em>block-level element</em>。</p>
</li>
<li>
<p>每个 block-level element 都会生成一个 principal <em>block-level box</em> （list-item 还会生成其它盒子）。</p>
</li>
<li>
<p>除了 table box 和 replaced element，block-level box 都是 <em>block container box</em>。</p>
<p>Block container box 要么只包含 block-level boxes （宣布了 BFC），要么只包含 inline-level boxes （宣布了 IFC）。（BFC: Block Formatting Context, IFC: Inline Formatting Context）</p>
<p>（Block-level box 指的是这个盒子本身，它参与的是 BFC；而 block container box 说的是这个盒子内部，宣布了 BFC 或 IFC）。</p>
<p>反过来 block container box 则不一定是 block-level box，还可以是 non-replaced inline block 和 non-replaced table cell（即这些盒子参与 IFC ，内部也可以宣布 BFC 或 IFC）。</p>
</li>
<li>
<p>同时是 block-level box 和 block container box 的盒子也叫做 <em>block box</em>。</p>
</li>
</ul>
<h2 id="Inline-level-element">
<a href="#Inline-level-element" class="headerlink" title="Inline-level element"></a>Inline-level element</h2>
<ul>
<li>
<p>display 值为 &#39;inline/inline-table/inline-block&#39; 的元素叫 <em>inline-level element</em>。</p>
</li>
<li>
<p>Inline-level element 会生成 <em>inline-level box</em>。</p>
</li>
<li>
<p>display 为 &#39;inline&#39; 的 non-replaced element 生成的盒子也叫 <em>inline box</em>，指其内部参与的与其自身所在的是同个 IFC。</p>
<p>（同样，Inline-level box 说的是盒子本身，inline box 说的是盒子内部）。</p>
</li>
<li>
<p>不是 inline box 的 inline-level box （如 replaced inline-level element, inline-block element, inline-table element）叫做 <em>atomic inline-level box</em>，它们以不透明的方式参与到 IFC 中，内部不参与自身所在的 IFC。</p>
</li>
<li>
<p>Inline-level boxes 打横排成一行行的 <em>line boxes</em>。</p>
</li>
</ul>
<h2 id="Flow">
<a href="#Flow" class="headerlink" title="Flow"></a>Flow</h2>
<ul>
<li>
<p><em>Out-of-flow</em> 的元素指 absolutely positioned elements, floated elements 和 root element。</p>
</li>
<li>
<p><em>In-flow</em> 指不是 out-of-flow 的元素。</p>
</li>
</ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;span class=&quot;github-emoji&quot; title=&quot;:warning:&quot; data-src=&quot;https://assets-cdn.github.com/images/icons/emoji/unicode/26a0.png?v7&quot;&gt;&amp;#x26a0;&lt;/sp
    
    </summary>
    
      <category term="CSS" scheme="https://blog.crimx.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://blog.crimx.com/tags/CSS/"/>
    
      <category term="闲读规范" scheme="https://blog.crimx.com/tags/%E9%97%B2%E8%AF%BB%E8%A7%84%E8%8C%83/"/>
    
      <category term="Box Model" scheme="https://blog.crimx.com/tags/Box-Model/"/>
    
      <category term="Visual Formatting Model" scheme="https://blog.crimx.com/tags/Visual-Formatting-Model/"/>
    
  </entry>
  
  <entry>
    <title>纯 CSS 实现浮动介绍</title>
    <link href="https://blog.crimx.com/2017/04/29/pure-css-relative-aside/"/>
    <id>https://blog.crimx.com/2017/04/29/pure-css-relative-aside/</id>
    <published>2017-04-28T16:00:00.000Z</published>
    <updated>2017-04-28T16:25:53.369Z</updated>
    
    <content type="html"><![CDATA[<p>把扩展上传到 Chrome 商店需要在开发者后台填写一系列表单，非常喜欢它对详细介绍的处理，就想着偷师一下。</p>
<p>先上效果，下面是模仿的样子。由于详细介绍一般比设置本身要长，它使用了隐藏、按需显示的方式减少了高度。</p>
<p></p>
<p><iframe height="522" scrolling="no" title="Pure CSS Relative Aside" src="//codepen.io/straybugs/embed/JNWMmW/?height=522&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%">See the Pen <a href="https://codepen.io/straybugs/pen/JNWMmW/" target="_blank">Pure CSS Relative Aside</a> by CRIMX (<a href="http://codepen.io/straybugs" target="_blank">@straybugs</a>) on <a href="http://codepen.io" target="_blank">CodePen</a>.</iframe></p>
<p></p>
<p>看了开发者后台的代码，它是使用 JavaScript 响应鼠标事件并计算高度和显示。作为 CSS 洁癖，我第一反应当然是先考虑用 CSS 实现。</p>
<p>这里主要的问题其实就是如何让鼠标在设置（body）上响应介绍（aside）的显示。</p>
<p>在实现 iPhone 滑块开关的时候，就是通过 <code>&lt;input&gt;</code> 的 <code>:check</code> 来控制 <code>&lt;label&gt;</code> 的变化，方法是利用 <code>+</code> 选择符选择兄弟姐妹元素。</p>
<p>像这种控制其它元素的情况都可以用这个方法。</p>
<p></p>
<figure class="highlight css">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="selector-class">.item-aside</span> &#123;</div><div class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</div><div class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.item-body</span><span class="selector-pseudo">:hover</span> + <span class="selector-class">.item-aside</span> &#123;</div><div class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</div><div class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>全部的代码，也火速使(tou)用(shi)在了 <a href="http://www.crimx.com/crx-saladict/" target="_blank">Saladit</a> 的设置界面：</p>
<p></p>
<figure class="highlight html">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--  (li.item&gt;((.item-header&gt;lipsum1)+(.item-body&gt;lipsum5)+(.item-aside&gt;lipsum10)))*10  --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-header"</span>&gt;</span>Lorem.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-body"</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-aside"</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Fugiat, vitae.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-header"</span>&gt;</span>Nesciunt.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-body"</span>&gt;</span>Sit doloremque repellat natus libero.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-aside"</span>&gt;</span>Pariatur quibusdam voluptas, vero accusamus itaque. Neque magni autem sunt.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-header"</span>&gt;</span>Animi!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-body"</span>&gt;</span>Similique voluptas, sint quam eligendi.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-aside"</span>&gt;</span>Unde repudiandae, mollitia voluptatum similique repellendus eum. Ut, quae! Deleniti.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">   <span class="comment">&lt;!--  ......  --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p></p>
<figure class="highlight scss">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre>
</td>
<td class="code">
<pre><div class="line">* &#123;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.menu</span> &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">15px</span> <span class="number">10%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">1.6</span>;</div><div class="line">  <span class="attribute">word-wrap</span>: break-word;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.item-header</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">2</span> / <span class="number">12</span> * <span class="number">100%</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</div><div class="line">  <span class="attribute">text-align</span>: right;</div><div class="line">  <span class="attribute">font-weight</span>: bold;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.item-body</span> &#123;</div><div class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">10</span> / <span class="number">12</span> * <span class="number">100%</span>;</div><div class="line">  <span class="attribute">margin-right</span>: <span class="number">4</span> / <span class="number">12</span> * <span class="number">100%</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#fafafa</span>;</div><div class="line">  </div><div class="line">  &amp;:hover + <span class="selector-class">.item-aside</span> &#123;</div><div class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</div><div class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.item-aside</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">4</span> / <span class="number">12</span> * <span class="number">100%</span>;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">padding-left</span>: <span class="number">10px</span> * <span class="number">2</span> + <span class="number">1px</span>;</div><div class="line">  <span class="attribute">padding-right</span>: <span class="number">10px</span>;</div><div class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">transition</span>: all <span class="number">400ms</span>;</div><div class="line">  </div><div class="line">  <span class="comment">// left line</span></div><div class="line">  &amp;::after &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">border-left</span>: <span class="number">1px</span> <span class="number">#ddd</span> solid;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  &amp;:hover &#123;</div><div class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</div><div class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;把扩展上传到 Chrome 商店需要在开发者后台填写一系列表单，非常喜欢它对详细介绍的处理，就想着偷师一下。&lt;/p&gt;
&lt;p&gt;先上效果，下面是模仿的样子。由于详细介绍一般比设置本身要长，它使用了隐藏、按需显示的方式减少了高度。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;iframe h
    
    </summary>
    
      <category term="CSS" scheme="https://blog.crimx.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://blog.crimx.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>定位与拖动 Iframe</title>
    <link href="https://blog.crimx.com/2017/04/06/position-and-drag-iframe/"/>
    <id>https://blog.crimx.com/2017/04/06/position-and-drag-iframe/</id>
    <published>2017-04-05T16:00:00.000Z</published>
    <updated>2017-04-20T15:58:09.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定位-iframe">
<a href="#定位-iframe" class="headerlink" title="定位 iframe"></a>定位 iframe</h1>
<p>在写一个划词翻译扩展 <a href="http://www.crimx.com/crx-saladict/" target="_blank">Saladict</a> 时，有一个需求：用户选择一段文本之后，会在鼠标附近显示一些元素。</p>
<p>这个初看很简单，监听一个 <code>mouseup</code> 事件，获取 <code>clientX</code> 和 <code>clientY</code> 就行。这也是 Saladict 前几版用的方法。</p>
<p>但这个方法有个缺陷：iframe 里的鼠标事件不会传到父窗口上。</p>
<p>解决方法也很简单，就难在把它们都联系起来。</p>
<h2 id="iframe-里插入脚本">
<a href="#iframe-里插入脚本" class="headerlink" title="iframe 里插入脚本"></a>iframe 里插入脚本</h2>
<p>在 <code>manifest.json</code> 里，<code>content_scripts</code> 有个选项 <code>all_frames</code>，可以让脚本插入到所有的 frame 里。</p>
<p></p>
<figure class="highlight json">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre>
</td>
<td class="code">
<pre><div class="line">&#123;</div><div class="line">  <span class="attr">"content_scripts"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"js"</span>: [<span class="string">"selection.js"</span>],</div><div class="line">      <span class="attr">"matches"</span>: [<span class="string">"&lt;all_urls&gt;"</span>],</div><div class="line">      <span class="attr">"all_frames"</span>: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="检测点击">
<a href="#检测点击" class="headerlink" title="检测点击"></a>检测点击</h2>
<p>现在可以检测 iframe 里的点击事件</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="comment">// selection.js</span></div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'mouseup'</span>, handleMouseUp)</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="上传坐标">
<a href="#上传坐标" class="headerlink" title="上传坐标"></a>上传坐标</h2>
<p>当点击发生在 iframe 里时，获取的坐标是相对于 iframe 窗口的，所以把这个坐标交给上层，再加上 iframe 本身的坐标，就可以算出点击相对上层的坐标。</p>
<p>Chrome 里可以放心使用 <code>postMessage</code></p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="comment">// selection.js</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleMouseUp</span> (<span class="params">evt</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.parent === <span class="built_in">window</span>) &#123;</div><div class="line">    <span class="comment">// 到了顶层</span></div><div class="line">    doAwesomeThings(evt.clientX，evt.clientY)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// 把坐标传上去</span></div><div class="line">    <span class="built_in">window</span>.parent.postMessage(&#123;</div><div class="line">      <span class="attr">msg</span>: <span class="string">'SALADICT_CLICK'</span>,</div><div class="line">      <span class="attr">mouseX</span>: evt.clientX,</div><div class="line">      <span class="attr">mouseY</span>: evt.clientY</div><div class="line">    &#125;, <span class="string">'*'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="计算偏移">
<a href="#计算偏移" class="headerlink" title="计算偏移"></a>计算偏移</h2>
<p>上层怎么知道是哪个 iframe 传来坐标？很简单，<code>message</code> 事件里携带了 iframe 的 <code>window</code>，对比一下就可以。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="comment">// selection.js</span></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, evt =&gt; &#123;</div><div class="line">  <span class="keyword">if</span> (evt.data.msg !== <span class="string">'SALADICT_CLICK'</span>) &#123; <span class="keyword">return</span> &#125;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> iframe = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">'iframe'</span>))</div><div class="line">    .filter(<span class="function"><span class="params">f</span> =&gt;</span> f.contentWindow === evt.source)</div><div class="line">    [<span class="number">0</span>]</div><div class="line">  <span class="keyword">if</span> (!iframe) &#123; <span class="keyword">return</span> &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 计算偏移</span></div><div class="line">  <span class="keyword">let</span> pos = iframe.getBoundingClientRect()</div><div class="line">  <span class="keyword">let</span> mouseX = evt.data.mouseX + pos.left</div><div class="line">  <span class="keyword">let</span> mouseY = evt.data.mouseY + pos.top</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.parent === <span class="built_in">window</span>) &#123;</div><div class="line">    <span class="comment">// 顶层</span></div><div class="line">    doAwesomeThings(mouseX, mouseY)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// 继续上传</span></div><div class="line">    <span class="built_in">window</span>.parent.postMessage(&#123;</div><div class="line">      <span class="attr">msg</span>: <span class="string">'SALADICT_CLICK'</span>,</div><div class="line">      mouseX,</div><div class="line">      mouseY</div><div class="line">    &#125;, <span class="string">'*'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h1 id="拖动-iframe">
<a href="#拖动-iframe" class="headerlink" title="拖动 iframe"></a>拖动 iframe</h1>
<p>Saladict 另外一个需求就是拖动一个 iframe 查词面板。</p>
<h2 id="实现拖动的常识">
<a href="#实现拖动的常识" class="headerlink" title="实现拖动的常识"></a>实现拖动的常识</h2>
<p>实现拖动的一种常用方式就是检测 <code>mousedown</code>, <code>mousemove</code> 和 <code>mouseup</code>。分别对应开始、拖动、结束。然后计算偏移值应用到 <code>left</code> 和 <code>top</code> 上。</p>
<p>第一次实现很容易犯的一个错误就是监听元素本身的 <code>mousemove</code>。当然这个也可以正确计算出偏移，问题在于如果鼠标移动稍快超出了元素，拖动就卡掉了。所以应该监听全局的 <code>mousemove</code> 获取偏移值。</p>
<h2 id="iframe-特色的拖动">
<a href="#iframe-特色的拖动" class="headerlink" title="iframe 特色的拖动"></a>iframe 特色的拖动</h2>
<p>iframe 的拖动同理，只是因为发生在 iframe 里的事件不能传到上层，需要手动打包一下。</p>
<h2 id="iframe-部分">
<a href="#iframe-部分" class="headerlink" title="iframe 部分"></a>iframe 部分</h2>
<p>拖动由 iframe 里的某个元素触发，为了节省资源，在触发的时候才监听拖动和结束，并在结束的时候解绑。</p>
<p>在 iframe 里监听 <code>mousemove</code> 就是为了把偏移值传回上层，因为上层的 <code>mousemove</code> 事件到这里中断了。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="comment">// iframe.js</span></div><div class="line"><span class="keyword">var</span> baseMouseX, baseMouseY</div><div class="line"></div><div class="line">$dragArea.addEventListener(<span class="string">'mousedown'</span>, handleDragStart)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleDragStart</span> (<span class="params">evt</span>) </span>&#123;</div><div class="line">  baseMouseX = evt.clientX</div><div class="line">  baseMouseY = evt.clientY</div><div class="line"></div><div class="line">  <span class="built_in">window</span>.parent.postMessage(&#123;</div><div class="line">    <span class="attr">msg</span>: <span class="string">'SALADICT_DRAG_START'</span>,</div><div class="line">    <span class="attr">mouseX</span>: baseMouseX,</div><div class="line">    <span class="attr">mouseY</span>: baseMouseY</div><div class="line">  &#125;, <span class="string">'*'</span>)</div><div class="line"></div><div class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'mouseup'</span>, handleDragEnd)</div><div class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'mousemove'</span>, handleMousemove)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleMousemove</span> (<span class="params">evt</span>) </span>&#123;</div><div class="line">  <span class="built_in">window</span>.parent.postMessage(&#123;</div><div class="line">    <span class="attr">msg</span>: <span class="string">'SALADICT_DRAG_MOUSEMOVE'</span>,</div><div class="line">    <span class="attr">offsetX</span>: evt.clientX - baseMouseX,</div><div class="line">    <span class="attr">offsetY</span>: evt.clientY - baseMouseY</div><div class="line">  &#125;, <span class="string">'*'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleDragEnd</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">window</span>.parent.postMessage(&#123;</div><div class="line">    <span class="attr">msg</span>: <span class="string">'SALADICT_DRAG_END'</span></div><div class="line">  &#125;, <span class="string">'*'</span>)</div><div class="line"></div><div class="line">  <span class="built_in">document</span>.removeEventListener(<span class="string">'mouseup'</span>, handleDragEnd)</div><div class="line">  <span class="built_in">document</span>.removeEventListener(<span class="string">'mousemove'</span>, handleMousemove)</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="上层部分">
<a href="#上层部分" class="headerlink" title="上层部分"></a>上层部分</h2>
<p>主要增加了<code>handleFrameMousemove</code> 补上中断的偏移。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="comment">// parent.js</span></div><div class="line"><span class="keyword">var</span> pageMouseX, pageMouseY</div><div class="line"></div><div class="line"><span class="keyword">var</span> frameTop = <span class="number">0</span></div><div class="line"><span class="keyword">var</span> frameLeft = <span class="number">0</span></div><div class="line">$iframe.style.top = frameTop + <span class="string">'px'</span></div><div class="line">$iframe.style.left = frameLeft + <span class="string">'px'</span></div><div class="line"></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, evt =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> data = evt.data</div><div class="line"></div><div class="line">  <span class="keyword">switch</span> (data.msg) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'SALADICT_DRAG_START'</span>:</div><div class="line">      handleDragStart(data.mouseX, data.mouseY)</div><div class="line">      <span class="keyword">break</span></div><div class="line">    <span class="keyword">case</span> <span class="string">'SALADICT_DRAG_MOUSEMOVE'</span>:</div><div class="line">      handleFrameMousemove(data.offsetX, data.offsetY)</div><div class="line">      <span class="keyword">break</span></div><div class="line">    <span class="keyword">case</span> <span class="string">'SALADICT_DRAG_END'</span>:</div><div class="line">      handleDragEnd()</div><div class="line">      <span class="keyword">break</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleDragStart</span> (<span class="params">mouseX, mouseY</span>) </span>&#123;</div><div class="line">  <span class="comment">// 得出鼠标在上层的位置</span></div><div class="line">  pageMouseX = frameLeft + mouseX</div><div class="line">  pageMouseY = frameTop + mouseY</div><div class="line"></div><div class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'mouseup'</span>, handleDragEnd)</div><div class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'mousemove'</span>, handlePageMousemove)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleDragEnd</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">document</span>.removeEventListener(<span class="string">'mouseup'</span>, handleDragEnd)</div><div class="line">  <span class="built_in">document</span>.removeEventListener(<span class="string">'mousemove'</span>, handlePageMousemove)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleFrameMousemove</span> (<span class="params">offsetX, offsetY</span>) </span>&#123;</div><div class="line">  frameTop += offsetY</div><div class="line">  frameLeft += offsetX</div><div class="line">  $iframe.style.top = frameTop + <span class="string">'px'</span></div><div class="line">  $iframe.style.left = frameLeft + <span class="string">'px'</span></div><div class="line"></div><div class="line">  <span class="comment">// 更新鼠标在上层的位置，补上偏移</span></div><div class="line">  pageMouseX += offsetX</div><div class="line">  pageMouseY += offsetY</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlePageMousemove</span> (<span class="params">evt</span>) </span>&#123;</div><div class="line">  frameTop += evt.clientX - pageMouseX</div><div class="line">  frameLeft += evt.clientY - pageMouseY</div><div class="line">  $iframe.style.top = frameTop + <span class="string">'px'</span></div><div class="line">  $iframe.style.left = frameLeft + <span class="string">'px'</span></div><div class="line"></div><div class="line">  <span class="comment">// 新位置直接可以更新</span></div><div class="line">  pageMouseX = evt.clientX</div><div class="line">  pageMouseY = evt.clientY</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="例子">
<a href="#例子" class="headerlink" title="例子"></a>例子</h2>
<p>这里实现了一个例子，下面的正方形 iframe 是可以拖动的：</p>
<p></p>
<div class="drag-container">
<style type="text/css">
.drag-container {
    position: relative;
    height: 200px;
}

.drag-iframe {
    position: absolute;
    width: 200px;
    height: 200px;
}
</style><iframe class="drag-iframe" src="/images/post/drag-iframe.html" frameborder="0"></iframe>
<script type="text/javascript">
;
(function() {
    var pageMouseX, pageMouseY

    var $iframe = document.querySelector('.drag-iframe')
    var frameTop = 0
    var frameLeft = 0
    $iframe.style.top = frameTop + 'px'
    $iframe.style.left = frameLeft + 'px'

    window.addEventListener('message', evt => {
        const data = evt.data

        switch (data.msg) {
            case 'SALADICT_DRAG_START':
                handleDragStart(data.mouseX, data.mouseY)
                break
            case 'SALADICT_DRAG_MOUSEMOVE':
                handleFrameMousemove(data.offsetX, data.offsetY)
                break
            case 'SALADICT_DRAG_END':
                handleDragEnd()
                break
        }
    })

    function handleDragStart(mouseX, mouseY) {
        // 得出鼠标在上层的位置
        pageMouseX = frameLeft + mouseX
        pageMouseY = frameTop + mouseY

        document.addEventListener('mouseup', handleDragEnd)
        document.addEventListener('mousemove', handlePageMousemove)
    }

    function handleDragEnd() {
        document.removeEventListener('mouseup', handleDragEnd)
        document.removeEventListener('mousemove', handlePageMousemove)
    }

    function handleFrameMousemove(offsetX, offsetY) {
        frameTop += offsetY
        frameLeft += offsetX
        $iframe.style.top = frameTop + 'px'
        $iframe.style.left = frameLeft + 'px'

        // 更新鼠标在上层的位置，补上偏移
        pageMouseX += offsetX
        pageMouseY += offsetY
    }

    function handlePageMousemove(evt) {
        frameTop += evt.clientX - pageMouseX
        frameLeft += evt.clientY - pageMouseY
        $iframe.style.top = frameTop + 'px'
        $iframe.style.left = frameLeft + 'px'

        // 新位置直接可以更新
        pageMouseX = evt.clientX
        pageMouseY = evt.clientY
    }
})()
</script>
</div>
<p></p>
<h2 id="兼容性">
<a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2>
<p>可以看到，这里主要就是传鼠标的坐标偏移值。所以需要兼容老浏览器的话，用繁琐的旧方式与 iframe 交流就行。如果是同域的话也可以直接从 iframe 里获取偏移。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;定位-iframe&quot;&gt;
&lt;a href=&quot;#定位-iframe&quot; class=&quot;headerlink&quot; title=&quot;定位 iframe&quot;&gt;&lt;/a&gt;定位 iframe&lt;/h1&gt;
&lt;p&gt;在写一个划词翻译扩展 &lt;a href=&quot;http://www.crimx.com
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.crimx.com/categories/JavaScript/"/>
    
    
      <category term="Recommended" scheme="https://blog.crimx.com/tags/Recommended/"/>
    
      <category term="JavaScript" scheme="https://blog.crimx.com/tags/JavaScript/"/>
    
      <category term="iframe" scheme="https://blog.crimx.com/tags/iframe/"/>
    
      <category term="postMessage" scheme="https://blog.crimx.com/tags/postMessage/"/>
    
      <category term="Drag" scheme="https://blog.crimx.com/tags/Drag/"/>
    
      <category term="Extension" scheme="https://blog.crimx.com/tags/Extension/"/>
    
  </entry>
  
  <entry>
    <title>Position and Drag Iframe</title>
    <link href="https://blog.crimx.com/2017/04/06/position-and-drag-iframe-en/"/>
    <id>https://blog.crimx.com/2017/04/06/position-and-drag-iframe-en/</id>
    <published>2017-04-05T16:00:00.000Z</published>
    <updated>2017-04-20T15:58:02.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Position-in-iframes">
<a href="#Position-in-iframes" class="headerlink" title="Position in iframes"></a>Position in iframes</h1>
<p>I wrote a Chrome extension <a href="http://www.crimx.com/crx-saladict/" target="_blank">Saladict</a>, an inline translator, which involved such requirement: When user makes a text selection, something will pop up nearby the cursor.</p>
<p>It looks simple at first view. Just listen to a <code>mouseup</code> event and get <code>clientX</code> and <code>clientY</code> from it.</p>
<p>But there is a flaw in it - <code>mouseup</code> events inside iframes won&#39;t bubble up to the top frame.</p>
<p>The solution is actually quite simple. If you know how to connect the dots.</p>
<h2 id="iframe-script-injection">
<a href="#iframe-script-injection" class="headerlink" title="iframe script injection"></a>iframe script injection</h2>
<p>Using the <code>all_frames</code> property in <code>manifest.json</code>, a content script can run in all frames.</p>
<p></p>
<figure class="highlight json">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre>
</td>
<td class="code">
<pre><div class="line">&#123;</div><div class="line">  <span class="attr">"content_scripts"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"js"</span>: [<span class="string">"selection.js"</span>],</div><div class="line">      <span class="attr">"matches"</span>: [<span class="string">"&lt;all_urls&gt;"</span>],</div><div class="line">      <span class="attr">"all_frames"</span>: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="Mouse-Event-Detection">
<a href="#Mouse-Event-Detection" class="headerlink" title="Mouse Event Detection"></a>Mouse Event Detection</h2>
<p>Now you can listen to <code>mouseup</code> event in all iframes.</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="comment">// selection.js</span></div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'mouseup'</span>, handleMouseUp)</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="Upload-Cursor-Coordinates">
<a href="#Upload-Cursor-Coordinates" class="headerlink" title="Upload Cursor Coordinates"></a>Upload Cursor Coordinates</h2>
<p><code>clientX</code> and <code>clientY</code> of the mouse events that are triggered in iframes are coordinates within iframe windows. Upload these coordinates as offsets to the upper frame, then plus the iframe position you will get the cursor position
within the upper frame window.</p>
<p>On Chrome you can boldly use <code>postMessage</code>.</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="comment">// selection.js</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleMouseUp</span> (<span class="params">evt</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.parent === <span class="built_in">window</span>) &#123;</div><div class="line">    <span class="comment">// Top frame</span></div><div class="line">    doAwesomeThings(evt.clientX，evt.clientY)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// Pass the coordinates to upper frame</span></div><div class="line">    <span class="built_in">window</span>.parent.postMessage(&#123;</div><div class="line">      <span class="attr">msg</span>: <span class="string">'SALADICT_CLICK'</span>,</div><div class="line">      <span class="attr">mouseX</span>: evt.clientX,</div><div class="line">      <span class="attr">mouseY</span>: evt.clientY</div><div class="line">    &#125;, <span class="string">'*'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="Add-offsets">
<a href="#Add-offsets" class="headerlink" title="Add offsets"></a>Add offsets</h2>
<p>How does the upper frame know which iframe is sending coordinates? Well, the <code>message</code> event contains the content window of the iframe. Use it to match the iframe element.</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="comment">// selection.js</span></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, evt =&gt; &#123;</div><div class="line">  <span class="keyword">if</span> (evt.data.msg !== <span class="string">'SALADICT_CLICK'</span>) &#123; <span class="keyword">return</span> &#125;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> iframe = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">'iframe'</span>))</div><div class="line">    .filter(<span class="function"><span class="params">f</span> =&gt;</span> f.contentWindow === evt.source)</div><div class="line">    [<span class="number">0</span>]</div><div class="line">  <span class="keyword">if</span> (!iframe) &#123; <span class="keyword">return</span> &#125;</div><div class="line"></div><div class="line">  <span class="comment">// calculate coordinates within current window</span></div><div class="line">  <span class="keyword">let</span> pos = iframe.getBoundingClientRect()</div><div class="line">  <span class="keyword">let</span> mouseX = evt.data.mouseX + pos.left</div><div class="line">  <span class="keyword">let</span> mouseY = evt.data.mouseY + pos.top</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.parent === <span class="built_in">window</span>) &#123;</div><div class="line">    <span class="comment">// Top frame</span></div><div class="line">    doAwesomeThings(mouseX, mouseY)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// Keep uploading</span></div><div class="line">    <span class="built_in">window</span>.parent.postMessage(&#123;</div><div class="line">      <span class="attr">msg</span>: <span class="string">'SALADICT_CLICK'</span>,</div><div class="line">      mouseX,</div><div class="line">      mouseY</div><div class="line">    &#125;, <span class="string">'*'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h1 id="iframe-Dragging">
<a href="#iframe-Dragging" class="headerlink" title="iframe Dragging"></a>iframe Dragging</h1>
<p>Another requirement for Saladict is to drag an iframe panel.</p>
<h2 id="Dragging-101">
<a href="#Dragging-101" class="headerlink" title="Dragging 101"></a>Dragging 101</h2>
<p>Before getting into iframe dragging. There are few basic ideas of implementing a draggable element.</p>
<p>One of the most common approaches is to listen to <code>mousedown</code>, <code>mousemove</code> and <code>mouseup</code> events, which handle drag start, dragging and drag end. And apply the offsets to the element&#39;s <code>left</code> and <code>top</code>style properties.</p>
<p>If this is your first time implementing this feature, you are likely to listen to <code>mousemove</code> events of the element itself.</p>
<p>You can indeed get the correct result in the way. The problem is, if the curser moves a bit too fast and leaves the element, the dragging will stop. That&#39;s why you should listen to global <code>mousemove</code> event instead.</p>
<h2 id="Dragging-with-iframe">
<a href="#Dragging-with-iframe" class="headerlink" title="Dragging with iframe"></a>Dragging with iframe</h2>
<p>The theory behind iframe dragging is the same. Only the mouse events triggered in iframes will not bubble up to the upper frame. You need to wrap it up yourselves.</p>
<h2 id="iframe-Part">
<a href="#iframe-Part" class="headerlink" title="iframe Part"></a>iframe Part</h2>
<p>Drag start is triggered by a draggable element inside iframe. For better performance, dragging and drag end event listeners are attached in drag start and are detached in drag end.</p>
<p>Dragging event listener is required here because the <code>mousemove</code> event of the upper frame breaks inside the iframe. We need to let upper frame know what is happening inside iframe.</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="comment">// iframe.js</span></div><div class="line"><span class="keyword">var</span> baseMouseX, baseMouseY</div><div class="line"></div><div class="line">$dragArea.addEventListener(<span class="string">'mousedown'</span>, handleDragStart)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleDragStart</span> (<span class="params">evt</span>) </span>&#123;</div><div class="line">  baseMouseX = evt.clientX</div><div class="line">  baseMouseY = evt.clientY</div><div class="line"></div><div class="line">  <span class="built_in">window</span>.parent.postMessage(&#123;</div><div class="line">    <span class="attr">msg</span>: <span class="string">'SALADICT_DRAG_START'</span>,</div><div class="line">    <span class="attr">mouseX</span>: baseMouseX,</div><div class="line">    <span class="attr">mouseY</span>: baseMouseY</div><div class="line">  &#125;, <span class="string">'*'</span>)</div><div class="line"></div><div class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'mouseup'</span>, handleDragEnd)</div><div class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'mousemove'</span>, handleMousemove)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleMousemove</span> (<span class="params">evt</span>) </span>&#123;</div><div class="line">  <span class="built_in">window</span>.parent.postMessage(&#123;</div><div class="line">    <span class="attr">msg</span>: <span class="string">'SALADICT_DRAG_MOUSEMOVE'</span>,</div><div class="line">    <span class="attr">offsetX</span>: evt.clientX - baseMouseX,</div><div class="line">    <span class="attr">offsetY</span>: evt.clientY - baseMouseY</div><div class="line">  &#125;, <span class="string">'*'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleDragEnd</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">window</span>.parent.postMessage(&#123;</div><div class="line">    <span class="attr">msg</span>: <span class="string">'SALADICT_DRAG_END'</span></div><div class="line">  &#125;, <span class="string">'*'</span>)</div><div class="line"></div><div class="line">  <span class="built_in">document</span>.removeEventListener(<span class="string">'mouseup'</span>, handleDragEnd)</div><div class="line">  <span class="built_in">document</span>.removeEventListener(<span class="string">'mousemove'</span>, handleMousemove)</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="Upper-Frame-Part">
<a href="#Upper-Frame-Part" class="headerlink" title="Upper Frame Part"></a>Upper Frame Part</h2>
<p>Use <code>handleFrameMousemove</code> to handle the offsets from iframe.</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="comment">// parent.js</span></div><div class="line"><span class="keyword">var</span> pageMouseX, pageMouseY</div><div class="line"></div><div class="line"><span class="keyword">var</span> frameTop = <span class="number">0</span></div><div class="line"><span class="keyword">var</span> frameLeft = <span class="number">0</span></div><div class="line">$iframe.style.top = frameTop + <span class="string">'px'</span></div><div class="line">$iframe.style.left = frameLeft + <span class="string">'px'</span></div><div class="line"></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, evt =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> data = evt.data</div><div class="line"></div><div class="line">  <span class="keyword">switch</span> (data.msg) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'SALADICT_DRAG_START'</span>:</div><div class="line">      handleDragStart(data.mouseX, data.mouseY)</div><div class="line">      <span class="keyword">break</span></div><div class="line">    <span class="keyword">case</span> <span class="string">'SALADICT_DRAG_MOUSEMOVE'</span>:</div><div class="line">      handleFrameMousemove(data.offsetX, data.offsetY)</div><div class="line">      <span class="keyword">break</span></div><div class="line">    <span class="keyword">case</span> <span class="string">'SALADICT_DRAG_END'</span>:</div><div class="line">      handleDragEnd()</div><div class="line">      <span class="keyword">break</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleDragStart</span> (<span class="params">mouseX, mouseY</span>) </span>&#123;</div><div class="line">  <span class="comment">// get the coordinates within the upper frame</span></div><div class="line">  pageMouseX = frameLeft + mouseX</div><div class="line">  pageMouseY = frameTop + mouseY</div><div class="line"></div><div class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'mouseup'</span>, handleDragEnd)</div><div class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'mousemove'</span>, handlePageMousemove)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleDragEnd</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">document</span>.removeEventListener(<span class="string">'mouseup'</span>, handleDragEnd)</div><div class="line">  <span class="built_in">document</span>.removeEventListener(<span class="string">'mousemove'</span>, handlePageMousemove)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleFrameMousemove</span> (<span class="params">offsetX, offsetY</span>) </span>&#123;</div><div class="line">  frameTop += offsetY</div><div class="line">  frameLeft += offsetX</div><div class="line">  $iframe.style.top = frameTop + <span class="string">'px'</span></div><div class="line">  $iframe.style.left = frameLeft + <span class="string">'px'</span></div><div class="line"></div><div class="line">  <span class="comment">// Add the missing coordinates</span></div><div class="line">  pageMouseX += offsetX</div><div class="line">  pageMouseY += offsetY</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlePageMousemove</span> (<span class="params">evt</span>) </span>&#123;</div><div class="line">  frameTop += evt.clientX - pageMouseX</div><div class="line">  frameLeft += evt.clientY - pageMouseY</div><div class="line">  $iframe.style.top = frameTop + <span class="string">'px'</span></div><div class="line">  $iframe.style.left = frameLeft + <span class="string">'px'</span></div><div class="line"></div><div class="line">  pageMouseX = evt.clientX</div><div class="line">  pageMouseY = evt.clientY</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="Demo">
<a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2>
<p>You can drag the iframe square below:</p>
<p></p>
<div class="drag-container">
<style type="text/css">
.drag-container {
    position: relative;
    height: 200px;
}

.drag-iframe {
    position: absolute;
    width: 200px;
    height: 200px;
}
</style><iframe class="drag-iframe" src="/images/post/drag-iframe.html" frameborder="0"></iframe>
<script type="text/javascript">
;
(function() {
    var pageMouseX, pageMouseY

    var $iframe = document.querySelector('.drag-iframe')
    var frameTop = 0
    var frameLeft = 0
    $iframe.style.top = frameTop + 'px'
    $iframe.style.left = frameLeft + 'px'

    window.addEventListener('message', evt => {
        const data = evt.data

        switch (data.msg) {
            case 'SALADICT_DRAG_START':
                handleDragStart(data.mouseX, data.mouseY)
                break
            case 'SALADICT_DRAG_MOUSEMOVE':
                handleFrameMousemove(data.offsetX, data.offsetY)
                break
            case 'SALADICT_DRAG_END':
                handleDragEnd()
                break
        }
    })

    function handleDragStart(mouseX, mouseY) {
        pageMouseX = frameLeft + mouseX
        pageMouseY = frameTop + mouseY

        document.addEventListener('mouseup', handleDragEnd)
        document.addEventListener('mousemove', handlePageMousemove)
    }

    function handleDragEnd() {
        document.removeEventListener('mouseup', handleDragEnd)
        document.removeEventListener('mousemove', handlePageMousemove)
    }

    function handleFrameMousemove(offsetX, offsetY) {
        frameTop += offsetY
        frameLeft += offsetX
        $iframe.style.top = frameTop + 'px'
        $iframe.style.left = frameLeft + 'px'

        pageMouseX += offsetX
        pageMouseY += offsetY
    }

    function handlePageMousemove(evt) {
        frameTop += evt.clientX - pageMouseX
        frameLeft += evt.clientY - pageMouseY
        $iframe.style.top = frameTop + 'px'
        $iframe.style.left = frameLeft + 'px'

        pageMouseX = evt.clientX
        pageMouseY = evt.clientY
    }
})()
</script>
</div>
<p></p>
<h2 id="Browser-Compatibility">
<a href="#Browser-Compatibility" class="headerlink" title="Browser Compatibility"></a>Browser Compatibility</h2>
<p>As you can see, nothing fancy here, just passing coordinates around. So for older browsers, just use the old ways to communicate. You can also manipulate the values directly if they are same-origin.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Position-in-iframes&quot;&gt;
&lt;a href=&quot;#Position-in-iframes&quot; class=&quot;headerlink&quot; title=&quot;Position in iframes&quot;&gt;&lt;/a&gt;Position in iframes&lt;/h1&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.crimx.com/categories/JavaScript/"/>
    
    
      <category term="Recommended" scheme="https://blog.crimx.com/tags/Recommended/"/>
    
      <category term="JavaScript" scheme="https://blog.crimx.com/tags/JavaScript/"/>
    
      <category term="iframe" scheme="https://blog.crimx.com/tags/iframe/"/>
    
      <category term="postMessage" scheme="https://blog.crimx.com/tags/postMessage/"/>
    
      <category term="Drag" scheme="https://blog.crimx.com/tags/Drag/"/>
    
      <category term="Extension" scheme="https://blog.crimx.com/tags/Extension/"/>
    
  </entry>
  
  <entry>
    <title>获取 DOM 里所有图片（包括背景和Iframe）</title>
    <link href="https://blog.crimx.com/2017/03/09/get-all-images-in-dom-including-background/"/>
    <id>https://blog.crimx.com/2017/03/09/get-all-images-in-dom-including-background/</id>
    <published>2017-03-08T16:00:00.000Z</published>
    <updated>2017-03-15T16:05:43.352Z</updated>
    
    <content type="html"><![CDATA[<p>在写浏览器扩展什么的时候可能会用上。</p>
<p>获取 DOM 里的图片主要是在这几个地方里面找: <code>&lt;img&gt;</code> 元素, <code>background-image</code> CSS 属性和 <code>&lt;iframe&gt;</code>。</p>
<h1 id="img">
<a href="#img" class="headerlink" title="img"></a>img</h1>
<p>如果只想获取 <code>&lt;img&gt;</code> 的图片，有两种方式:</p>
<p>直接获取所有 <code>img</code> 标签:</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getImgs</span> (<span class="params">doc</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(doc.getElementsByTagName(<span class="string">'img'</span>))</div><div class="line">    .map(<span class="function"><span class="params">img</span> =&gt;</span> (&#123;</div><div class="line">      <span class="attr">src</span>: img.currentSrc, <span class="comment">// 用 img.src 如果要本来的 src</span></div><div class="line">      width: img.naturalWidth,</div><div class="line">      <span class="attr">height</span>: img.naturalHeight</div><div class="line">    &#125;))</div><div class="line">&#125;</div><div class="line"></div><div class="line">getImgs(<span class="built_in">document</span>)</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>还可以用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/images" target="_blank">document.images</a>:</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getImgs</span> (<span class="params">doc</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(doc.images)</div><div class="line">    .map(<span class="function"><span class="params">img</span> =&gt;</span> (&#123;</div><div class="line">      <span class="attr">src</span>: img.currentSrc, <span class="comment">// img.src if you want the origin</span></div><div class="line">      width: img.naturalWidth,</div><div class="line">      <span class="attr">height</span>: img.naturalHeight</div><div class="line">    &#125;))</div><div class="line">&#125;</div><div class="line"></div><div class="line">getImgs(<span class="built_in">document</span>)</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h1 id="background-image">
<a href="#background-image" class="headerlink" title="background-image"></a>background-image</h1>
<p>获得背景图片需要查看所有 DOM 节点的 <code>background-image</code> 属性:</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBgImgs</span> (<span class="params">doc</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> srcChecker = <span class="regexp">/url\(\s*?['"]?\s*?(\S+?)\s*?["']?\s*?\)/i</span></div><div class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(</div><div class="line">    <span class="built_in">Array</span>.from(doc.querySelectorAll(<span class="string">'*'</span>))</div><div class="line">      .reduce(<span class="function">(<span class="params">collection, node</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">let</span> prop = <span class="built_in">window</span>.getComputedStyle(node, <span class="literal">null</span>)</div><div class="line">          .getPropertyValue(<span class="string">'background-image'</span>)</div><div class="line">        <span class="comment">// match `url(...)`</span></div><div class="line">        <span class="keyword">let</span> match = srcChecker.exec(prop)</div><div class="line">        <span class="keyword">if</span> (match) &#123;</div><div class="line">          collection.add(match[<span class="number">1</span>])</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> collection</div><div class="line">      &#125;, <span class="keyword">new</span> <span class="built_in">Set</span>())</div><div class="line">  )</div><div class="line">&#125;</div><div class="line"></div><div class="line">getBgImgs(<span class="built_in">document</span>)</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>背景图片不能直接得到尺寸信息，如果需要的话要加载一遍。因为搜集的图片很有可能已经在浏览器缓存里，所以加载过程应该很快。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span> (<span class="params">src, timeout = <span class="number">500</span></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> imgPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> img = <span class="keyword">new</span> Image()</div><div class="line">    img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      resolve(&#123;</div><div class="line">        <span class="attr">src</span>: src,</div><div class="line">        <span class="attr">width</span>: img.naturalWidth,</div><div class="line">        <span class="attr">height</span>: img.naturalHeight</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">    img.onerror = reject</div><div class="line">    img.src = src</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">var</span> timer = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    setTimeout(reject, timeout)</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.race([imgPromise, timer])</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImgAll</span> (<span class="params">imgList, timeout = <span class="number">500</span></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">Promise</span>.all(</div><div class="line">      imgList</div><div class="line">        .map(<span class="function"><span class="params">src</span> =&gt;</span> loadImg(src, timeout))</div><div class="line">        .map(<span class="function"><span class="params">p</span> =&gt;</span> p.catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="literal">false</span>))</div><div class="line">    ).then(<span class="function"><span class="params">results</span> =&gt;</span> resolve(results.filter(<span class="function"><span class="params">r</span> =&gt;</span> r)))</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">loadImgAll(getBgImgs(<span class="built_in">document</span>)).then(<span class="function"><span class="params">imgs</span> =&gt;</span> <span class="built_in">console</span>.log(imgs))</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h1 id="iframe">
<a href="#iframe" class="headerlink" title="iframe"></a>iframe</h1>
<p>只需要递归遍历 iframe 的 document</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">searchIframes</span> (<span class="params">doc</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> imgList = []</div><div class="line">  doc.querySelectorAll(<span class="string">'iframe'</span>)</div><div class="line">    .forEach(<span class="function"><span class="params">iframe</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        iframeDoc = iframe.contentDocument || iframe.contentWindow.document</div><div class="line">        imgList = imgList.concat(getImgs(iframeDoc) || []) <span class="comment">// or getBgImgs(iframeDoc)</span></div><div class="line">        imgList = imgList.concat(searchIframes(iframeDoc) || [])</div><div class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">        <span class="comment">// 直接忽略错误的 iframe (e.g. cross-origin)</span></div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  <span class="keyword">return</span> imgList</div><div class="line">&#125;</div><div class="line"></div><div class="line">searchIframes(<span class="built_in">document</span>)</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h1 id="整合一起">
<a href="#整合一起" class="headerlink" title="整合一起"></a>整合一起</h1>
<p>直接使用就行。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getImgAll</span> (<span class="params">doc</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    loadImgAll(<span class="built_in">Array</span>.from(searchDOM(doc)))</div><div class="line">      .then(resolve, reject)</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">searchDOM</span> (<span class="params">doc</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> srcChecker = <span class="regexp">/url\(\s*?['"]?\s*?(\S+?)\s*?["']?\s*?\)/i</span></div><div class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(doc.querySelectorAll(<span class="string">'*'</span>))</div><div class="line">      .reduce(<span class="function">(<span class="params">collection, node</span>) =&gt;</span> &#123;</div><div class="line">        <span class="comment">// bg src</span></div><div class="line">        <span class="keyword">let</span> prop = <span class="built_in">window</span>.getComputedStyle(node, <span class="literal">null</span>)</div><div class="line">          .getPropertyValue(<span class="string">'background-image'</span>)</div><div class="line">        <span class="comment">// match `url(...)`</span></div><div class="line">        <span class="keyword">let</span> match = srcChecker.exec(prop)</div><div class="line">        <span class="keyword">if</span> (match) &#123;</div><div class="line">          collection.add(match[<span class="number">1</span>])</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="regexp">/^img$/i</span>.test(node.tagName)) &#123;</div><div class="line">          <span class="comment">// src from img tag</span></div><div class="line">          collection.add(node.src)</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/^frame$/i</span>.test(node.tagName)) &#123;</div><div class="line">          <span class="comment">// iframe</span></div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">            searchDOM(node.contentDocument || node.contentWindow.document)</div><div class="line">              .forEach(<span class="function"><span class="params">img</span> =&gt;</span> &#123;</div><div class="line">                <span class="keyword">if</span> (img) &#123; collection.add(img) &#125;</div><div class="line">              &#125;)</div><div class="line">          &#125; <span class="keyword">catch</span> (e) &#123;&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> collection</div><div class="line">      &#125;, <span class="keyword">new</span> <span class="built_in">Set</span>())</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">loadImg</span> (<span class="params">src, timeout = <span class="number">500</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> imgPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">let</span> img = <span class="keyword">new</span> Image()</div><div class="line">      img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        resolve(&#123;</div><div class="line">          <span class="attr">src</span>: src,</div><div class="line">          <span class="attr">width</span>: img.naturalWidth,</div><div class="line">          <span class="attr">height</span>: img.naturalHeight</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">      img.onerror = reject</div><div class="line">      img.src = src</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">var</span> timer = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">      setTimeout(reject, timeout)</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.race([imgPromise, timer])</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">loadImgAll</span> (<span class="params">imgList, timeout = <span class="number">500</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">      <span class="built_in">Promise</span>.all(</div><div class="line">        imgList</div><div class="line">          .map(<span class="function"><span class="params">src</span> =&gt;</span> loadImg(src, timeout))</div><div class="line">          .map(<span class="function"><span class="params">p</span> =&gt;</span> p.catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="literal">false</span>))</div><div class="line">      ).then(<span class="function"><span class="params">results</span> =&gt;</span> resolve(results.filter(<span class="function"><span class="params">r</span> =&gt;</span> r)))</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">getImgAll(<span class="built_in">document</span>).then(<span class="function"><span class="params">list</span> =&gt;</span> <span class="built_in">console</span>.log(list))</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>如果是开发 Chrome 插件则不受跨域影响，可以直接使用 <a href="https://github.com/nodeca/probe-image-size" target="_blank">probe-image-size</a>，它支持 timeout 参数，就不需要自己写 timer 了。我在写一个 <a href="https://github.com/crimx/crx-weitweet" target="_blank">Chrome 扩展</a>时用上了，很方便。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在写浏览器扩展什么的时候可能会用上。&lt;/p&gt;
&lt;p&gt;获取 DOM 里的图片主要是在这几个地方里面找: &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 元素, &lt;code&gt;background-image&lt;/code&gt; CSS 属性和 &lt;code&gt;&amp;lt;iframe&amp;gt
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.crimx.com/categories/JavaScript/"/>
    
    
      <category term="Recommended" scheme="https://blog.crimx.com/tags/Recommended/"/>
    
      <category term="JavaScript" scheme="https://blog.crimx.com/tags/JavaScript/"/>
    
      <category term="Image" scheme="https://blog.crimx.com/tags/Image/"/>
    
      <category term="DOM" scheme="https://blog.crimx.com/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>Get All Images in DOM (Including Background)</title>
    <link href="https://blog.crimx.com/2017/03/09/get-all-images-in-dom-including-background-en/"/>
    <id>https://blog.crimx.com/2017/03/09/get-all-images-in-dom-including-background-en/</id>
    <published>2017-03-08T16:00:00.000Z</published>
    <updated>2017-03-15T16:05:31.891Z</updated>
    
    <content type="html"><![CDATA[<p>Quite useful if you are writing an browser extension or something.</p>
<p>To get all the images in DOM there are actually three places we are going to look at: <code>&lt;img&gt;</code> element, <code>background-image</code> CSS property and, <code>&lt;iframe&gt;</code>. Yes, every iframe hides a magical kingdom.</p>
<h1 id="img">
<a href="#img" class="headerlink" title="img"></a>img</h1>
<p>If you only want to get images in <code>&lt;img&gt;</code>, two options for you to choose:</p>
<p>You can either search the DOM for <code>img</code> tag:</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getImgs</span> (<span class="params">doc</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(doc.getElementsByTagName(<span class="string">'img'</span>))</div><div class="line">    .map(<span class="function"><span class="params">img</span> =&gt;</span> (&#123;</div><div class="line">      <span class="attr">src</span>: img.currentSrc, <span class="comment">// img.src if you want the origin</span></div><div class="line">      width: img.naturalWidth,</div><div class="line">      <span class="attr">height</span>: img.naturalHeight</div><div class="line">    &#125;))</div><div class="line">&#125;</div><div class="line"></div><div class="line">getImgs(<span class="built_in">document</span>)</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>Or just use <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/images" target="_blank">document.images</a>:</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getImgs</span> (<span class="params">doc</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(doc.images)</div><div class="line">    .map(<span class="function"><span class="params">img</span> =&gt;</span> (&#123;</div><div class="line">      <span class="attr">src</span>: img.currentSrc, <span class="comment">// img.src if you want the origin</span></div><div class="line">      width: img.naturalWidth,</div><div class="line">      <span class="attr">height</span>: img.naturalHeight</div><div class="line">    &#125;))</div><div class="line">&#125;</div><div class="line"></div><div class="line">getImgs(<span class="built_in">document</span>)</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h1 id="background-image">
<a href="#background-image" class="headerlink" title="background-image"></a>background-image</h1>
<p>For <code>background-image</code>, we need to check every node in DOM:</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBgImgs</span> (<span class="params">doc</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> srcChecker = <span class="regexp">/url\(\s*?['"]?\s*?(\S+?)\s*?["']?\s*?\)/i</span></div><div class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(</div><div class="line">    <span class="built_in">Array</span>.from(doc.querySelectorAll(<span class="string">'*'</span>))</div><div class="line">      .reduce(<span class="function">(<span class="params">collection, node</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">let</span> prop = <span class="built_in">window</span>.getComputedStyle(node, <span class="literal">null</span>)</div><div class="line">          .getPropertyValue(<span class="string">'background-image'</span>)</div><div class="line">        <span class="comment">// match `url(...)`</span></div><div class="line">        <span class="keyword">let</span> match = srcChecker.exec(prop)</div><div class="line">        <span class="keyword">if</span> (match) &#123;</div><div class="line">          collection.add(match[<span class="number">1</span>])</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> collection</div><div class="line">      &#125;, <span class="keyword">new</span> <span class="built_in">Set</span>())</div><div class="line">  )</div><div class="line">&#125;</div><div class="line"></div><div class="line">getBgImgs(<span class="built_in">document</span>)</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>We can&#39;t simply get the width and height of a background image. If you need them, you have to load it.</p>
<p>Since the images you get in DOM are most likely already in the browser cache, the loading process should be fairly quick.</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span> (<span class="params">src, timeout = <span class="number">500</span></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> imgPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> img = <span class="keyword">new</span> Image()</div><div class="line">    img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      resolve(&#123;</div><div class="line">        <span class="attr">src</span>: src,</div><div class="line">        <span class="attr">width</span>: img.naturalWidth,</div><div class="line">        <span class="attr">height</span>: img.naturalHeight</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">    img.onerror = reject</div><div class="line">    img.src = src</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">var</span> timer = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    setTimeout(reject, timeout)</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.race([imgPromise, timer])</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImgAll</span> (<span class="params">imgList, timeout = <span class="number">500</span></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">Promise</span>.all(</div><div class="line">      imgList</div><div class="line">        .map(<span class="function"><span class="params">src</span> =&gt;</span> loadImg(src, timeout))</div><div class="line">        .map(<span class="function"><span class="params">p</span> =&gt;</span> p.catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="literal">false</span>))</div><div class="line">    ).then(<span class="function"><span class="params">results</span> =&gt;</span> resolve(results.filter(<span class="function"><span class="params">r</span> =&gt;</span> r)))</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">loadImgAll(getBgImgs(<span class="built_in">document</span>)).then(<span class="function"><span class="params">imgs</span> =&gt;</span> <span class="built_in">console</span>.log(imgs))</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h1 id="iframe">
<a href="#iframe" class="headerlink" title="iframe"></a>iframe</h1>
<p>Just recursively search in all iframes</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">searchIframes</span> (<span class="params">doc</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> imgList = []</div><div class="line">  doc.querySelectorAll(<span class="string">'iframe'</span>)</div><div class="line">    .forEach(<span class="function"><span class="params">iframe</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        iframeDoc = iframe.contentDocument || iframe.contentWindow.document</div><div class="line">        imgList = imgList.concat(getImgs(iframeDoc) || []) <span class="comment">// or getBgImgs(iframeDoc)</span></div><div class="line">        imgList = imgList.concat(searchIframes(iframeDoc) || [])</div><div class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">        <span class="comment">// simply ignore errors (e.g. cross-origin)</span></div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  <span class="keyword">return</span> imgList</div><div class="line">&#125;</div><div class="line"></div><div class="line">searchIframes(<span class="built_in">document</span>)</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h1 id="Together">
<a href="#Together" class="headerlink" title="Together"></a>Together</h1>
<p>Can be used out of the box. It was made when I was writing a <a href="https://github.com/crimx/crx-weitweet" target="_blank">Chrome Extension</a>.</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getImgAll</span> (<span class="params">doc</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    loadImgAll(<span class="built_in">Array</span>.from(searchDOM(doc)))</div><div class="line">      .then(resolve, reject)</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">searchDOM</span> (<span class="params">doc</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> srcChecker = <span class="regexp">/url\(\s*?['"]?\s*?(\S+?)\s*?["']?\s*?\)/i</span></div><div class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(doc.querySelectorAll(<span class="string">'*'</span>))</div><div class="line">      .reduce(<span class="function">(<span class="params">collection, node</span>) =&gt;</span> &#123;</div><div class="line">        <span class="comment">// bg src</span></div><div class="line">        <span class="keyword">let</span> prop = <span class="built_in">window</span>.getComputedStyle(node, <span class="literal">null</span>)</div><div class="line">          .getPropertyValue(<span class="string">'background-image'</span>)</div><div class="line">        <span class="comment">// match `url(...)`</span></div><div class="line">        <span class="keyword">let</span> match = srcChecker.exec(prop)</div><div class="line">        <span class="keyword">if</span> (match) &#123;</div><div class="line">          collection.add(match[<span class="number">1</span>])</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="regexp">/^img$/i</span>.test(node.tagName)) &#123;</div><div class="line">          <span class="comment">// src from img tag</span></div><div class="line">          collection.add(node.src)</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/^frame$/i</span>.test(node.tagName)) &#123;</div><div class="line">          <span class="comment">// iframe</span></div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">            searchDOM(node.contentDocument || node.contentWindow.document)</div><div class="line">              .forEach(<span class="function"><span class="params">img</span> =&gt;</span> &#123;</div><div class="line">                <span class="keyword">if</span> (img) &#123; collection.add(img) &#125;</div><div class="line">              &#125;)</div><div class="line">          &#125; <span class="keyword">catch</span> (e) &#123;&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> collection</div><div class="line">      &#125;, <span class="keyword">new</span> <span class="built_in">Set</span>())</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">loadImg</span> (<span class="params">src, timeout = <span class="number">500</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> imgPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">let</span> img = <span class="keyword">new</span> Image()</div><div class="line">      img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        resolve(&#123;</div><div class="line">          <span class="attr">src</span>: src,</div><div class="line">          <span class="attr">width</span>: img.naturalWidth,</div><div class="line">          <span class="attr">height</span>: img.naturalHeight</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">      img.onerror = reject</div><div class="line">      img.src = src</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">var</span> timer = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">      setTimeout(reject, timeout)</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.race([imgPromise, timer])</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">loadImgAll</span> (<span class="params">imgList, timeout = <span class="number">500</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">      <span class="built_in">Promise</span>.all(</div><div class="line">        imgList</div><div class="line">          .map(<span class="function"><span class="params">src</span> =&gt;</span> loadImg(src, timeout))</div><div class="line">          .map(<span class="function"><span class="params">p</span> =&gt;</span> p.catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="literal">false</span>))</div><div class="line">      ).then(<span class="function"><span class="params">results</span> =&gt;</span> resolve(results.filter(<span class="function"><span class="params">r</span> =&gt;</span> r)))</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">getImgAll(<span class="built_in">document</span>).then(<span class="function"><span class="params">list</span> =&gt;</span> <span class="built_in">console</span>.log(list))</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>[EOF]</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Quite useful if you are writing an browser extension or something.&lt;/p&gt;
&lt;p&gt;To get all the images in DOM there are actually three places we
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.crimx.com/categories/JavaScript/"/>
    
    
      <category term="Recommended" scheme="https://blog.crimx.com/tags/Recommended/"/>
    
      <category term="JavaScript" scheme="https://blog.crimx.com/tags/JavaScript/"/>
    
      <category term="Image" scheme="https://blog.crimx.com/tags/Image/"/>
    
      <category term="DOM" scheme="https://blog.crimx.com/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>倒腾 Vue Webpack2 单元测试</title>
    <link href="https://blog.crimx.com/2017/02/19/vue-webpack2-unit-testing/"/>
    <id>https://blog.crimx.com/2017/02/19/vue-webpack2-unit-testing/</id>
    <published>2017-02-18T16:00:00.000Z</published>
    <updated>2017-02-19T12:50:52.100Z</updated>
    
    <content type="html"><![CDATA[<p><code>vue-cli</code> 提供的官方模板确实好用。但一直用下来手贱毛病又犯了，像穿了别人的内衣，总感觉不舒服。</p>
<p>所以有机会就瞎倒腾了一遍，总算把各个流程摸了一把。这里分享一下配置带覆盖率的单元测试。</p>
<h2 id="文件结构">
<a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2>
<p>基本的文件结构。</p>
<p></p>
<figure class="highlight plain">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre>
</td>
<td class="code">
<pre><div class="line">├─src</div><div class="line">│  ├─assets</div><div class="line">│  ├─components</div><div class="line">│  ├─app.vue</div><div class="line">│  └─main.js</div><div class="line">├─test</div><div class="line">│   └─unit</div><div class="line">│       ├─coverage</div><div class="line">│       ├─specs</div><div class="line">│       ├─index.js</div><div class="line">│       └─karma.conf.js</div><div class="line">├─.babelirc</div><div class="line">├─webpack.conf.js</div><div class="line">└─package.json</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="依赖">
<a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2>
<p>根据需要增删</p>
<p></p>
<figure class="highlight bash">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre>
</td>
<td class="code">
<pre><div class="line">yarn add -D \</div><div class="line">cross-env \</div><div class="line"><span class="comment"># webpack</span></div><div class="line">webpack \</div><div class="line">webpack-merge \</div><div class="line">vue-loader \</div><div class="line"><span class="comment"># babel</span></div><div class="line">babel-core \</div><div class="line">babel-loader \</div><div class="line">babel-plugin-transform-runtime \</div><div class="line">babel-preset-es2015 \</div><div class="line">babel-register \</div><div class="line">babel-plugin-istanbul \</div><div class="line"><span class="comment"># karma</span></div><div class="line">karma \</div><div class="line">karma-coverage \</div><div class="line">karma-phantomjs-launcher \</div><div class="line">karma-sourcemap-loader \</div><div class="line">karma-spec-reporter \</div><div class="line">karma-webpack \</div><div class="line">mocha \</div><div class="line">karma-mocha \</div><div class="line">sinon-chai \</div><div class="line">karma-sinon-chai \</div><div class="line">chai \</div><div class="line">sinon \</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="入口">
<a href="#入口" class="headerlink" title="入口"></a>入口</h2>
<p>先从 <code>package.json</code> 开始。跟官方的一致。设置 <code>BABEL_ENV</code> 可以在测试的时候才让 Babel 引入 <code>istanbul</code> 计算覆盖率。</p>
<p></p>
<figure class="highlight json">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre>
</td>
<td class="code">
<pre><div class="line">&#123;</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"unit"</span>: <span class="string">"cross-env BABEL_ENV=test karma start test/unit/karma.conf.js --single-run"</span>,</div><div class="line">    <span class="attr">"test"</span>: <span class="string">"npm run unit"</span>,</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="配置-Babel">
<a href="#配置-Babel" class="headerlink" title="配置 Babel"></a>配置 Babel</h2>
<p>在 <code>.babelirc</code> 中：</p>
<p></p>
<figure class="highlight json">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre>
</td>
<td class="code">
<pre><div class="line">&#123;</div><div class="line">  <span class="attr">"presets"</span>: [<span class="string">"es2015"</span>],</div><div class="line">  <span class="attr">"plugins"</span>: [<span class="string">"transform-runtime"</span>],</div><div class="line">  <span class="attr">"comments"</span>: <span class="literal">false</span>,</div><div class="line">  <span class="attr">"env"</span>: &#123;</div><div class="line">    <span class="attr">"test"</span>: &#123;</div><div class="line">      <span class="attr">"plugins"</span>: [ <span class="string">"istanbul"</span> ]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>按需设置，写 Chrome Extension 的话用 <code>es2016</code> 就行。</p>
<p>Babel 的 istanbul 插件是个很聪明的做法。</p>
<h2 id="Loader-配置">
<a href="#Loader-配置" class="headerlink" title="Loader 配置"></a>Loader 配置</h2>
<p>从 Vue Loader 的文档可以看到，不需要额外配置，它非常贴心自动识别 Babel Loader。</p>
<p>如果还测试 js 文件那么给源文件夹下的 js 文件配置 Babel Loader 就行。以 <code>src</code> 为例：</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre>
</td>
<td class="code">
<pre><div class="line">&#123;</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">rules</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</div><div class="line">        <span class="attr">loader</span>: <span class="string">'vue-loader'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">        <span class="attr">loader</span>: <span class="string">'babel-loader'</span>,</div><div class="line">        <span class="attr">include</span>: [</div><div class="line">          path.resolve(__dirname, <span class="string">'../src'</span>)</div><div class="line">        ],</div><div class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="Karma-配置">
<a href="#Karma-配置" class="headerlink" title="Karma 配置"></a>Karma 配置</h2>
<p>为 webpack 设置环境</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="comment">// karma.conf.js</span></div><div class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</div><div class="line"><span class="keyword">let</span> webpackConfig = merge(<span class="built_in">require</span>(<span class="string">'../../webpack.conf'</span>), &#123;</div><div class="line">  <span class="attr">devtool</span>: <span class="string">'#inline-source-map'</span>,</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</div><div class="line">      <span class="string">'process.env'</span>: <span class="string">'"testing"'</span></div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// no need for app entry during tests</span></div><div class="line"><span class="keyword">delete</span> webpackConfig.entry</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>接着输出 karma 配置，基本沿用官方的配置。注意不同的浏览器需要安装不同的 karma 插件。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="comment">// karma.conf.js</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</div><div class="line">  config.set(&#123;</div><div class="line">    <span class="comment">// to run in additional browsers:</span></div><div class="line">    <span class="comment">// 1. install corresponding karma launcher</span></div><div class="line">    <span class="comment">//    http://karma-runner.github.io/0.13/config/browsers.html</span></div><div class="line">    <span class="comment">// 2. add it to the `browsers` array below.</span></div><div class="line">    browsers: [<span class="string">'Chrome'</span>],</div><div class="line">    <span class="attr">frameworks</span>: [<span class="string">'mocha'</span>, <span class="string">'sinon-chai'</span>],</div><div class="line">    <span class="attr">reporters</span>: [<span class="string">'spec'</span>, <span class="string">'coverage'</span>],</div><div class="line">    <span class="attr">files</span>: [<span class="string">'./index.js'</span>],</div><div class="line">    <span class="attr">preprocessors</span>: &#123;</div><div class="line">      <span class="string">'./index.js'</span>: [<span class="string">'webpack'</span>, <span class="string">'sourcemap'</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">webpack</span>: webpackConfig,</div><div class="line">    <span class="attr">webpackMiddleware</span>: &#123;</div><div class="line">      <span class="attr">noInfo</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">coverageReporter</span>: &#123;</div><div class="line">      <span class="attr">dir</span>: <span class="string">'./coverage'</span>,</div><div class="line">      <span class="attr">reporters</span>: [</div><div class="line">        &#123; <span class="attr">type</span>: <span class="string">'lcov'</span>, <span class="attr">subdir</span>: <span class="string">'.'</span> &#125;,</div><div class="line">        &#123; <span class="attr">type</span>: <span class="string">'text-summary'</span> &#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="引入所有组件">
<a href="#引入所有组件" class="headerlink" title="引入所有组件"></a>引入所有组件</h2>
<p>在 <code>test/unit/index.js</code> 里，这是官方的配置：</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="comment">// require all test files (files that ends with .spec.js)</span></div><div class="line"><span class="keyword">const</span> testsContext = <span class="built_in">require</span>.context(<span class="string">'./specs'</span>, <span class="literal">true</span>, /\.spec$/)</div><div class="line">testsContext.keys().forEach(testsContext)</div><div class="line"></div><div class="line"><span class="comment">// require all src files except main.js for coverage.</span></div><div class="line"><span class="comment">// you can also change this to match only the subset of files that</span></div><div class="line"><span class="comment">// you want coverage for.</span></div><div class="line"><span class="keyword">const</span> srcContext = <span class="built_in">require</span>.context(<span class="string">'src'</span>, <span class="literal">true</span>, /^\.\/(?!main(\.js)?$)/)</div><div class="line">srcContext.keys().forEach(srcContext)</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>因为之前配置 loader 时 <code>src</code> 文件夹下的 js 才会被收集计算覆盖率，所以可以放心 require 。</p>
<p>第二段 require 是为了所有源码一起算覆盖率。可以看到官方配置只排除了 <code>src</code> 目录里的 <code>main.js</code>，如果是多入口可以用 <code>/^(?!.*\/main(\.js)?$)/i</code> 排除所有的 <code>main.js</code> 文件。</p>
<h2 id="开始测试">
<a href="#开始测试" class="headerlink" title="开始测试"></a>开始测试</h2>
<p>这基本上就是所有的配置了。其它的设置应该都是围绕插件本身，就不赘述。</p>
<h2 id="Babeless-配置">
<a href="#Babeless-配置" class="headerlink" title="Babeless 配置"></a>Babeless 配置</h2>
<p>如果不需要 Babel 可以用 <code>istanbul-instrumenter-loader</code> 收集覆盖率。</p>
<p>js 文件的配置同 Babel。 Vue 文件需要在 <code>options.loaders</code> 选项里为 <code>js</code> 补上：</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre>
</td>
<td class="code">
<pre><div class="line">&#123;</div><div class="line">  <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</div><div class="line">  <span class="attr">loader</span>: <span class="string">'vue-loader'</span>,</div><div class="line">  <span class="attr">options</span>: &#123;</div><div class="line">    <span class="attr">loaders</span>: &#123;</div><div class="line">      <span class="string">'js'</span>: <span class="string">'istanbul-instrumenter-loader'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>【完】</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;vue-cli&lt;/code&gt; 提供的官方模板确实好用。但一直用下来手贱毛病又犯了，像穿了别人的内衣，总感觉不舒服。&lt;/p&gt;
&lt;p&gt;所以有机会就瞎倒腾了一遍，总算把各个流程摸了一把。这里分享一下配置带覆盖率的单元测试。&lt;/p&gt;
&lt;h2 id=&quot;文件结构&quot;&gt;
&lt;a 
    
    </summary>
    
      <category term="Tools" scheme="https://blog.crimx.com/categories/Tools/"/>
    
    
      <category term="JavaScript" scheme="https://blog.crimx.com/tags/JavaScript/"/>
    
      <category term="Vue" scheme="https://blog.crimx.com/tags/Vue/"/>
    
      <category term="Webpack" scheme="https://blog.crimx.com/tags/Webpack/"/>
    
      <category term="Testing" scheme="https://blog.crimx.com/tags/Testing/"/>
    
  </entry>
  
  <entry>
    <title>深入 ES2015 默认参数</title>
    <link href="https://blog.crimx.com/2017/01/22/es2015-default-parameters/"/>
    <id>https://blog.crimx.com/2017/01/22/es2015-default-parameters/</id>
    <published>2017-01-21T16:00:00.000Z</published>
    <updated>2017-07-06T08:17:02.318Z</updated>
    
    <content type="html"><![CDATA[<p>ES2015 为函数加入了方便的默认参数语法。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">x = <span class="number">1</span></span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>很方便是吧，但每件新东西总有坑。</p>
<h2 id="TDZ">
<a href="#TDZ" class="headerlink" title="TDZ"></a>TDZ</h2>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">var</span> x = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">x = x</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">foo() <span class="comment">// ReferenceError: x is not defined</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>这个是最早见的坑，已经有不少文章指出了是个 TDZ (Temporal Dead Zone) 的问题。我找了大量资料，大部分文章基本是参考自<a href="http://dmitrysoshnikov.com/ecmascript/es6-notes-default-values-of-parameters/comment-page-1/#tdz-temporal-dead-zone-for-parameters" target="_blank">这篇</a>，它指出了 TDZ 但没有说明为什么。唯有<a href="http://code.wileam.com/default-value-n-params-env/" target="_blank">这篇文章</a>引用了规范，但论据和结论牛头对了马嘴。</p>
<p>本着强迫症的精神，亲自去啃了一遍规范，现在把思路整理出来。其它关于 JavaScript 的文章可以看这里<a href="https://blog.crimx.com/tags/Understanding-JavaScript/" target="_blank">https://blog.crimx.com/tags/Understanding-JavaScript/</a>。</p>
<h3 id="TDZ-基本">
<a href="#TDZ-基本" class="headerlink" title="TDZ 基本"></a>TDZ 基本</h3>
<p>先简单说一下什么是 TDZ。一般最开始见到这个词都是跟 <code>let</code> 和 <code>const</code> 挂钩。</p>
<p>两者不会像 <code>var</code> 一样抬升，但它们又会占领了所在的作用域的<em>整个部分</em>，于是这个作用域在 <code>let</code> 和 <code>const</code> 声明之前的部分就会有一个<em>死区</em>，AKA 占着茅坑不拉屎。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">var</span> x = <span class="number">1</span></div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> x = <span class="number">2</span> <span class="comment">// 这是 OK 的，这个作用域只有一个 x</span></div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">var</span> x = <span class="number">1</span></div><div class="line"></div><div class="line">&#123;</div><div class="line">  x = <span class="number">4</span> <span class="comment">// ReferenceError 茅坑已被占</span></div><div class="line">  <span class="keyword">let</span> x = <span class="number">2</span></div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">var</span> x = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> x = <span class="number">3</span> <span class="comment">// SyntaxError 不能重复声明</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>对作用域不太熟悉的可以参考一下我以前的一些<a href="https://blog.crimx.com/tags/Scope/" target="_blank"><strong>笔记</strong></a>。</p>
<h3 id="默认参数-TDZ">
<a href="#默认参数-TDZ" class="headerlink" title="默认参数 TDZ"></a>默认参数 TDZ</h3>
<p>在规范 <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-functiondeclarationinstantiation" target="_blank">9.2.12 FunctionDeclarationInstantiation(func, argumentsList)</a> 的步骤 27.c.i.2 可以看到：</p>
<blockquote>
<p>Let status be envRec.CreateMutableBinding(n).</p>
</blockquote>
<p>这是没有默认参数的情况，也就是 ES5 的做法。这个 mutable binding 顾名思义，就是 <code>var</code> 对应的绑定。</p>
<p>在步骤 28.f.i.5.a 就说明了有默认参数怎么算：</p>
<blockquote>
<p>Let initialValue be envRec.GetBindingValue(n, false).</p>
</blockquote>
<p>这个 <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-module-environment-records-getbindingvalue-n-s" target="_blank">GetBindingValue</a> 就是占茅坑的怂恿者：</p>
<blockquote>
<p>The concrete Environment Record method GetBindingValue for module Environment Records returns the value of its bound identifier whose name is the value of the argument N. However, if the binding is an indirect binding the value of the target binding is
returned. <em>If the binding exists but is uninitialized a ReferenceError is thrown</em>, regardless of the value of S.</p>
</blockquote>
<p>所以带默认参数的时候才会有 TDZ 。</p>
<h3 id="x-x">
<a href="#x-x" class="headerlink" title="x = x"></a>x = x</h3>
<p>最后参数里的 <code>x = x</code> 就跟 <code>let x = x</code> 一样处理。</p>
<p>先遇到左边的 <code>x</code> ，开始占茅坑。然后遇到等号，因为等号是右往左运算的，所以就继续看右边，发现了 <code>x</code> 。这是一个读取的行为，但这个作用域的 <code>x</code> 茅坑已经被左边的 <code>x</code> 占了，而且伦家还没完事呢。所以右边的 <code>x</code> 就踩了死区，引发 Reference Error 。</p>
<h2 id="中间作用域">
<a href="#中间作用域" class="headerlink" title="中间作用域"></a>中间作用域</h2>
<p>眼光锐利的朋友很可能发现了，我在前一步提到了作用域被占了，那么这个作用域是什么作用域？</p>
<p>这是一个中间作用域，介于函数所在的作用域和函数内部的作用域。</p>
<p><a href="http://www.ecma-international.org/ecma-262/6.0/#sec-functiondeclarationinstantiation" target="_blank">9.2.12 FunctionDeclarationInstantiation(func, argumentsList)</a></p>
<blockquote>
<p><strong>NOTE 1</strong> When an execution context is established for evaluating an ECMAScript function a new function Environment Record is created and bindings for each formal parameter are instantiated in that Environment Record. Each declaration in
the function body is also instantiated. If the function’s formal parameters do not include any default value initializers then the body declarations are instantiated in the same Environment Record as the parameters. <em>If default value parameter initializers exist, a second Environment Record is created for the body declarations.</em>Formal parameters and functions are initialized as part of FunctionDeclarationInstantiation. All other bindings are initialized during evaluation of the function body.</p>
</blockquote>
<h3 id="为什么">
<a href="#为什么" class="headerlink" title="为什么"></a>为什么</h3>
<p>为什么需要夹个新作用域？这主要是为了防止默认参数里面的表达式会被函数内部的变量污染。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">var</span> x = <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">y = (</span>) =&gt; <span class="title">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> x = <span class="literal">false</span></div><div class="line">  <span class="keyword">return</span> y()</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo() <span class="comment">// true</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>如果默认参数没有中间作用域，函数 <code>() =&gt; x</code> 就会跟 <code>var x = false</code> 共用一个作用域，<code>x</code> 就会被 shadow 掉，<code>foo()</code> 就会返回 <code>false</code> ，函数里面的变量泄露了，明显违背默认参数的本意。</p>
<p>这个 bug 可以在 Firefox 51 之前的版本观察到（目前稳定版是 50.1.0）。</p>
<h2 id="解构参数">
<a href="#解构参数" class="headerlink" title="解构参数"></a>解构参数</h2>
<p>解构 Destructured 也是相当好用的新家庭成员，还可以跟默认参数结合使用。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">&#123;x = <span class="number">1</span>, y&#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> [x, y]</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(&#123; <span class="attr">y</span>: <span class="number">5</span> &#125;) <span class="comment">// [1, 5]</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">let</span> [x = <span class="number">1</span>, y] = []   <span class="comment">// x = 1, y = undefined</span></div><div class="line">;[x = <span class="number">1</span>, y] = [<span class="number">3</span>, <span class="number">5</span>]  <span class="comment">// x = 3, y = 5</span></div><div class="line">;(&#123;<span class="attr">text</span>: x = <span class="number">1</span>&#125; = &#123;&#125;) <span class="comment">// x = 1</span></div><div class="line">;(&#123;<span class="attr">text</span>: x = <span class="number">1</span>&#125; = &#123; <span class="attr">text</span>: <span class="number">2</span> &#125;) <span class="comment">// x = 2</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>这里的 <code>{}</code> 必须用括号括起来让它解释为表达式，不然会成为块声明。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ES2015 为函数加入了方便的默认参数语法。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;gutter&quot;&gt;
&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.crimx.com/categories/JavaScript/"/>
    
    
      <category term="Understanding JavaScript" scheme="https://blog.crimx.com/tags/Understanding-JavaScript/"/>
    
      <category term="Recommended" scheme="https://blog.crimx.com/tags/Recommended/"/>
    
      <category term="Function" scheme="https://blog.crimx.com/tags/Function/"/>
    
      <category term="TDZ" scheme="https://blog.crimx.com/tags/TDZ/"/>
    
      <category term="Parameters" scheme="https://blog.crimx.com/tags/Parameters/"/>
    
      <category term="Arguments" scheme="https://blog.crimx.com/tags/Arguments/"/>
    
  </entry>
  
  <entry>
    <title>新年新博客！</title>
    <link href="https://blog.crimx.com/2017/01/01/new-blog-released/"/>
    <id>https://blog.crimx.com/2017/01/01/new-blog-released/</id>
    <published>2016-12-31T16:00:00.000Z</published>
    <updated>2016-12-31T18:50:16.914Z</updated>
    
    <content type="html"><![CDATA[<p>新博客终于写完啦！给心血们搬了个漂漂亮亮的新家。</p>
<p><a href="/about">关于这个博客</a> <span class="github-emoji" title=":point_left:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f448.png?v7">&#x1f448;</span>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新博客终于写完啦！给心血们搬了个漂漂亮亮的新家。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/about&quot;&gt;关于这个博客&lt;/a&gt; &lt;span class=&quot;github-emoji&quot; title=&quot;:point_left:&quot; data-src=&quot;https://assets-cdn.
    
    </summary>
    
      <category term="News" scheme="https://blog.crimx.com/categories/News/"/>
    
    
  </entry>
  
  <entry>
    <title>Progressive Background-Image With Ease</title>
    <link href="https://blog.crimx.com/2016/12/26/progressive-background-image/"/>
    <id>https://blog.crimx.com/2016/12/26/progressive-background-image/</id>
    <published>2016-12-25T16:00:00.000Z</published>
    <updated>2017-01-02T05:52:02.046Z</updated>
    
    <content type="html"><![CDATA[<p>Everyone likes smooth loading. Lately I tried to make the <code>background-image</code> of the menu to load progressively(also to the cover if you view the blog on mobile).</p>
<p>If you take a look at how <a href="https://medium.com/" target="_blank">Medium</a> does progressive image loading(or check out <a href="https://jmperezperez.com/medium-image-progressive-loading-placeholder/" target="_blank">this article</a>), you&#39;ll
notice that they use JavaScript and canvas to blur and store thumbnails. It seems a bit overkill to me. And when you need to do it on a <code>background-image</code> with <code>background-position</code>, things become even more complicated.</p>
<p>So I needed to figure out a simpler solution. Here&#39;s what I came up with:</p>
<h2 id="Blur-by-default">
<a href="#Blur-by-default" class="headerlink" title="Blur by default"></a>Blur by default</h2>
<p>As the article above mentioned:</p>
<blockquote>
<p>By default, when a browser renders a small image scaled up, it applies a light blur effect to smooth the artefacts of the image. The effect can also be <a href="https://developers.google.com/web/updates/2015/01/pixelated" target="_blank">turned off</a>for images like QR codes.</p>
</blockquote>
<p>But the default blur effect still feels blocky.</p>
<p></p>
<p><img src="/images/post/pexels-photo-24343-blocky-thumbnail.jpg" alt="thumbnail" style="width: 100%"></p>
<p></p>
<p>To make it smoother, I applied blur effect to the thumbnails while generating them, using <a href="https://github.com/aheckmann/gm" target="_blank">GraphicsMagick for node</a>:</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">const</span> gm = <span class="built_in">require</span>(<span class="string">'gm'</span>)</div><div class="line"></div><div class="line">gm(coverPath)</div><div class="line">  .resize(<span class="number">30</span>) <span class="comment">// or .resize(null, 30) for portrait</span></div><div class="line">  .blur(<span class="number">5</span>)</div><div class="line">  .noProfile()</div><div class="line">  .write(thumbnailPath, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123; <span class="built_in">console</span>.warn(err) &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;)</div><div class="line"></div><div class="line"><span class="comment">// or to base64</span></div><div class="line">gm(coverPath)</div><div class="line">  .resize(<span class="number">30</span>) <span class="comment">// or .resize(null, 30) for portrait</span></div><div class="line">  .blur(<span class="number">5</span>)</div><div class="line">  .noProfile()</div><div class="line">  .toBuffer(<span class="function"><span class="keyword">function</span> (<span class="params">err, buffer</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123; <span class="built_in">console</span>.warn(err) &#125;</div><div class="line">    <span class="keyword">var</span> base64 = <span class="string">'data:image/'</span> + ext + <span class="string">';base64,'</span> + buffer.toString(<span class="string">'base64'</span>)</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;)</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p></p>
<p><img src="/images/cover/thumbnails/pexels-photo-24343.jpg" alt="thumbnail" style="width: 100%"></p>
<p></p>
<p>This looks acceptable to me. No need for a canvas or blur function. Already felt relieved! <span class="github-emoji" title=":smile:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png?v7">&#x1f604;</span></p>
<h2 id="Layers">
<a href="#Layers" class="headerlink" title="Layers"></a>Layers</h2>
<p>This method divides a component into four layers: container, thumbnail, mask and content.</p>
<ul>
<li>Container holds the full-size background image.</li>
<li>Thumbnail holds the blur thumbnail, as <code>background-image</code>.</li>
<li>Mask is a translucent black element, to darken the background.</li>
<li>Everything else lives in the content layer.</li>
</ul>
<p>Use <code>z-index</code> to separate the layers.</p>
<h2 id="Image-onload">
<a href="#Image-onload" class="headerlink" title="Image onload"></a>Image onload</h2>
<p>When full-size image is loaded, hide the thumbnail. You can use this technic(with jQuery/Zepto):</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">var</span> $container = $(<span class="string">'.container'</span>)</div><div class="line"><span class="comment">// Matchs the "url(...)"</span></div><div class="line"><span class="keyword">var</span> bigBgSrc = $container.css(<span class="string">'background-image'</span>).match(<span class="regexp">/url\((.+?)\)/i</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> (bigBgSrc) &#123;</div><div class="line">  <span class="comment">// Removes quotations</span></div><div class="line">  bigBgSrc = bigBgSrc[<span class="number">1</span>].replace(<span class="regexp">/'|"/g</span>, <span class="string">''</span>)</div><div class="line"></div><div class="line">  $(<span class="string">'&lt;img&gt;'</span>)</div><div class="line">    .on(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      $container.find(<span class="string">'.thumbnail'</span>)</div><div class="line">        .addClass(<span class="string">'thumbnail--hide'</span>) <span class="comment">// Hides thumbnail</span></div><div class="line">    &#125;)</div><div class="line">    .prop(<span class="string">'src'</span>, bigBgSrc)</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>A live example:</p>
<p></p>
<p>
<iframe class="iframe-defer" height="437" scrolling="no" title="Progressive background-image Loading" src="" data-src="//codepen.io/straybugs/embed/preview/gLJyXW/?height=437&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%">See the Pen <a href="http://codepen.io/straybugs/pen/gLJyXW/" target="_blank">Progressive background-image Loading</a> by CrimX (<a href="http://codepen.io/straybugs" target="_blank">@straybugs</a>) on <a href="http://codepen.io" target="_blank">CodePen</a>.</iframe>
</p>
<p></p>
<h2 id="No-js">
<a href="#No-js" class="headerlink" title="No-js"></a>No-js</h2>
<p>No-js support is extremely easy. Just hide the thumbnail.</p>
<p></p>
<figure class="highlight css">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="selector-tag">html</span><span class="selector-class">.no-js</span> <span class="selector-class">.thumbnail</span> &#123;</div><div class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</div><div class="line">&#125;</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>For my blog I also made a <a href="https://github.com/crimx/blog/blob/master/themes/crimx/source/_scss/libs/_progressive-background-image.scss" target="_blank">Sass Mixin/Extend</a> with this method.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Everyone likes smooth loading. Lately I tried to make the &lt;code&gt;background-image&lt;/code&gt; of the menu to load progressively(also to the cov
    
    </summary>
    
      <category term="CSS" scheme="https://blog.crimx.com/categories/CSS/"/>
    
    
      <category term="Recommended" scheme="https://blog.crimx.com/tags/Recommended/"/>
    
      <category term="CSS" scheme="https://blog.crimx.com/tags/CSS/"/>
    
      <category term="Image" scheme="https://blog.crimx.com/tags/Image/"/>
    
      <category term="Progressive Image" scheme="https://blog.crimx.com/tags/Progressive-Image/"/>
    
      <category term="GraphicsMagick" scheme="https://blog.crimx.com/tags/GraphicsMagick/"/>
    
  </entry>
  
  <entry>
    <title>在博客上使用 Emoji</title>
    <link href="https://blog.crimx.com/2016/12/23/emojis-for-blog/"/>
    <id>https://blog.crimx.com/2016/12/23/emojis-for-blog/</id>
    <published>2016-12-22T16:00:00.000Z</published>
    <updated>2016-12-30T12:14:00.057Z</updated>
    
    <content type="html"><![CDATA[<p>Emoji 都要出电影了，博客怎么能不用。奇怪的是 hexo 上只有一个插件，要在文中添加 tag，还不支持 hexo3 。我不太喜欢在 markdown 里加各种 tag，所以就打算自己再写个插件。</p>
<p>Github 对 emoji 的支持就很好，所以去观摩了一下。它在生成网页的时候将关键字替换成 emoji 的 unicode 字符，然后再利用 JavaScript 将字符替换成图片，这样即使图片加载失败还有字符 fallback。</p>
<p>于是就参考这种方式写了 <a href="https://github.com/crimx/hexo-filter-github-emojis" target="_blank">hexo-filter-github-emojis</a> <span class="github-emoji" title=":tada:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f389.png?v7">&#x1f389;</span>。</p>
<p>用法与 Github 一样，效果还不错吧 <span class="github-emoji" title=":smile:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f604.png?v7">&#x1f604;</span>。</p>
<blockquote>
<p><span class="github-emoji" title=":speedboat:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f6a4.png?v7">&#x1f6a4;</span><br>&nbsp; <span class="github-emoji" title=":tropical_fish:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f420.png?v7">&#x1f420;</span></p>
<p><br><br><br><br><br></p>
<p>&emsp;&emsp;&emsp;&emsp; <span class="github-emoji" title=":octopus:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f419.png?v7">&#x1f419;</span><span class="github-emoji" title=":dolphin:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f42c.png?v7">&#x1f42c;</span><span class="github-emoji" title=":fish:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f41f.png?v7">&#x1f41f;</span><br>&emsp;&emsp;&emsp;&emsp; <i>&quot;He touched the butt!&quot;</i></p>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Emoji 都要出电影了，博客怎么能不用。奇怪的是 hexo 上只有一个插件，要在文中添加 tag，还不支持 hexo3 。我不太喜欢在 markdown 里加各种 tag，所以就打算自己再写个插件。&lt;/p&gt;
&lt;p&gt;Github 对 emoji 的支持就很好，所以去观摩了一
    
    </summary>
    
      <category term="Technics" scheme="https://blog.crimx.com/categories/Technics/"/>
    
    
      <category term="Recommended" scheme="https://blog.crimx.com/tags/Recommended/"/>
    
      <category term="Image" scheme="https://blog.crimx.com/tags/Image/"/>
    
      <category term="Emoji" scheme="https://blog.crimx.com/tags/Emoji/"/>
    
      <category term="Hexo" scheme="https://blog.crimx.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>SVG Symbol 和 Sprite 的好处和坑</title>
    <link href="https://blog.crimx.com/2016/11/28/svg-sprite/"/>
    <id>https://blog.crimx.com/2016/11/28/svg-sprite/</id>
    <published>2016-11-27T16:00:00.000Z</published>
    <updated>2016-12-30T12:32:20.306Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SVG-Symbol">
<a href="#SVG-Symbol" class="headerlink" title="SVG Symbol"></a>SVG Symbol</h1>
<p>用 Symbol 来把 SVG 合并到一个文件几乎是现在最流行的用法。</p>
<h2 id="Symbol-好处">
<a href="#Symbol-好处" class="headerlink" title="Symbol 好处"></a>Symbol 好处</h2>
<h3 id="方便">
<a href="#方便" class="headerlink" title="方便"></a>方便</h3>
<p>利用 ID 来取图案，所以不用各种计算，可以随便放。</p>
<h3 id="反复利用">
<a href="#反复利用" class="headerlink" title="反复利用"></a>反复利用</h3>
<p>这应该是一个不太容易发现的好处，你可以在文件内部继续用<code>&lt;use&gt;</code>来做图案的各种版本。这样 SVG 的优势更加明显，节省了好多空间。</p>
<p>比如这个博客里用到的社交图案，原本的是只有图案本身。例如这是 Codepen 的图案：</p>
<p></p>
<figure class="highlight html">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">"icon-codepen"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 32 32"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>codepen<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">class</span>=<span class="string">"icon-path"</span> <span class="attr">d</span>=<span class="string">"M17.050 1.259c-0.882-0.546-2.016-0.546-2.855 0.042l-12.764 8.649c-0.672 0.462-1.092 1.218-1.092 2.016v9.321c0 0.84 0.42 1.596 1.134 2.057l12.974 8.355c0.84 0.546 1.931 0.546 2.813 0l13.226-8.482c0.714-0.462 1.134-1.218 1.134-2.057v-9.153c0-0.84-0.42-1.596-1.134-2.057l-13.436-8.691zM26.959 11.378l-4.87 3.191-4.576-3.233-0.042-6.382 9.489 6.424zM14.11 4.954v6.256l-4.702 3.191-4.702-3.065 9.405-6.382zM3.446 14.401l3.023 1.973-3.023 2.057v-4.031zM14.195 27.753l-9.447-6.172 4.744-3.233 4.744 3.107c-0.042 0-0.042 6.298-0.042 6.298zM12.389 16.332l3.065-2.099 3.569 2.267-3.149 2.099-3.485-2.267zM17.553 27.753v-6.298l4.535-2.939 4.87 3.107-9.405 6.13zM28.302 18.557l-3.233-2.057 3.233-2.099v4.157z"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>现在直接在文章里<code>&lt;use&gt;</code>：</p>
<p></p>
<figure class="highlight html">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">fill</span>=<span class="string">"#000"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">"/images/symbol-defs.svg#icon-codepen"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>就是这个效果:</p>
<p></p>
<p style="text-align: center; max-height: 150px"><svg fill="#000"><use xlink:href="/images/symbol-defs.svg#icon-codepen"/></svg></p>
<p></p>
<p>在<code>symbol-defs.svg</code>里还有它的另外一个版本，带圆圈的，只需要添加几行就可以：</p>
<p></p>
<figure class="highlight html">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">"icon-codepen-circle"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 32 32"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>codepen<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"50%"</span> <span class="attr">cy</span>=<span class="string">"50%"</span> <span class="attr">r</span>=<span class="string">"50%"</span> <span class="attr">fill</span>=<span class="string">"#000"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">"#icon-codepen"</span> <span class="attr">width</span>=<span class="string">"20"</span> <span class="attr">x</span>=<span class="string">"6"</span> <span class="attr">fill</span>=<span class="string">"#fff"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>同样的使用方式，既环保又方便：</p>
<p></p>
<p style="text-align: center; max-height: 150px"><svg fill="#000"><use xlink:href="/images/symbol-defs.svg#icon-codepen-circle"/></svg></p>
<p></p>
<h2 id="Symbol-坏处">
<a href="#Symbol-坏处" class="headerlink" title="Symbol 坏处"></a>Symbol 坏处</h2>
<h3 id="不完全支持">
<a href="#不完全支持" class="headerlink" title="不完全支持"></a>不完全支持</h3>
<p>这种方式并不完全支持 SVG 的各种特性。比如我开始就踩到了一个坑。我的 LOGO 里使用了<code>clippath</code>，使用这种方式就会失去效果。这个貌似是个<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=109212" target="_blank">陈年老 bug</a> 来的。</p>
<p>解决方式就是利用工具合并路径，最好还压缩成一条，方便管理。编辑工具推荐 <a href="https://boxy-svg.com/main.html#download" target="_blank">Boxy SVG</a>，生成的代码非常轻盈，而且尽可能保留原来的样子，不会像 Illustrator 一样源码面目全非。压缩工具推荐 <a href="https://jakearchibald.github.io/svgomg/" target="_blank">SVGOMG!</a>，号称
<a href="https://github.com/svg/svgo" target="_blank">SVGO</a>&#39;s Missing GUI。</p>
<h3 id="奇怪的宽高">
<a href="#奇怪的宽高" class="headerlink" title="奇怪的宽高"></a>奇怪的宽高</h3>
<p>在宽和高是百分比的情况下，会出现跟<code>&lt;img&gt;</code>或者普通<code>&lt;svg&gt;</code>不一样的计算。有时高空出一段，有时宽空出一段。</p>
<p>这个我纠结了很久，没有找到原因。我猜是受到原本整个 SVG 的影响。</p>
<p>解决方法是用相同宽高比的父<code>&lt;div&gt;</code>来限制；或者不用百分比。</p>
<h3 id="慢">
<a href="#慢" class="headerlink" title="慢"></a>慢</h3>
<p>因为零部件是可以<code>&lt;use&gt;</code>的，所以引擎不能像图片一样直接解析完就一整块到处扔。</p>
<p>虽然这个延时非常的小，一般几乎感觉不到，但是如果像这个博客左边的菜单栏一样（电脑上），在每个页面都是同样的元素，那么切换页面的时候就可以肉眼感受到图案的闪动。这种情况就只能放弃使用 Symbol。可以考虑单独一张 SVG 图片或者：<span class="github-emoji" title=":point_down:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f447.png?v7">&#x1f447;</span></p>
<h1 id="SVG-Sprite">
<a href="#SVG-Sprite" class="headerlink" title="SVG Sprite"></a>SVG Sprite</h1>
<p>SVG Sprite 与以前的 PNG Sprite 一样，把图案按一定方式平铺到一张大图片上。</p>
<h2 id="Sprite-好处">
<a href="#Sprite-好处" class="headerlink" title="Sprite 好处"></a>Sprite 好处</h2>
<h3 id="对齐">
<a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3>
<p>SVG 不受大小限制，所以 Sprite 可以按统一的规格排列。</p>
<p>取的时候也不受大小限制，利用百分比来取。</p>
<p>比如这个博客左边菜单的图案就是 SVG Sprite，<a href="https://github.com/crimx/blog/blob/master/themes/crimx/source/_scss/libs/_svg-icons.scss" target="_blank">利用 Sass 自动计算百分比</a>。</p>
<h3 id="快">
<a href="#快" class="headerlink" title="快"></a>快</h3>
<p>这种方式与普通图片一样肉眼看不到延时，而且还结合了 SVG 不受大小限制的优势。</p>
<h2 id="Sprite-坏处">
<a href="#Sprite-坏处" class="headerlink" title="Sprite 坏处"></a>Sprite 坏处</h2>
<h3 id="添加麻烦">
<a href="#添加麻烦" class="headerlink" title="添加麻烦"></a>添加麻烦</h3>
<p>图案受位置影响，当然没有 Symbol 方法来得方便。</p>
<p>因为需要快速显示的图案不多，我是利用 <a href="https://boxy-svg.com/main.html#download" target="_blank">Boxy SVG</a> 一个一个添加的。</p>
<p>不太用心的查过一下，没注意到有合适的自动化工具。</p>
<p>能用 Symbol 的当然优先使用 Symbol 方法，所以 Sprite 用的也不多，手动添加可以满足。</p>
<h3 id="有误差">
<a href="#有误差" class="headerlink" title="有误差"></a>有误差</h3>
<p>使用百分比因为受小数影响，图案会有<code>1px</code>浮动，当然这个<code>1px</code>是根据图案当前大小得出的，所以越小图案浮动的位置越大。</p>
<p>解决方法有两个，一是避免产生小数，按倍数来设置图案大小；二是按图案最小的情况计算出血，把图案缩小空出足够位置。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SVG-Symbol&quot;&gt;
&lt;a href=&quot;#SVG-Symbol&quot; class=&quot;headerlink&quot; title=&quot;SVG Symbol&quot;&gt;&lt;/a&gt;SVG Symbol&lt;/h1&gt;
&lt;p&gt;用 Symbol 来把 SVG 合并到一个文件几乎是现在最流行的用法。&lt;
    
    </summary>
    
      <category term="SVG" scheme="https://blog.crimx.com/categories/SVG/"/>
    
    
      <category term="Recommended" scheme="https://blog.crimx.com/tags/Recommended/"/>
    
      <category term="Image" scheme="https://blog.crimx.com/tags/Image/"/>
    
      <category term="SVG" scheme="https://blog.crimx.com/tags/SVG/"/>
    
      <category term="Sprite" scheme="https://blog.crimx.com/tags/Sprite/"/>
    
  </entry>
  
  <entry>
    <title>CSS 过渡未知高度</title>
    <link href="https://blog.crimx.com/2016/11/12/transition-display-none/"/>
    <id>https://blog.crimx.com/2016/11/12/transition-display-none/</id>
    <published>2016-11-11T16:00:00.000Z</published>
    <updated>2016-12-30T05:09:26.564Z</updated>
    
    <content type="html"><![CDATA[<p>有时候往 dom 里插入一些元素，会希望 dom 慢慢腾开空间，再把插入的元素呈现出来。</p>
<p>但对于过渡 <code>height</code> 未知的元素，暂时没有完美的方法，浏览器还不支持 <code>height</code> 过渡到 <code>auto</code>。而且这种方式也会造成这个元素后面的所有元素一并重绘，蛮耗资源的。</p>
<p>以下是利用 <code>max-height</code> 来过渡，适合已知元素高度的范围。但也不是完美方法，<code>max-height</code> 固定了，那么同样的时间，元素高度越小过渡就会显得越快。所以只好尽量选最接近的 <code>max-height</code>。</p>
<p></p>
<p><iframe height="300" scrolling="no" title="css transition max-height" src="//codepen.io/straybugs/embed/preview/ObqVBy/?height=300&theme-id=0&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%">See the Pen <a href="http://codepen.io/straybugs/pen/ObqVBy/" target="_blank">css transition max-height</a> by CrimX (<a href="http://codepen.io/straybugs" target="_blank">@straybugs</a>) on <a href="http://codepen.io" target="_blank">CodePen</a>.</iframe></p>
<p></p>
<p>写的时候犯了一个小错误，折腾了一会才发现时间 0 忘了加单位。CSS 时间里<code>0</code><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/time" target="_blank">是非法的值</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候往 dom 里插入一些元素，会希望 dom 慢慢腾开空间，再把插入的元素呈现出来。&lt;/p&gt;
&lt;p&gt;但对于过渡 &lt;code&gt;height&lt;/code&gt; 未知的元素，暂时没有完美的方法，浏览器还不支持 &lt;code&gt;height&lt;/code&gt; 过渡到 &lt;code&gt;auto&lt;
    
    </summary>
    
      <category term="CSS" scheme="https://blog.crimx.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://blog.crimx.com/tags/CSS/"/>
    
      <category term="Transition" scheme="https://blog.crimx.com/tags/Transition/"/>
    
  </entry>
  
  <entry>
    <title>Photoshop Pen Tool</title>
    <link href="https://blog.crimx.com/2016/09/25/photoshop-pen-tool/"/>
    <id>https://blog.crimx.com/2016/09/25/photoshop-pen-tool/</id>
    <published>2016-09-24T16:00:00.000Z</published>
    <updated>2016-12-30T05:14:51.121Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://design.tutsplus.com/tutorials/photoshops-pen-tool-the-comprehensive-guide--psd-718" target="_blank">https://design.tutsplus.com/tutorials/photoshops-pen-tool-the-comprehensive-guide--psd-718</a></p>
<p>这篇文章非常好的总结了 PS 钢笔工具的用法，其中的练习 PSD 特别好用，照着画一遍基本就懂得怎么操作锚点。</p>
<p><img src="/images/post/photoshop/photoshop-pen-tool.jpg" alt="photoshop-pen-tool"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://design.tutsplus.com/tutorials/photoshops-pen-tool-the-comprehensive-guide--psd-718&quot; target=&quot;_blank&quot;&gt;https://design.tutsp
    
    </summary>
    
      <category term="Tools" scheme="https://blog.crimx.com/categories/Tools/"/>
    
    
      <category term="Photoshop" scheme="https://blog.crimx.com/tags/Photoshop/"/>
    
  </entry>
  
  <entry>
    <title>自适应背景图片</title>
    <link href="https://blog.crimx.com/2016/09/11/responsive-cover/"/>
    <id>https://blog.crimx.com/2016/09/11/responsive-cover/</id>
    <published>2016-09-10T16:00:00.000Z</published>
    <updated>2017-01-25T17:17:46.163Z</updated>
    
    <content type="html"><![CDATA[<p>很多时候我们希望背景图片能够在元素不同大小的情况下都能够显示出主体。</p>
<p>居中是最常见的方式，但如果主体不在中间这个效果就大打折扣了。</p>
<p>这个对我来说一开始仅仅是一个念头，也没太注意。直到一次在 podcast 上听到有位嘉宾做了一个 jQuery 插件 <a href="https://github.com/wentin/ResponsifyJS" target="_blank">https://github.com/wentin/ResponsifyJS</a>，主要就是为了实现这种效果。</p>
<p>感兴趣地去看了一下，感觉还是太重了。但我有个缺点就是一旦开始了就不容易停下来，就继续找了一下资料。发现其实浏览器本身就有很好的实现。</p>
<p></p>
<p style="text-align: center; font-size: 1.29rem"><span>Background Positon!</span></p>
<p></p>
<p><code>background-position</code> 支持百分比属性。当使用百分比属性的时候，就是将背景图片与元素在百分比指定的位置重合。比如说 <code>20% 40%</code>，在横向上背景图片的 20% 与元素的 20% 对齐，竖向上背景图片的 40% 与元素的 40% 对齐。</p>
<p>这就相当于指定了一个焦点。把焦点放到主体上，那么无论元素怎么变化，主体都会有较好的显示效果。而且这些计算都是浏览器来干的！</p>
<p>现在唯一麻烦的地方就是要指定焦点。我继续找了一些资料，JavaScript 上也有人实现一些 Content Aware 的算法，比如这个 <a href="https://github.com/jwagner/smartcrop.js/" target="_blank">Smartcrop.js</a>。但是由于我没有批量的图片需要调整，就没有折腾去研究这个，而是研究怎么方便手动选择。</p>
<p>后来就做了这个所见即所得工具，<a href="http://www.crimx.com/portrait-crop/" target="_blank">http://www.crimx.com/portrait-crop/</a>，除了标记焦点以外还可以进行竖向的裁剪，节省空间。</p>
<p>移动焦点的时候右边会实时计算 <code>background-position</code>，包括了横向和竖向的结果。不需要裁剪的话只用横向的就行。</p>
<p>右下还提供了 json 格式。我的博客就是为所有封面保存了一个 json 文件，在 hexo 中设钩子去读再作为 inline css 写入。每次添加的时候复制粘贴就可以。</p>
<p>裁剪框是基于 <a href="https://github.com/fengyuanchen/cropperjs" target="_blank">cropperjs</a> 实现的，添加了个焦点。实现的时候还顺便修了 bug 提交了个 pr 给原作者哈哈。</p>
<p><strong>2016年12月31日按</strong>：他今天才 merge …… <span class="github-emoji" title=":sweat_smile:" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f605.png?v7">&#x1f605;</span> 都忘记有提过这个 pr 了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多时候我们希望背景图片能够在元素不同大小的情况下都能够显示出主体。&lt;/p&gt;
&lt;p&gt;居中是最常见的方式，但如果主体不在中间这个效果就大打折扣了。&lt;/p&gt;
&lt;p&gt;这个对我来说一开始仅仅是一个念头，也没太注意。直到一次在 podcast 上听到有位嘉宾做了一个 jQuery 插
    
    </summary>
    
      <category term="CSS" scheme="https://blog.crimx.com/categories/CSS/"/>
    
    
      <category term="Recommended" scheme="https://blog.crimx.com/tags/Recommended/"/>
    
      <category term="CSS" scheme="https://blog.crimx.com/tags/CSS/"/>
    
      <category term="Responsive" scheme="https://blog.crimx.com/tags/Responsive/"/>
    
      <category term="Background" scheme="https://blog.crimx.com/tags/Background/"/>
    
  </entry>
  
  <entry>
    <title>Gulp 使用命令行参数</title>
    <link href="https://blog.crimx.com/2016/08/07/gulp-console-arguments/"/>
    <id>https://blog.crimx.com/2016/08/07/gulp-console-arguments/</id>
    <published>2016-08-06T16:00:00.000Z</published>
    <updated>2017-01-22T07:47:12.427Z</updated>
    
    <content type="html"><![CDATA[<p>命令行参数的好处就是方便控制，引用 Stack Overflow 的一个<a href="http://stackoverflow.com/a/23088183" target="_blank">回答</a>：</p>
<blockquote>
<p>The environment setting is available during all subtasks. So I can use this flag on the watch task too.</p>
</blockquote>
<p>通过 <code>require(&#39;gulp-util&#39;).env</code> 获得参数：</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'gulp-util'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'styles'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src([<span class="string">'src/styles/'</span> + (util.env.theme ? util.env.theme : <span class="string">'main'</span>) + <span class="string">'.scss'</span>])</div><div class="line">    .pipe(compass(&#123;</div><div class="line">        <span class="attr">config_file</span>: <span class="string">'./config.rb'</span>,</div><div class="line">        <span class="attr">sass</span>   : <span class="string">'src/styles'</span>,</div><div class="line">        <span class="attr">css</span>    : <span class="string">'dist/styles'</span>,</div><div class="line">        <span class="attr">style</span>  : <span class="string">'expanded'</span></div><div class="line"></div><div class="line">    &#125;))</div><div class="line">    .pipe(autoprefixer(<span class="string">'last 2 version'</span>, <span class="string">'safari 5'</span>, <span class="string">'ie 8'</span>, <span class="string">'ie 9'</span>, <span class="string">'ff 17'</span>, <span class="string">'opera 12.1'</span>, <span class="string">'ios 6'</span>, <span class="string">'android 4'</span>))</div><div class="line">    .pipe(livereload(server))</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/styles'</span>))</div><div class="line">    .pipe(notify(&#123; <span class="attr">message</span>: <span class="string">'Styles task complete'</span> &#125;));</div><div class="line">&#125;);</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>就可以这么用：</p>
<p></p>
<figure class="highlight bash">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div></pre>
</td>
<td class="code">
<pre><div class="line">gulp watch --theme literature</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;命令行参数的好处就是方便控制，引用 Stack Overflow 的一个&lt;a href=&quot;http://stackoverflow.com/a/23088183&quot; target=&quot;_blank&quot;&gt;回答&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The environ
    
    </summary>
    
      <category term="Tools" scheme="https://blog.crimx.com/categories/Tools/"/>
    
    
      <category term="Gulp" scheme="https://blog.crimx.com/tags/Gulp/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text Title Case 快捷键</title>
    <link href="https://blog.crimx.com/2016/05/27/sublime-text-title-case/"/>
    <id>https://blog.crimx.com/2016/05/27/sublime-text-title-case/</id>
    <published>2016-05-26T16:00:00.000Z</published>
    <updated>2016-12-29T09:24:51.197Z</updated>
    
    <content type="html"><![CDATA[<p>Preferences -&gt; Key Bindings 添加：</p>
<p></p>
<figure class="highlight json">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
</td>
<td class="code">
<pre><div class="line">[</div><div class="line">  &#123; <span class="attr">"keys"</span>: [<span class="string">"ctrl+k"</span>, <span class="string">"ctrl+t"</span>], <span class="attr">"command"</span>: <span class="string">"title_case"</span> &#125;</div><div class="line">  // .....</div><div class="line">]</div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>然后就可以用 <kbd>Ctrl</kbd>+<kbd>k</kbd> 再按下 <kbd>Ctrl</kbd>+<kbd>t</kbd> 使用 Title Case。</p>
<p>Package Control 上有个很老的 Package，Smart Title Case。能识别更复杂的情况，但是有 bug，核心代码已经修复 <a href="https://github.com/ppannuto/python-titlecase" target="_blank">https://github.com/ppannuto/python-titlecase</a>，但 Package 的作者早已不再维护，下载量也不大。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Preferences -&amp;gt; Key Bindings 添加：&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;gutter&quot;&gt;
&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;
    
    </summary>
    
      <category term="Tools" scheme="https://blog.crimx.com/categories/Tools/"/>
    
    
      <category term="Sublime Text" scheme="https://blog.crimx.com/tags/Sublime-Text/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript This 的六道坎</title>
    <link href="https://blog.crimx.com/2016/05/12/understanding-this/"/>
    <id>https://blog.crimx.com/2016/05/12/understanding-this/</id>
    <published>2016-05-11T16:00:00.000Z</published>
    <updated>2017-01-26T11:01:38.169Z</updated>
    
    <content type="html"><![CDATA[<p>鉴于<code>this</code>风骚的运作方式，对<code>this</code>的理解是永不过时的话题，本文试图通过将其大卸六块来钉住这个磨人的妖精。</p>
<h1 id="首先">
<a href="#首先" class="headerlink" title="首先"></a>首先</h1>
<blockquote>
<p><code>this</code> is all about context.</p>
</blockquote>
<p><code>this</code>说白了就是找大佬，找拥有当前上下文（context）的对象（context object）。</p>
<p>大佬可以分为六层，层数越高权力越大，<code>this</code>只会认最大的。</p>
<h2 id="第一层：世界尽头">
<a href="#第一层：世界尽头" class="headerlink" title="第一层：世界尽头"></a>第一层：世界尽头</h2>
<p>权力最小的大佬是作为备胎的存在，在普通情况下就是全局，浏览器里就是<code>window</code>；在<code>use strict</code>的情况下就是<code>undefined</code>。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showThis</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showStrictThis</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="meta">  'use strict'</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">showThis() <span class="comment">// window</span></div><div class="line">showStrictThis() <span class="comment">// undefined</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="第二层：点石成金">
<a href="#第二层：点石成金" class="headerlink" title="第二层：点石成金"></a>第二层：点石成金</h2>
<p>第二层大佬说白了就是找这个函数前面的点<code>.</code>。</p>
<p>如果用到<code>this</code>的那个函数是属于某个 context object 的，那么这个 context object 绑定到<code>this</code>。</p>
<p>比如下面的例子，<code>boss</code>是<code>returnThis</code>的 context object ，或者说<code>returnThis</code>属于<code>boss</code>。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">var</span> boss = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'boss'</span>,</div><div class="line">  returnThis () &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">boss.returnThis() === boss <span class="comment">// true</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>下面这个例子就要小心点咯，能想出答案么？</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">var</span> boss1 = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'boss1'</span>,</div><div class="line">  returnThis () &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> boss2 = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'boss2'</span>,</div><div class="line">  returnThis () &#123;</div><div class="line">    <span class="keyword">return</span> boss1.returnThis()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> boss3 = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'boss3'</span>,</div><div class="line">  returnThis () &#123;</div><div class="line">    <span class="keyword">var</span> returnThis = boss1.returnThis</div><div class="line">    <span class="keyword">return</span> returnThis()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">boss1.returnThis() <span class="comment">// boss1</span></div><div class="line">boss2.returnThis() <span class="comment">// ?</span></div><div class="line">boss3.returnThis() <span class="comment">// ?</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>答案是<code>boss1</code>和<code>window</code>哦，猜对了吗。</p>
<p>只要看使用<code>this</code>的那个函数。</p>
<p>在<code>boss2.returnThis</code>里，使用<code>this</code>的函数是<code>boss1.returnThis</code>，所以<code>this</code>绑定到<code>boss1</code>；</p>
<p>在<code>boss3.returnThis</code>里，使用<code>this</code>的函数是<code>returnThis</code>，所以<code>this</code>绑定到备胎。</p>
<p>要想把<code>this</code>绑定到<code>boss2</code>怎么做呢？</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">var</span> boss1 = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'boss1'</span>,</div><div class="line">  returnThis () &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> boss2 = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'boss2'</span>,</div><div class="line">  <span class="attr">returnThis</span>: boss1.returnThis</div><div class="line">&#125;</div><div class="line"></div><div class="line">boss2.returnThis() <span class="comment">//boss2</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>没错，只要让使用<code>this</code>的函数是属于<code>boss2</code>就行。</p>
<h2 id="第三层：指腹为婚">
<a href="#第三层：指腹为婚" class="headerlink" title="第三层：指腹为婚"></a>第三层：指腹为婚</h2>
<p>第三层大佬是<code>Object.prototype.call</code>和<code>Object.prototype.apply</code>，它们可以通过参数指定<code>this</code>。（注意<code>this</code>是不可以直接赋值的哦，<code>this = 2</code>会报<code>ReferenceError</code>。）</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnThis</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> boss1 = &#123; <span class="attr">name</span>: <span class="string">'boss1'</span> &#125;</div><div class="line"></div><div class="line">returnThis() <span class="comment">// window</span></div><div class="line">returnThis.call(boss1) <span class="comment">// boss1</span></div><div class="line">returnThis.apply(boss1) <span class="comment">// boss1</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="第四层：海誓山盟">
<a href="#第四层：海誓山盟" class="headerlink" title="第四层：海誓山盟"></a>第四层：海誓山盟</h2>
<p>第四层大佬是<code>Object.prototype.bind</code>，他不但通过一个新函数来提供永久的绑定，还会覆盖第三层大佬的命令。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnThis</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> boss1 = &#123; <span class="attr">name</span>: <span class="string">'boss1'</span>&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> boss1returnThis = returnThis.bind(boss1)</div><div class="line"></div><div class="line">boss1returnThis() <span class="comment">// boss1</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> boss2 = &#123; <span class="attr">name</span>: <span class="string">'boss2'</span> &#125;</div><div class="line">boss1returnThis.call(boss2) <span class="comment">// still boss1</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="第五层：内有乾坤">
<a href="#第五层：内有乾坤" class="headerlink" title="第五层：内有乾坤"></a>第五层：内有乾坤</h2>
<p>一个比较容易忽略的会绑定<code>this</code>的地方就是<code>new</code>。当我们<code>new</code>一个函数时，就会自动把<code>this</code>绑定在新对象上，然后再调用这个函数。它会覆盖<code>bind</code>的绑定。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showThis</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">showThis() <span class="comment">// window</span></div><div class="line"><span class="keyword">new</span> showThis() <span class="comment">// showThis</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> boss1 = &#123; <span class="attr">name</span>: <span class="string">'boss1'</span> &#125;</div><div class="line">showThis.call(boss1) <span class="comment">// boss1</span></div><div class="line"><span class="keyword">new</span> showThis.call(boss1) <span class="comment">// TypeError</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> boss1showThis = showThis.bind(boss1)</div><div class="line">boss1showThis() <span class="comment">// boss1</span></div><div class="line"><span class="keyword">new</span> boss1showThis() <span class="comment">// showThis</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<h2 id="第六层：军令如山">
<a href="#第六层：军令如山" class="headerlink" title="第六层：军令如山"></a>第六层：军令如山</h2>
<p>最后一个法力无边的大佬就是 ES2015 的箭头函数。箭头函数里的<code>this</code>不再妖艳，被永远封印到当前词法作用域之中，称作 Lexical this ，在代码运行前就可以确定。没有其他大佬可以覆盖。</p>
<p>这样的好处就是方便让回调函数的<code>this</code>使用当前的作用域，不怕引起混淆。</p>
<p>所以对于箭头函数，只要看它在哪里创建的就行。</p>
<p>如果对 V8 实现的词法作用域感兴趣可以看看<a href="http://blog.crimx.com/2015/03/29/javascript-hoist-under-the-hood/" target="_blank">这里</a>。</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span> (<span class="params">cb</span>) </span>&#123;</div><div class="line">  cb()</div><div class="line">&#125;</div><div class="line"></div><div class="line">callback(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>) &#125;) <span class="comment">// window</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> boss1 = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'boss1'</span>,</div><div class="line">  <span class="attr">callback</span>: callback,</div><div class="line">  callback2 () &#123;</div><div class="line">    callback(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>) &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">boss1.callback(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>) &#125;) <span class="comment">// still window</span></div><div class="line">boss1.callback2(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>) &#125;) <span class="comment">// boss1</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>下面这种奇葩的使用方式就需要注意：</p>
<p></p>
<figure class="highlight javascript">
<table>
<tr>
<td class="gutter">
<pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre>
</td>
<td class="code">
<pre><div class="line"><span class="keyword">var</span> returnThis = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span></div><div class="line"></div><div class="line">returnThis() <span class="comment">// window</span></div><div class="line"><span class="keyword">new</span> returnThis() <span class="comment">// TypeError</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> boss1 = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'boss1'</span>,</div><div class="line">  returnThis () &#123;</div><div class="line">    <span class="keyword">var</span> func = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span></div><div class="line">    <span class="keyword">return</span> func()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">returnThis.call(boss1) <span class="comment">// still window</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> boss1returnThis = returnThis.bind(boss1)</div><div class="line">boss1returnThis() <span class="comment">// still window</span></div><div class="line"></div><div class="line">boss1.returnThis() <span class="comment">// boss1</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> boss2 = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'boss2'</span>,</div><div class="line">  <span class="attr">returnThis</span>: boss1.returnThis</div><div class="line">&#125;</div><div class="line"></div><div class="line">boss2.returnThis() <span class="comment">// boss2</span></div></pre>
</td>
</tr>
</table>
</figure>
<p></p>
<p>如果你不知道最后为什么会是 boss2，继续理解“对于箭头函数，只要看它在哪里创建”这句话。</p>
<h1 id="参考">
<a href="#参考" class="headerlink" title="参考"></a>参考</h1>
<ol>
<li>Mozilla Developer Network</li>
<li>Kyle Simpson, <em>this &amp; object prototypes</em></li>
<li>Axel Rauschmayer, <em>Speaking JavaScript</em></li>
</ol>
<p>[完]</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;鉴于&lt;code&gt;this&lt;/code&gt;风骚的运作方式，对&lt;code&gt;this&lt;/code&gt;的理解是永不过时的话题，本文试图通过将其大卸六块来钉住这个磨人的妖精。&lt;/p&gt;
&lt;h1 id=&quot;首先&quot;&gt;
&lt;a href=&quot;#首先&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.crimx.com/categories/JavaScript/"/>
    
    
      <category term="Understanding JavaScript" scheme="https://blog.crimx.com/tags/Understanding-JavaScript/"/>
    
      <category term="Recommended" scheme="https://blog.crimx.com/tags/Recommended/"/>
    
      <category term="This" scheme="https://blog.crimx.com/tags/This/"/>
    
  </entry>
  
</feed>
